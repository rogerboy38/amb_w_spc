[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch",
  "enabled": 1,
  "modified": "2025-10-24 11:52:39.066942",
  "module": "amb_w_tds",
  "name": "Batch L1",
  "script": "frappe.ui.form.on('Batch AMB', {\r\n    // Initialize form\r\n    onload: function(frm) {\r\n        console.log('Batch AMB form loaded');\r\n        \r\n        // Ensure we're in form view, not tree view\r\n        if (frm.meta.default_view === 'Tree') {\r\n            frm.set_df_property('default_view', 'List');\r\n            console.log('Switched from Tree to List view');\r\n        }\r\n        \r\n        // Set up field requirements\r\n        frm.set_df_property('work_order_ref', 'reqd', 1);\r\n        frm.set_df_property('production_plant_name', 'reqd', 1);\r\n        frm.set_df_property('custom_batch_level', 'reqd', 1);\r\n        \r\n        // Add custom buttons for batch generation\r\n        frm.add_custom_button(__('Generate Level 1 Batch'), function() {\r\n            generate_batch_code(frm, '1');\r\n        }, __('Batch Actions'));\r\n        \r\n        frm.add_custom_button(__('Generate Child Batch'), function() {\r\n            if (!frm.doc.custom_batch_level) {\r\n                frappe.msgprint(__('Please select batch level first'));\r\n                return;\r\n            }\r\n            generate_batch_code(frm, frm.doc.custom_batch_level);\r\n        }, __('Batch Actions'));\r\n        \r\n        // Add button to switch to form view if needed\r\n        if (window.location.href.includes('tree')) {\r\n            frm.add_custom_button(__('Switch to Form View'), function() {\r\n                window.location.href = '/app/batch-amb';\r\n            }, __('View'));\r\n        }\r\n    },\r\n\r\n    // After form is rendered\r\n    refresh: function(frm) {\r\n        console.log('Form refreshed');\r\n        \r\n        // Ensure save buttons are visible\r\n        if (frm.page && frm.page.btn_primary) {\r\n            frm.page.btn_primary.show();\r\n            frm.page.btn_secondary.show();\r\n        }\r\n        \r\n        // Check if we're in a dialog/preview and force full form if needed\r\n        if (frm.is_dirty() && !frm.doc.__islocal && frm.meta.issingle == 0) {\r\n            setTimeout(function() {\r\n                if (frm.page && frm.page.btn_primary && frm.page.btn_primary.is(':hidden')) {\r\n                    console.log('Enabling save buttons for existing document');\r\n                    frm.page.btn_primary.show();\r\n                    frm.page.btn_secondary.show();\r\n                    frm.enable_save();\r\n                }\r\n            }, 1000);\r\n        }\r\n    },\r\n\r\n    // When work order is selected\r\n    work_order_ref: function(frm) {\r\n        if (frm.doc.work_order_ref) {\r\n            console.log('Work Order selected:', frm.doc.work_order_ref);\r\n            \r\n            // Fetch work order details using your server API\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Work Order',\r\n                    fieldname: ['production_item', 'name', 'creation', 'sales_order'],\r\n                    filters: { name: frm.doc.work_order_ref }\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        console.log('Work Order details fetched:', r.message);\r\n                        \r\n                        // Set item to manufacture\r\n                        frm.set_value('item_to_manufacture', r.message.production_item);\r\n                        \r\n                        // Extract consecutive number from work order name (last 3 digits)\r\n                        let wo_name = r.message.name;\r\n                        let consecutive_match = wo_name.match(/\\d{3}$/);\r\n                        if (consecutive_match) {\r\n                            frm.set_value('consecutive_number', parseInt(consecutive_match[0]));\r\n                        } else {\r\n                            // Fallback: use creation timestamp\r\n                            frm.set_value('consecutive_number', 1);\r\n                        }\r\n                        \r\n                        // Extract year from creation date\r\n                        let creation_date = new Date(r.message.creation);\r\n                        let year = creation_date.getFullYear().toString().slice(-2);\r\n                        frm.set_value('lft', year);\r\n                        \r\n                        // Set sales order if available\r\n                        if (r.message.sales_order) {\r\n                            frm.set_value('sales_order_related', r.message.sales_order);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    // When production plant is selected\r\n    production_plant_name: function(frm) {\r\n        if (frm.doc.production_plant_name) {\r\n            console.log('Production Plant selected:', frm.doc.production_plant_name);\r\n            \r\n            // Extract plant code (first character or numeric value from name)\r\n            let plant_code = extract_plant_code(frm.doc.production_plant_name);\r\n            frm.set_value('rgt', plant_code);\r\n            console.log('Plant code extracted:', plant_code);\r\n        }\r\n    },\r\n\r\n    // When batch level changes\r\n    custom_batch_level: function(frm) {\r\n        if (frm.doc.custom_batch_level) {\r\n            console.log('Batch Level changed to:', frm.doc.custom_batch_level);\r\n            \r\n            if (frm.doc.custom_batch_level > '1') {\r\n                frm.set_df_property('parent_batch_amb', 'reqd', 1);\r\n                \r\n                // Auto-fetch possible parents based on level\r\n                if (frm.doc.work_order_ref) {\r\n                    fetch_possible_parents(frm);\r\n                }\r\n            } else {\r\n                frm.set_df_property('parent_batch_amb', 'reqd', 0);\r\n                frm.set_value('parent_batch_amb', '');\r\n            }\r\n            \r\n            // Auto-generate batch code if all required fields are present\r\n            if (frm.doc.work_order_ref && frm.doc.production_plant_name && frm.doc.item_to_manufacture) {\r\n                setTimeout(function() {\r\n                    generate_batch_code(frm, frm.doc.custom_batch_level);\r\n                }, 500);\r\n            }\r\n        }\r\n    },\r\n\r\n    // When parent batch is selected\r\n    parent_batch_amb: function(frm) {\r\n        if (frm.doc.parent_batch_amb && frm.doc.custom_batch_level > '1') {\r\n            console.log('Parent Batch selected:', frm.doc.parent_batch_amb);\r\n            \r\n            // Verify parent level is appropriate using your server API\r\n            frappe.call({\r\n                method: 'frappe.client.get_value',\r\n                args: {\r\n                    doctype: 'Batch AMB',\r\n                    fieldname: ['custom_batch_level', 'custom_generated_batch_name'],\r\n                    filters: { name: frm.doc.parent_batch_amb }\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        let parent_level = parseInt(r.message.custom_batch_level);\r\n                        let current_level = parseInt(frm.doc.custom_batch_level);\r\n                        \r\n                        if (parent_level !== current_level - 1) {\r\n                            frappe.msgprint(__('Parent batch must be level ' + (current_level - 1)));\r\n                            frm.set_value('parent_batch_amb', '');\r\n                        } else {\r\n                            console.log('Parent validation passed');\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    // Before saving the document\r\n    before_save: function(frm) {\r\n        console.log('Before save validation');\r\n        \r\n        // Validate batch level and parent relationship\r\n        if (frm.doc.custom_batch_level > '1' && !frm.doc.parent_batch_amb) {\r\n            frappe.throw(__('Parent Batch AMB is required for level ' + frm.doc.custom_batch_level));\r\n        }\r\n        \r\n        // Validate batch code uniqueness using your server API\r\n        if (frm.doc.custom_generated_batch_name) {\r\n            validate_batch_uniqueness(frm);\r\n        }\r\n        \r\n        // Set title same as batch code\r\n        if (frm.doc.custom_generated_batch_name && !frm.doc.title) {\r\n            frm.set_value('title', frm.doc.custom_generated_batch_name);\r\n        }\r\n        \r\n        // Ensure lft and rgt are properly set for tree structure\r\n        if (!frm.doc.lft || !frm.doc.rgt) {\r\n            frm.set_value('lft', '0001');\r\n            frm.set_value('rgt', '0002');\r\n        }\r\n    }\r\n});\r\n\r\n// Extract plant code from production plant name\r\nfunction extract_plant_code(plant_name) {\r\n    // Try to extract numeric code from name\r\n    let numeric_match = plant_name.match(/\\d+/);\r\n    if (numeric_match) {\r\n        return numeric_match[0].charAt(0); // First digit of the number\r\n    }\r\n    \r\n    // Fallback: first character of the plant name\r\n    return plant_name.charAt(0);\r\n}\r\n\r\n// Fetch possible parent batches for the current level\r\nfunction fetch_possible_parents(frm) {\r\n    let parent_level = parseInt(frm.doc.custom_batch_level) - 1;\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            filters: {\r\n                'work_order_ref': frm.doc.work_order_ref,\r\n                'custom_batch_level': parent_level.toString()\r\n            },\r\n            fields: ['name', 'custom_generated_batch_name', 'title'],\r\n            limit: 50\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                console.log('Available parents:', r.message);\r\n                // You could populate a dropdown or suggest parents here\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Function to generate batch code (integrated with your server API)\r\nfunction generate_batch_code(frm, level) {\r\n    console.log('Generating batch code for level:', level);\r\n    \r\n    // Validate required fields\r\n    if (!frm.doc.work_order_ref) {\r\n        frappe.msgprint(__('Work Order Reference is required'));\r\n        return;\r\n    }\r\n    \r\n    if (!frm.doc.production_plant_name) {\r\n        frappe.msgprint(__('Production Plant is required'));\r\n        return;\r\n    }\r\n    \r\n    if (!frm.doc.item_to_manufacture) {\r\n        frappe.msgprint(__('Item to Manufacture is required'));\r\n        return;\r\n    }\r\n    \r\n    // Use your server API for batch generation to ensure consistency\r\n    frappe.call({\r\n        method: 'batch_amb_custom_tree_api.add_batch_node',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            is_group: (level === '1' || level === '2') ? 1 : 0,\r\n            work_order_ref: frm.doc.work_order_ref,\r\n            parent: frm.doc.parent_batch_amb || null,\r\n            is_root: (level === '1')\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                console.log('Batch node created via API:', r.message);\r\n                \r\n                // Now generate the actual batch code\r\n                generate_actual_batch_code(frm, level, r.message.name);\r\n            }\r\n        },\r\n        error: function(err) {\r\n            console.error('API Error:', err);\r\n            frappe.msgprint(__('Error creating batch node: ') + err.message);\r\n        }\r\n    });\r\n}\r\n\r\n// Generate the actual batch code format\r\nfunction generate_actual_batch_code(frm, level, batch_name) {\r\n    // Get base components\r\n    let product_code = frm.doc.item_to_manufacture.substring(0, 4);\r\n    let consecutive = frm.doc.consecutive_number ? frm.doc.consecutive_number.toString().padStart(3, '0') : '001';\r\n    let year = frm.doc.lft || new Date().getFullYear().toString().slice(-2);\r\n    let plant_code = frm.doc.rgt || extract_plant_code(frm.doc.production_plant_name);\r\n    \r\n    console.log('Base components:', { product_code, consecutive, year, plant_code });\r\n    \r\n    // Generate base batch code (level 1)\r\n    let base_batch_code = `${product_code}-${consecutive}-${year}-${plant_code}`;\r\n    let final_batch_code = base_batch_code;\r\n    \r\n    // Add level-specific suffix\r\n    switch(level) {\r\n        case '2':\r\n            get_next_consecutive(frm, level, function(next_num) {\r\n                final_batch_code = base_batch_code + `-${next_num}`;\r\n                set_final_batch_values(frm, final_batch_code, level, next_num, batch_name);\r\n            });\r\n            break;\r\n            \r\n        case '3':\r\n            get_next_consecutive(frm, level, function(next_num) {\r\n                final_batch_code = base_batch_code + `-${next_num.toString().padStart(3, '0')}`;\r\n                set_final_batch_values(frm, final_batch_code, level, next_num, batch_name);\r\n            });\r\n            break;\r\n            \r\n        case '4':\r\n            get_next_consecutive(frm, level, function(next_num) {\r\n                final_batch_code = base_batch_code + `-P${next_num.toString().padStart(3, '0')}`;\r\n                set_final_batch_values(frm, final_batch_code, level, next_num, batch_name);\r\n            });\r\n            break;\r\n            \r\n        default: // Level 1\r\n            set_final_batch_values(frm, base_batch_code, '1', parseInt(consecutive), batch_name);\r\n    }\r\n}\r\n\r\n// Get next consecutive number for child batches\r\nfunction get_next_consecutive(frm, level, callback) {\r\n    let filters = {\r\n        'work_order_ref': frm.doc.work_order_ref,\r\n        'custom_batch_level': level\r\n    };\r\n    \r\n    if (frm.doc.parent_batch_amb) {\r\n        filters['parent_batch_amb'] = frm.doc.parent_batch_amb;\r\n    }\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            filters: filters,\r\n            fields: ['consecutive_number'],\r\n            order_by: 'consecutive_number desc',\r\n            limit: 1\r\n        },\r\n        callback: function(r) {\r\n            let next_num = 1;\r\n            if (r.message && r.message.length > 0) {\r\n                next_num = (r.message[0].consecutive_number || 0) + 1;\r\n            }\r\n            console.log('Next consecutive for level', level, ':', next_num);\r\n            callback(next_num);\r\n        }\r\n    });\r\n}\r\n\r\n// Set final batch values after generation\r\nfunction set_final_batch_values(frm, batch_code, level, consecutive_num, batch_name) {\r\n    frm.set_value('custom_generated_batch_name', batch_code);\r\n    frm.set_value('title', batch_code);\r\n    frm.set_value('custom_batch_level', level);\r\n    frm.set_value('consecutive_number', consecutive_num);\r\n    frm.set_value('name', batch_name); // Set the name from API\r\n    \r\n    // Set is_group based on level\r\n    if (level === '1' || level === '2') {\r\n        frm.set_value('is_group', 1);\r\n    } else {\r\n        frm.set_value('is_group', 0);\r\n    }\r\n    \r\n    console.log('Final batch code generated:', batch_code);\r\n    frappe.show_alert(__('Batch code generated: ') + batch_code);\r\n    \r\n    // Refresh the form to show all values\r\n    frm.refresh();\r\n}\r\n\r\n// Validate batch code uniqueness\r\nfunction validate_batch_uniqueness(frm) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            filters: {\r\n                'custom_generated_batch_name': frm.doc.custom_generated_batch_name,\r\n                'name': ['!=', frm.doc.name || '']\r\n            },\r\n            limit: 1\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                frappe.msgprint(__('Batch code already exists: ') + frm.doc.custom_generated_batch_name);\r\n                frm.set_value('custom_generated_batch_name', '');\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Force form view if we're stuck in tree view\r\nif (window.location.href.includes('/tree/')) {\r\n    console.log('Redirecting from tree view to form view');\r\n    window.location.href = window.location.href.replace('/tree/', '/list/');\r\n}\r\n\r\n// Ensure save buttons are always visible\r\n$(document).on('click', function() {\r\n    let primary_btn = $('.btn-primary').filter(':visible');\r\n    let secondary_btn = $('.btn-secondary').filter(':visible');\r\n    \r\n    if (primary_btn.length === 0 || secondary_btn.length === 0) {\r\n        $('.btn-primary').show();\r\n        $('.btn-secondary').show();\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch AMB",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.884073",
  "module": "amb_w_tds",
  "name": "Batch L2",
  "script": "// Enhanced Batch AMB Client Script - Container & Barrel Weight Management\r\n// Supports Level 3 containers, Level 4 scanning, and P-INV/P-VTA Work Orders\r\n\r\nfrappe.ui.form.on('Batch AMB', {\r\n    onload: function(frm) {\r\n        if (frm.is_new()) {\r\n            frm.set_value('custom_batch_level', '1');\r\n            frm.set_value('is_group', 1);\r\n        }\r\n        if (frm.doc.custom_batch_level == '3') {\r\n            initialize_barrel_management(frm);\r\n        }\r\n    },\r\n\r\n    refresh: function(frm) {\r\n        if (should_auto_generate(frm)) {\r\n            generate_batch_code(frm);\r\n        }\r\n        add_level_specific_buttons(frm);\r\n        if (frm.doc.custom_batch_level == '3') {\r\n            update_weight_totals(frm);\r\n        }\r\n    },\r\n    \r\n    after_save: function(frm) {\r\n        // Refresh the form to get the latest values from the server\r\n        frm.refresh();\r\n    },\r\n\r\n    work_order_ref: function(frm) {\r\n        if (frm.doc.work_order_ref) {\r\n            fetch_work_order_data(frm);\r\n        }\r\n    },\r\n\r\n    custom_batch_level: function(frm) {\r\n        if (!frm.is_new()) {\r\n            frappe.msgprint('Cannot change batch level of existing documents. Create a new document for different levels.');\r\n            frm.set_value('custom_batch_level', frm.doc.__original_level || '1');\r\n            return;\r\n        }\r\n        configure_level_settings(frm);\r\n        if (should_auto_generate(frm)) {\r\n            generate_batch_code(frm);\r\n        }\r\n    },\r\n\r\n    parent_batch_amb: function(frm) {\r\n        if (frm.doc.parent_batch_amb === frm.doc.name) {\r\n            frappe.msgprint('A batch cannot be its own parent');\r\n            frm.set_value('parent_batch_amb', '');\r\n            return;\r\n        }\r\n        if (frm.doc.parent_batch_amb && should_auto_generate(frm)) {\r\n            generate_batch_code(frm);\r\n        }\r\n    },\r\n\r\n    quick_barcode_scan: function(frm) {\r\n        if (frm.doc.quick_barcode_scan && frm.doc.custom_batch_level == '3') {\r\n            process_quick_barcode_scan(frm);\r\n        }\r\n    },\r\n\r\n    default_packaging_type: function(frm) {\r\n        if (frm.doc.default_packaging_type) {\r\n            fetch_default_tara_weight(frm);\r\n        }\r\n    },\r\n\r\n    before_save: function(frm) {\r\n        if (frm.doc.parent_batch_amb === frm.doc.name) {\r\n            frappe.throw('A batch cannot be its own parent');\r\n            return false;\r\n        }\r\n        if (parseInt(frm.doc.custom_batch_level || '0', 10) > 1 && !frm.doc.parent_batch_amb) {\r\n            frappe.throw('Parent Batch AMB is required for level ' + frm.doc.custom_batch_level);\r\n            return false;\r\n        }\r\n        if (!frm.doc.__original_level) {\r\n            frm.doc.__original_level = frm.doc.custom_batch_level;\r\n        }\r\n        if (frm.doc.custom_batch_level == '3') {\r\n            validate_barrel_data(frm);\r\n        }\r\n        return true;\r\n    }\r\n});\r\n\r\n// Child Table events\r\nfrappe.ui.form.on('Container Barrels', {\r\n    container_barrels_add: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        if (frm.doc.default_packaging_type) {\r\n            frappe.model.set_value(cdt, cdn, 'packaging_type', frm.doc.default_packaging_type);\r\n        }\r\n        generate_barrel_serial_number(frm, row);\r\n    },\r\n\r\n    barcode_scan_input: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        if (row.barcode_scan_input) {\r\n            process_barcode_scan(frm, cdt, cdn, row.barcode_scan_input);\r\n        }\r\n    },\r\n\r\n    packaging_type: function(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        if (row.packaging_type) {\r\n            fetch_tara_weight_for_row(frm, cdt, cdn);\r\n        }\r\n    },\r\n\r\n    gross_weight: function(frm, cdt, cdn) {\r\n        calculate_net_weight(frm, cdt, cdn);\r\n        update_weight_totals(frm);\r\n    },\r\n\r\n    tara_weight: function(frm, cdt, cdn) {\r\n        calculate_net_weight(frm, cdt, cdn);\r\n        update_weight_totals(frm);\r\n    },\r\n\r\n    container_barrels_remove: function(frm) {\r\n        update_weight_totals(frm);\r\n    }\r\n});\r\n\r\n// Level settings and UI\r\nfunction configure_level_settings(frm) {\r\n    const level = frm.doc.custom_batch_level;\r\n    switch(level) {\r\n        case '1':\r\n            frm.set_value('parent_batch_amb', '');\r\n            frm.set_value('is_group', 1);\r\n            break;\r\n        case '2':\r\n            frm.set_value('is_group', 1);\r\n            break;\r\n        case '3':\r\n            frm.set_value('is_group', 1);\r\n            initialize_barrel_management(frm);\r\n            break;\r\n        case '4':\r\n            frm.set_value('is_group', 0);\r\n            break;\r\n        default:\r\n            frm.set_value('is_group', 0);\r\n    }\r\n}\r\n\r\nfunction add_level_specific_buttons(frm) {\r\n    frm.custom_buttons = {};\r\n    if (frm.is_new()) return;\r\n\r\n    switch(frm.doc.custom_batch_level) {\r\n        case '1':\r\n            frm.add_custom_button(__('Create Sublot'), function() {\r\n                create_sublot_batch(frm);\r\n            });\r\n            break;\r\n        case '2':\r\n            frm.add_custom_button(__('Create Container'), function() {\r\n                create_container_batch(frm);\r\n            });\r\n            break;\r\n        case '3':\r\n            frm.add_custom_button(__('Scan Multiple Barcodes'), function() {\r\n                open_bulk_scan_dialog(frm);\r\n            });\r\n            frm.add_custom_button(__('Generate Barrel Serials'), function() {\r\n                generate_bulk_barrel_serials(frm);\r\n            });\r\n            frm.add_custom_button(__('Validate All Weights'), function() {\r\n                validate_all_barrel_weights(frm);\r\n            });\r\n            break;\r\n    }\r\n}\r\n\r\n// Barrel management\r\nfunction initialize_barrel_management(frm) {\r\n    setTimeout(function() {\r\n        update_weight_totals(frm);\r\n    }, 500);\r\n}\r\n\r\nfunction process_quick_barcode_scan(frm) {\r\n    const barcode = frm.doc.quick_barcode_scan;\r\n    if (!validate_code39_format(barcode)) {\r\n        frappe.msgprint('Invalid CODE-39 barcode format');\r\n        frm.set_value('quick_barcode_scan', '');\r\n        return;\r\n    }\r\n    if (frm.doc.custom_batch_level == '3') {\r\n            calculate_container_totals(frm);\r\n    }\r\n    if (check_duplicate_serial(frm, barcode)) {\r\n        frappe.msgprint('Barrel serial number already exists: ' + barcode);\r\n        frm.set_value('quick_barcode_scan', '');\r\n        return;\r\n    }\r\n    const row = frm.add_child('container_barrels');\r\n    row.barrel_serial_number = barcode;\r\n    row.packaging_type = frm.doc.default_packaging_type;\r\n    row.scan_timestamp = frappe.datetime.now_datetime();\r\n    if (row.packaging_type) {\r\n        fetch_tara_weight_for_row(frm, row.doctype, row.name);\r\n    }\r\n    frm.refresh_field('container_barrels');\r\n    frm.set_value('quick_barcode_scan', '');\r\n    setTimeout(function() { frm.scroll_to_field('container_barrels'); }, 300);\r\n}\r\n\r\nfunction process_barcode_scan(frm, cdt, cdn, barcode) {\r\n    const row = locals[cdt][cdn];\r\n    if (!validate_code39_format(barcode)) {\r\n        frappe.msgprint('Invalid CODE-39 barcode format');\r\n        frappe.model.set_value(cdt, cdn, 'barcode_scan_input', '');\r\n        return;\r\n    }\r\n    frappe.model.set_value(cdt, cdn, 'barrel_serial_number', barcode);\r\n    frappe.model.set_value(cdt, cdn, 'scan_timestamp', frappe.datetime.now_datetime());\r\n    frappe.model.set_value(cdt, cdn, 'barcode_scan_input', '');\r\n    if (row.packaging_type) {\r\n        fetch_tara_weight_for_row(frm, cdt, cdn);\r\n    }\r\n}\r\n\r\nfunction generate_barrel_serial_number(frm, row) {\r\n    const container_code = frm.doc.title || frm.doc.custom_generated_batch_name;\r\n    if (!container_code) return;\r\n\r\n    let max_seq = 0;\r\n    (frm.doc.container_barrels || []).forEach(barrel => {\r\n        if (barrel.barrel_serial_number && barrel.barrel_serial_number.startsWith(container_code)) {\r\n            const match = barrel.barrel_serial_number.match(/-([0-9]+)$/);\r\n            if (match) {\r\n                max_seq = Math.max(max_seq, parseInt(match[1], 10));\r\n            }\r\n        }\r\n    });\r\n\r\n    const next_seq = (max_seq + 1).toString().padStart(3, '0');\r\n    row.barrel_serial_number = `${container_code}-${next_seq}`;\r\n}\r\n\r\nfunction fetch_tara_weight_for_row(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    if (!row.packaging_type) return;\r\n\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Item',\r\n            name: row.packaging_type\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.weight_per_unit) {\r\n                frappe.model.set_value(cdt, cdn, 'tara_weight', r.message.weight_per_unit);\r\n                calculate_net_weight(frm, cdt, cdn);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction calculate_net_weight(frm, cdt, cdn) {\r\n    const row = locals[cdt][cdn];\r\n    if (row.gross_weight && row.tara_weight) {\r\n        const net_weight = row.gross_weight - row.tara_weight;\r\n        frappe.model.set_value(cdt, cdn, 'net_weight', net_weight);\r\n        frappe.model.set_value(cdt, cdn, 'weight_validated', net_weight > 0 && net_weight < row.gross_weight ? 1 : 0);\r\n    }\r\n}\r\n\r\nfunction update_weight_totals(frm) {\r\n    if (frm.doc.custom_batch_level != '3' || !frm.doc.container_barrels) return;\r\n\r\n    let total_gross = 0, total_tara = 0, total_net = 0, barrel_count = 0;\r\n    frm.doc.container_barrels.forEach(row => {\r\n        if (row.gross_weight) total_gross += row.gross_weight;\r\n        if (row.tara_weight) total_tara += row.tara_weight;\r\n        if (row.net_weight) total_net += row.net_weight;\r\n        if (row.barrel_serial_number) barrel_count += 1;\r\n    });\r\n    frm.set_value('total_gross_weight', total_gross);\r\n    frm.set_value('total_tara_weight', total_tara);\r\n    frm.set_value('total_net_weight', total_net);\r\n    frm.set_value('barrel_count', barrel_count);\r\n}\r\n\r\n// Validation helpers\r\nfunction validate_code39_format(barcode) {\r\n    const s = String(barcode || '').toUpperCase();\r\n    // Allowed: A-Z 0-9 and - . space $ / + % *\r\n    return /^[A-Z0-9\\-\\.\\s$\\/+%*]+$/.test(s);\r\n}\r\n\r\nfunction check_duplicate_serial(frm, serial) {\r\n    if (!frm.doc.container_barrels) return false;\r\n    return frm.doc.container_barrels.some(row => row.barrel_serial_number === serial);\r\n}\r\n\r\nfunction validate_barrel_data(frm) {\r\n    if (!frm.doc.container_barrels) return true;\r\n    let has_errors = false;\r\n\r\n    frm.doc.container_barrels.forEach((row, index) => {\r\n        if (row.barrel_serial_number && !row.gross_weight) {\r\n            frappe.msgprint(`Row ${index + 1}: Gross weight is required for barrel ${row.barrel_serial_number}`);\r\n            has_errors = true;\r\n        }\r\n        if (row.gross_weight && row.tara_weight && row.net_weight <= 0) {\r\n            frappe.msgprint(`Row ${index + 1}: Net weight cannot be zero or negative for barrel ${row.barrel_serial_number}`);\r\n            has_errors = true;\r\n        }\r\n    });\r\n\r\n    if (has_errors) {\r\n        frappe.throw('Please fix barrel weight validation errors before saving.');\r\n    }\r\n    return true;\r\n}\r\n\r\n// Bulk ops\r\nfunction open_bulk_scan_dialog(frm) {\r\n    const dialog = new frappe.ui.Dialog({\r\n        title: 'Bulk Barcode Scanning',\r\n        fields: [\r\n            { fieldtype: 'Small Text', fieldname: 'barcode_list', label: 'Scan Multiple Barcodes (one per line)', description: 'Scan or paste CODE-39 barcodes, one per line' },\r\n            { fieldtype: 'Link', fieldname: 'bulk_packaging_type', label: 'Default Packaging Type', options: 'Item', reqd: 1 }\r\n        ],\r\n        primary_action_label: 'Add Barrels',\r\n        primary_action: function(values) {\r\n            process_bulk_barcodes(frm, values.barcode_list, values.bulk_packaging_type);\r\n            dialog.hide();\r\n        }\r\n    });\r\n    if (frm.doc.default_packaging_type) {\r\n        dialog.set_value('bulk_packaging_type', frm.doc.default_packaging_type);\r\n    }\r\n    dialog.show();\r\n}\r\n\r\nfunction process_bulk_barcodes(frm, barcode_text, packaging_type) {\r\n    const barcodes = barcode_text.split('\\n').filter(b => b.trim());\r\n    let added_count = 0;\r\n\r\n    barcodes.forEach(b => {\r\n        const barcode = b.trim();\r\n        if (!validate_code39_format(barcode)) {\r\n            frappe.msgprint(`Invalid barcode format: ${barcode}`);\r\n            return;\r\n        }\r\n        if (check_duplicate_serial(frm, barcode)) {\r\n            frappe.msgprint(`Duplicate barcode: ${barcode}`);\r\n            return;\r\n        }\r\n        const row = frm.add_child('container_barrels');\r\n        row.barrel_serial_number = barcode;\r\n        row.packaging_type = packaging_type;\r\n        row.scan_timestamp = frappe.datetime.now_datetime();\r\n        added_count += 1;\r\n    });\r\n\r\n    frm.refresh_field('container_barrels');\r\n    if (added_count > 0) {\r\n        frappe.msgprint(`Added ${added_count} barrels successfully`);\r\n        fetch_tara_weights_for_all_rows(frm, packaging_type);\r\n    }\r\n}\r\n\r\nfunction fetch_tara_weights_for_all_rows(frm, packaging_type) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: { doctype: 'Item', name: packaging_type },\r\n        callback: function(r) {\r\n            if (r.message && r.message.weight_per_unit) {\r\n                const tara_weight = r.message.weight_per_unit;\r\n                (frm.doc.container_barrels || []).forEach(row => {\r\n                    if (row.packaging_type === packaging_type && !row.tara_weight) {\r\n                        frappe.model.set_value('Container Barrels', row.name, 'tara_weight', tara_weight);\r\n                    }\r\n                });\r\n                frm.refresh_field('container_barrels');\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction generate_bulk_barrel_serials(frm) {\r\n    const dialog = new frappe.ui.Dialog({\r\n        title: 'Generate Barrel Serial Numbers',\r\n        fields: [\r\n            { fieldtype: 'Int', fieldname: 'barrel_count', label: 'Number of Barrels', reqd: 1, default: 20 },\r\n            { fieldtype: 'Link', fieldname: 'bulk_packaging_type', label: 'Packaging Type', options: 'Item', reqd: 1 }\r\n        ],\r\n        primary_action_label: 'Generate Serials',\r\n        primary_action: function(values) {\r\n            generate_sequential_serials(frm, values.barrel_count, values.bulk_packaging_type);\r\n            dialog.hide();\r\n        }\r\n    });\r\n    if (frm.doc.default_packaging_type) {\r\n        dialog.set_value('bulk_packaging_type', frm.doc.default_packaging_type);\r\n    }\r\n    dialog.show();\r\n}\r\n\r\nfunction generate_sequential_serials(frm, count, packaging_type) {\r\n    const container_code = frm.doc.title || frm.doc.custom_generated_batch_name;\r\n    if (!container_code) {\r\n        frappe.msgprint('Container code not available. Please save the container first.');\r\n        return;\r\n    }\r\n    let max_seq = 0;\r\n    (frm.doc.container_barrels || []).forEach(barrel => {\r\n        if (barrel.barrel_serial_number && barrel.barrel_serial_number.startsWith(container_code)) {\r\n            const match = barrel.barrel_serial_number.match(/-([0-9]+)$/);\r\n            if (match) {\r\n                max_seq = Math.max(max_seq, parseInt(match[1], 10));\r\n            }\r\n        }\r\n    });\r\n    for (let i = 1; i <= count; i++) {\r\n        const serial_num = (max_seq + i).toString().padStart(3, '0');\r\n        const serial = `${container_code}-${serial_num}`;\r\n        const row = frm.add_child('container_barrels');\r\n        row.barrel_serial_number = serial;\r\n        row.packaging_type = packaging_type;\r\n    }\r\n    frm.refresh_field('container_barrels');\r\n    frappe.msgprint(`Generated ${count} barrel serial numbers`);\r\n    fetch_tara_weights_for_all_rows(frm, packaging_type);\r\n}\r\n\r\nfunction validate_all_barrel_weights(frm) {\r\n    if (!frm.doc.container_barrels) {\r\n        frappe.msgprint('No barrels to validate');\r\n        return;\r\n    }\r\n    let validated_count = 0, error_count = 0;\r\n    frm.doc.container_barrels.forEach(row => {\r\n        if (row.gross_weight && row.tara_weight && row.net_weight > 0) {\r\n            frappe.model.set_value('Container Barrels', row.name, 'weight_validated', 1);\r\n            validated_count += 1;\r\n        } else {\r\n            error_count += 1;\r\n        }\r\n    });\r\n    frm.refresh_field('container_barrels');\r\n    frappe.msgprint(`Validation complete: ${validated_count} valid, ${error_count} with errors`);\r\n}\r\n\r\n// Create children by level\r\nfunction create_sublot_batch(parent_frm) {\r\n    frappe.new_doc('Batch AMB', {\r\n        'custom_batch_level': '2',\r\n        'parent_batch_amb': parent_frm.doc.name,\r\n        'work_order_ref': parent_frm.doc.work_order_ref,\r\n        'sales_order_related': parent_frm.doc.sales_order_related,\r\n        'production_plant_name': parent_frm.doc.production_plant_name,\r\n        'custom_batch_year': parent_frm.doc.custom_batch_year,\r\n        'custom_plant_code': parent_frm.doc.custom_plant_code,\r\n        'tds_info': parent_frm.doc.tds_info,\r\n        'wo_item_name': parent_frm.doc.wo_item_name,\r\n        'item_to_manufacture': parent_frm.doc.item_to_manufacture,\r\n        'tds_item_name': parent_frm.doc.tds_item_name,\r\n        'is_group': 1\r\n    });\r\n}\r\nfunction create_container_batch(parent_frm) {\r\n    frappe.new_doc('Batch AMB', {\r\n        'custom_batch_level': '3',\r\n        'parent_batch_amb': parent_frm.doc.name,\r\n        'work_order_ref': parent_frm.doc.work_order_ref,\r\n        'sales_order_related': parent_frm.doc.sales_order_related,\r\n        'production_plant_name': parent_frm.doc.production_plant_name,\r\n        'custom_batch_year': parent_frm.doc.custom_batch_year,\r\n        'custom_plant_code': parent_frm.doc.custom_plant_code,\r\n        'tds_info': parent_frm.doc.tds_info,\r\n        'wo_item_name': parent_frm.doc.wo_item_name,\r\n        'item_to_manufacture': parent_frm.doc.item_to_manufacture,\r\n        'tds_item_name': parent_frm.doc.tds_item_name,\r\n        'is_group': 1\r\n    });\r\n}\r\n\r\n// Data fetching and generation\r\nfunction fetch_work_order_data(frm) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: { doctype: 'Work Order', name: frm.doc.work_order_ref },\r\n        callback: function(r) {\r\n            if (!r.message) return;\r\n            const wo = r.message;\r\n            frm.set_value('sales_order_related', wo.sales_order);\r\n            frm.set_value('wo_item_name', wo.item_name);\r\n            frm.set_value('item_to_manufacture', wo.production_item);\r\n            fetch_sales_order_data(frm, wo.sales_order);\r\n            fetch_item_data(frm, wo.production_item);\r\n            if (should_auto_generate(frm)) {\r\n                setTimeout(function() { generate_batch_code(frm); }, 300);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction fetch_sales_order_data(frm, sales_order) {\r\n    if (!sales_order) return;\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: { doctype: 'Sales Order', name: sales_order },\r\n        callback: function(r) {}\r\n    });\r\n}\r\n\r\nfunction fetch_item_data(frm, item_code) {\r\n    if (!item_code) return;\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: { doctype: 'Item', name: item_code },\r\n        callback: function(r) {\r\n            if (!r.message) return;\r\n            const item = r.message;\r\n            frm.set_value('tds_info', item.item_name);\r\n            frm.set_value('tds_item_name', item.item_name);\r\n        }\r\n    });\r\n}\r\n\r\nfunction fetch_default_tara_weight(frm) {\r\n    if (!frm.doc.default_packaging_type) return;\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: { doctype: 'Item', name: frm.doc.default_packaging_type },\r\n        callback: function(r) {\r\n            if (r.message && r.message.weight_per_unit) {\r\n                frappe.msgprint(`Default tara weight: ${r.message.weight_per_unit} kg`);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction should_auto_generate(frm) {\r\n    const has_reference = !!frm.doc.work_order_ref;\r\n    const has_level = !!frm.doc.custom_batch_level;\r\n    const has_plant_code = !!frm.doc.custom_plant_code;\r\n    const has_plant_name = !!frm.doc.production_plant_name;\r\n    const ok = has_reference && has_level && (has_plant_code || has_plant_name);\r\n    if (ok) console.log('Auto-generate conditions met');\r\n    return ok;\r\n}\r\n\r\nfunction generate_batch_code(frm) {\r\n    const level = parseInt(frm.doc.custom_batch_level, 10) || 1;\r\n    if (level === 1) {\r\n        generate_level_1_batch_code(frm);\r\n    } else {\r\n        generate_sublot_batch_code(frm, level);\r\n    }\r\n}\r\n\r\nfunction generate_level_1_batch_code(frm) {\r\n    get_base_components(frm, function(components) {\r\n        const consecutive = components.consecutive.toString().padStart(5, '0');\r\n        const plant_code = String(components.plant_code);\r\n        let final_batch_code;\r\n        if (components.series_type === 'P') {\r\n            // P-INV/P-VTA-00001-<plant>\r\n            final_batch_code = `${components.product_code}-${consecutive}-${plant_code}`;\r\n        } else {\r\n            // Standard: PRODUCT(4)+CONSEC(5)+PLANT\r\n            final_batch_code = `${components.product_code}${consecutive}${plant_code}`;\r\n        }\r\n        frm.set_value('title', final_batch_code);\r\n        frm.set_value('custom_generated_batch_name', final_batch_code);\r\n        frm.set_value('custom_consecutive_number', consecutive);\r\n        frm.set_value('custom_plant_code', plant_code);\r\n        frm.refresh_field('title');\r\n        frm.refresh_field('custom_generated_batch_name');\r\n    });\r\n}\r\n\r\nfunction generate_sublot_batch_code(frm, level) {\r\n    if (!frm.doc.parent_batch_amb) return;\r\n    if (frm.doc.parent_batch_amb === frm.doc.name) {\r\n        frappe.msgprint('A batch cannot be its own parent');\r\n        frm.set_value('parent_batch_amb', '');\r\n        return;\r\n    }\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: { doctype: 'Batch AMB', name: frm.doc.parent_batch_amb },\r\n        callback: function(r) {\r\n            if (!r.message) { frappe.msgprint('Could not fetch parent batch information'); return; }\r\n            const parent_batch = r.message;\r\n            const parent_batch_code = parent_batch.title || parent_batch.custom_generated_batch_name;\r\n            if (!parent_batch_code) { frappe.msgprint('Parent batch does not have a valid batch code'); return; }\r\n\r\n            get_next_sublot_consecutive(frm, parent_batch_code, function(next_consecutive) {\r\n                let final_batch_code;\r\n                if (level == 3) {\r\n                    final_batch_code = `${parent_batch_code}-C${next_consecutive}`;\r\n                } else {\r\n                    final_batch_code = `${parent_batch_code}-${next_consecutive}`;\r\n                }\r\n                frm.set_value('title', final_batch_code);\r\n                frm.set_value('custom_generated_batch_name', final_batch_code);\r\n                frm.set_value('custom_sublot_consecutive', parseInt(next_consecutive, 10));\r\n                frm.refresh_field('title');\r\n                frm.refresh_field('custom_generated_batch_name');\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction get_base_components(frm, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: { doctype: 'Work Order', name: frm.doc.work_order_ref },\r\n        callback: function(r) {\r\n            if (!r.message) {\r\n                return callback({\r\n                    product_code: '0000',\r\n                    consecutive: 1,\r\n                    plant_code: derive_plant_code(frm),\r\n                    source: 'fallback',\r\n                    series_type: 'WO'\r\n                });\r\n            }\r\n            const wo = r.message;\r\n            const naming = String(wo.naming_series || wo.name || '').toUpperCase();\r\n            const isPInv = /^P-INV/.test(naming);\r\n            const isPVta = /^P-VTA/.test(naming);\r\n\r\n            let series_type = 'WO';\r\n            let product_code = '';\r\n            if (isPInv || isPVta) {\r\n                series_type = 'P';\r\n                const m = naming.match(/^(P-(?:INV|VTA))/);\r\n                product_code = m ? m[1] : 'P';\r\n            } else {\r\n                if (wo.production_item) {\r\n                    const m = String(wo.production_item).match(/^(\\d{4})/);\r\n                    product_code = m ? m[1] : '0000';\r\n                } else {\r\n                    product_code = '0000';\r\n                }\r\n            }\r\n\r\n            let consecutive = 1;\r\n            const wm = String(wo.name || '').match(/(\\d+)$/);\r\n            if (wm) consecutive = parseInt(wm[1], 10);\r\n\r\n            const plant_code = derive_plant_code(frm);\r\n            callback({ product_code, consecutive, plant_code, source: 'work_order', series_type });\r\n        }\r\n    });\r\n}\r\n\r\nfunction derive_plant_code(frm) {\r\n    const cp = parseInt(frm.doc.custom_plant_code, 10);\r\n    if (!isNaN(cp) && cp > 0) return cp;\r\n    const m = String(frm.doc.production_plant_name || '').match(/^(\\d+)/);\r\n    return m ? parseInt(m[1], 10) : 1;\r\n}\r\n\r\nfunction calculate_container_totals(frm) {\r\n    let total_gross = 0;\r\n    let total_tara = 0;\r\n    let total_net = 0;\r\n    let barrel_count = 0;\r\n    \r\n    (frm.doc.container_barrels || []).forEach(function(barrel) {\r\n        if (barrel.gross_weight) {\r\n            total_gross += parseFloat(barrel.gross_weight);\r\n        }\r\n        if (barrel.tara_weight) {\r\n            total_tara += parseFloat(barrel.tara_weight);\r\n        }\r\n        if (barrel.net_weight) {\r\n            total_net += parseFloat(barrel.net_weight);\r\n        }\r\n        if (barrel.barrel_serial_number && barrel.barrel_serial_number.trim()) {\r\n            barrel_count += 1;\r\n        }\r\n    });\r\n    \r\n    frm.set_value('total_gross_weight', total_gross);\r\n    frm.set_value('total_tara_weight', total_tara);\r\n    frm.set_value('total_net_weight', total_net);\r\n    frm.set_value('barrel_count', barrel_count);\r\n}\r\n\r\nfunction get_next_sublot_consecutive(frm, parent_batch_code, callback) {\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            filters: { 'parent_batch_amb': frm.doc.parent_batch_amb, 'name': ['!=', frm.doc.name || ''] },\r\n            fields: ['name', 'title', 'custom_generated_batch_name'],\r\n            limit_page_length: 100\r\n        },\r\n        callback: function(r) {\r\n            let next_consecutive = 1;\r\n            if (r.message && r.message.length > 0) {\r\n                const existing_consecutives = [];\r\n                const parentEsc = parent_batch_code.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n                const patterns = [ new RegExp(`^${parentEsc}-(\\\\d+)$`), new RegExp(`^${parentEsc}-C(\\\\d+)$`) ];\r\n                r.message.forEach(function(batch) {\r\n                    const batch_name = batch.title || batch.custom_generated_batch_name || '';\r\n                    patterns.forEach(pattern => {\r\n                        const match = batch_name.match(pattern);\r\n                        if (match) existing_consecutives.push(parseInt(match[1], 10));\r\n                    });\r\n                });\r\n                if (existing_consecutives.length > 0) next_consecutive = Math.max(...existing_consecutives) + 1;\r\n            }\r\n            callback(next_consecutive);\r\n        }\r\n    });\r\n}\r\n\r\nconsole.log('Enhanced Batch AMB client script loaded');",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TDS Product Specification",
  "enabled": 1,
  "modified": "2025-10-24 11:52:39.213910",
  "module": "amb_w_tds",
  "name": "TDS Version",
  "script": "frappe.ui.form.on('TDS Product Specification', {\r\n    setup: function(frm) {\r\n        if (frm.doc.__islocal && !frm.doc.tds_sequence) {\r\n            get_next_sequence(frm);\r\n        }\r\n    },\r\n    \r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Generate Version'), function() {\r\n            generate_version(frm);\r\n        }, __('Actions')).addClass('btn-primary');\r\n        \r\n        update_preview(frm);\r\n    },\r\n    \r\n    product_item: function(frm) {\r\n        if (frm.doc.product_item) {\r\n            frappe.db.get_value('Item', frm.doc.product_item, 'item_code')\r\n                .then(r => {\r\n                    frm.set_value('item_code', r.message.item_code);\r\n                    if (frm.doc.__islocal) get_next_sequence(frm);\r\n                    update_preview(frm);\r\n                });\r\n        }\r\n    }\r\n});\r\n\r\n// Get next sequence number from TDS Settings\r\nfunction get_next_sequence(frm) {\r\n    if (!frm.doc.item_code) return;\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'TDS Settings',\r\n            filters: { item_code: frm.doc.item_code },\r\n            fields: ['name', 'last_sequence_used']\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                // Existing record found\r\n                const settings = r.message[0];\r\n                const next_seq = (settings.last_sequence_used || 0) + 1;\r\n                frm.set_value('tds_sequence', next_seq);\r\n                update_sequence_in_settings(settings.name, next_seq);\r\n            } else {\r\n                // Create new TDS Settings record\r\n                frappe.call({\r\n                    method: 'frappe.client.insert',\r\n                    args: {\r\n                        doc: {\r\n                            doctype: 'TDS Settings',\r\n                            item_code: frm.doc.item_code,\r\n                            last_sequence_used: 0\r\n                        }\r\n                    },\r\n                    callback: function(r) {\r\n                        frm.set_value('tds_sequence', 1);\r\n                        update_sequence_in_settings(r.message.name, 1);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Update sequence in TDS Settings\r\nfunction update_sequence_in_settings(name, sequence) {\r\n    frappe.call({\r\n        method: 'frappe.client.set_value',\r\n        args: {\r\n            doctype: 'TDS Settings',\r\n            name: name,\r\n            fieldname: { last_sequence_used: sequence }\r\n        }\r\n    });\r\n}\r\n\r\n// Generate final version number\r\nfunction generate_version(frm) {\r\n    if (!validate_required_fields(frm)) return;\r\n    \r\n    const date_parts = frm.doc.approval_date.split('-');\r\n    const version = `V1.${frm.doc.item_code}-Date:${date_parts[0].slice(-2)}/${date_parts[1]}/${date_parts[2]}*${String(frm.doc.tds_sequence).padStart(4, '0')}`;\r\n    \r\n    frm.set_value('tds_version', version);\r\n    frappe.show_alert(__('Version generated successfully'));\r\n}\r\n\r\n// Validate required fields\r\nfunction validate_required_fields(frm) {\r\n    let valid = true;\r\n    \r\n    if (!frm.doc.item_code) {\r\n        frappe.msgprint(__('Item Code is required'));\r\n        valid = false;\r\n    }\r\n    if (!frm.doc.approval_date) {\r\n        frappe.msgprint(__('Approval Date is required'));\r\n        valid = false;\r\n    }\r\n    if (!frm.doc.tds_sequence) {\r\n        frappe.msgprint(__('Sequence Number is required'));\r\n        valid = false;\r\n    }\r\n    \r\n    return valid;\r\n}\r\n\r\n// Update version preview\r\nfunction update_preview(frm) {\r\n    if (frm.doc.item_code && frm.doc.approval_date && frm.doc.tds_sequence) {\r\n        const date_parts = frm.doc.approval_date.split('-');\r\n        const preview = `Preview: V1.${frm.doc.item_code}-Date:${date_parts[0].slice(-2)}/${date_parts[1]}/${date_parts[2]}*${String(frm.doc.tds_sequence).padStart(4, '0')}`;\r\n        \r\n        if (!frm.fields_dict.version_preview) {\r\n            frm.add_custom_field('version_preview', {\r\n                fieldtype: 'Section Break',\r\n                label: 'Version Preview',\r\n                description: preview\r\n            });\r\n        } else {\r\n            frm.set_df_property('version_preview', 'description', preview);\r\n        }\r\n    }\r\n}\r\nfrappe.ui.form.on('TDS Product Specification', {\r\n    before_workflow_action: function(frm) {\r\n        if (frm.selected_workflow_action === 'Approve' && !frm.doc.approval_date) {\r\n            frappe.call({\r\n                method: 'frappe.utils.nowdate',\r\n                callback: function(r) {\r\n                    frm.set_value('approval_date', r.message);\r\n                }\r\n            });\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TDS Product Specification",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.286730",
  "module": "amb_w_tds",
  "name": "Get Product Code",
  "script": "frappe.ui.form.on('TDS Product Specification', {\r\n    item: function(frm) {\r\n        if (!frm.doc.item) {\r\n            frm.set_value('product_code', null);\r\n            return;\r\n        }\r\n        \r\n        frappe.call({\r\n            method: 'frappe.client.get_value',\r\n            args: {\r\n                'doctype': 'Item',\r\n                'filters': {'name': frm.doc.item},\r\n                'fieldname': ['product_code', 'item_code']  // Try multiple fields\r\n            },\r\n            callback: function(r) {\r\n                let product_code = r.message.product_code || \r\n                                  r.message.item_code || \r\n                                  frm.doc.item.substring(0,4);  // Fallback\r\n                frm.set_value('product_code', product_code);\r\n                \r\n                // If version depends on this, trigger update\r\n                if (frm.doc.custom_version) {\r\n                    frm.trigger('refresh');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TDS Settings",
  "enabled": 1,
  "modified": "2025-10-24 11:52:39.268577",
  "module": "amb_w_tds",
  "name": "TDS Settings Version Control",
  "script": "frappe.ui.form.on('TDS Settings', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Generate Version'), function() {\r\n            // Validate required fields exist\r\n            if (!frm.doc.naming_series) {\r\n                frappe.msgprint(__('Naming Series is required'));\r\n                return;\r\n            }\r\n            if (!frm.doc.tds_version_counter) {\r\n                frappe.msgprint(__('Version Counter is required'));\r\n                return;\r\n            }\r\n            if (!frm.doc.item_code) {\r\n                frappe.msgprint(__('Item Code is required'));\r\n                return;\r\n            }\r\n            if (frm.doc.tds_series_counter === undefined || frm.doc.tds_series_counter === null) {\r\n                frappe.msgprint(__('Series Counter is required'));\r\n                return;\r\n            }\r\n\r\n            // Extract all digits from naming series (e.g., \"1707\" from \"TDS-1707\")\r\n            const allDigits = frm.doc.name.replace(/\\D/g, '');\r\n            \r\n            // Validate we have at least 4 digits\r\n            if (allDigits.length < 4) {\r\n                frappe.msgprint(__('Naming Series must contain at least 4 digits', allDigits));\r\n                return;\r\n            }\r\n\r\n            // Get last 4 digits\r\n            const last_four = allDigits.slice(-4);\r\n\r\n            // Generate current date components\r\n            const today = new Date();\r\n            const yy = today.getFullYear().toString().slice(-2);\r\n            const mm = String(today.getMonth() + 1).padStart(2, '0');\r\n            const dd = String(today.getDate()).padStart(2, '0');\r\n\r\n            // Create version string\r\n            const version = `V${frm.doc.tds_version_counter}-${frm.doc.item_code}-Date:${yy}/${mm}/${dd}*${frm.doc.tds_series_counter}${last_four}`;\r\n\r\n            // Update the field and show success\r\n            frm.set_value('tds_naming_series', version);\r\n            frappe.show_alert({\r\n                message: __('Version generated successfully'),\r\n                indicator: 'green'\r\n            });\r\n        }).addClass('btn-primary');\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TDS Product Specification",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.250751",
  "module": "amb_w_tds",
  "name": "Fetch TDS Version",
  "script": "frappe.ui.form.on('TDS Product Specification', {\r\n    refresh: function(frm) {\r\n        // Add button to fetch TDS version\r\n        frm.add_custom_button(__('Fetch TDS Version'), function() {\r\n            fetchFilteredTdsVersion(frm);\r\n        }).addClass('btn-primary');\r\n    }\r\n});\r\n\r\nfunction fetchFilteredTdsVersion(frm) {\r\n    // Validate we have an item code to filter by\r\n    if (!frm.doc.item_code) {\r\n        frappe.msgprint(__('Please select an Item Code first'));\r\n        return;\r\n    }\r\n\r\n    // Validate we have a TDS Settings link\r\n    if (!frm.doc.tds_settings) {\r\n        frappe.msgprint(__('Please select a TDS Settings document first'));\r\n        return;\r\n    }\r\n\r\n    frappe.call({\r\n        method: 'frappe.client.get_value',\r\n        args: {\r\n            doctype: 'TDS Settings',\r\n            filters: {\r\n                name: frm.doc.tds_settings,\r\n                item_code: frm.doc.item_code  // This ensures we only match the correct product\r\n            },\r\n            fieldname: ['tds_naming_series']\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.tds_naming_series) {\r\n                frm.set_value('version', r.message.tds_naming_series);\r\n                frappe.show_alert(__('TDS Version fetched successfully'));\r\n            } else {\r\n                frappe.msgprint(__('No matching TDS Version found for this product'));\r\n            }\r\n        }\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Raven Webhook Handler",
  "enabled": 1,
  "modified": "2025-10-24 11:52:39.232388",
  "module": "amb_w_tds",
  "name": "Reaven Webhook Trigger Event Script",
  "script": "frappe.ui.form.on('Raven Webhook Handler', {\r\n    refresh(frm) {\r\n        // Initialize default events if empty\r\n        if (!frm.doc.__islocal && (!frm.doc.trigger_events || frm.doc.trigger_events.length === 0)) {\r\n            frm.clear_table('trigger_events');\r\n            ['After Insert', 'After Update'].forEach(event => {\r\n                let row = frm.add_child('trigger_events', {\r\n                    event: event,\r\n                    enabled: 1,\r\n                    webhook_handler: frm.doc.name\r\n                });\r\n            });\r\n            frm.refresh_field('trigger_events');\r\n        }\r\n    }\r\n});\r\n\r\n// Handle the link field in child table\r\nfrappe.ui.form.on('Webhook Trigger Event', {\r\n    webhook_handler(frm, cdt, cdn) {\r\n        let row = frappe.get_doc(cdt, cdn);\r\n        if (!row.webhook_handler) {\r\n            frappe.model.set_value(cdt, cdn, 'webhook_handler', frm.doc.name);\r\n        }\r\n    }\r\n});\r\n// In Sales Order form script\r\nfrappe.ui.form.on('Sales Order', {\r\n    refresh(frm) {\r\n        frm.add_custom_button(__('Trigger Webhook'), () => {\r\n            frappe.call({\r\n                method: 'your_app.webhooks.manual_trigger',\r\n                args: { docname: frm.doc.name }\r\n            })\r\n        })\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-10-24 11:52:39.195600",
  "module": "amb_w_tds",
  "name": "Stock Entry Validation",
  "script": "frappe.ui.form.on('Stock Entry', {\r\n    refresh: function(frm) {\r\n        // Your validation logic here - NO HTML\r\n        console.log('Stock Entry form refreshed');\r\n        \r\n        // Add your zone validation logic here\r\n        if (frm.doc.custom_zone_type) {\r\n            validateZoneRequirements(frm);\r\n        }\r\n    },\r\n    \r\n    custom_zone_type: function(frm) {\r\n        // Trigger validation when zone type changes\r\n        validateZoneRequirements(frm);\r\n    },\r\n    \r\n    validate: function(frm) {\r\n        // Final validation before saving\r\n        return validateZoneRequirements(frm, true);\r\n    }\r\n});\r\n\r\nfunction validateZoneRequirements(frm, isFinalValidation = false) {\r\n    if (!frm.doc.custom_zone_type) return true;\r\n    \r\n    const zoneType = frm.doc.custom_zone_type.trim();\r\n    \r\n    // Red Zone validation\r\n    if (zoneType === \"Red Zone\") {\r\n        if (!frm.doc.custom_supervisor_signature || !frm.doc.custom_operator_signature) {\r\n            if (isFinalValidation) {\r\n                frappe.throw(\"Red Zone operations require both supervisor and operator signatures\");\r\n            } else {\r\n                frappe.msgprint({\r\n                    title: __('Validation Warning'),\r\n                    message: __('Red Zone requires both signatures'),\r\n                    indicator: 'orange'\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    // Movement type validation (warning only)\r\n    if (frm.doc.custom_movement_type) {\r\n        const movementType = frm.doc.custom_movement_type.toString().trim();\r\n        if ([\"261\", \"311\"].includes(movementType) && !frm.doc.custom_supervisor_signature) {\r\n            frappe.msgprint({\r\n                message: __('Supervisor signature recommended for movement type {0}', [movementType]),\r\n                indicator: 'orange',\r\n                alert: true\r\n            });\r\n        }\r\n    }\r\n    \r\n    return true;\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch AMB",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.178017",
  "module": "amb_w_tds",
  "name": "batch_node",
  "script": "// Add new node\r\nfrappe.call({\r\n    method: \"sysmayal.v.frappe.cloud.batch_amb_custom_tree_apibatch_amb_custom_tree_api.add_batch_node\",\r\n    args: {\r\n        doctype: \"Batch AMB\",\r\n        is_group: 0,\r\n        work_order_ref: \"MFG-WO-00325\",\r\n        parent: \"LOTE-00002\",\r\n        is_root: true\r\n    },\r\n    callback: function(response) {\r\n        // Handle response\r\n    }\r\n});\r\n\r\n// Get children\r\nfrappe.call({\r\n    method: \"batch_amb_custom_tree_api.get_batch_children\",\r\n    args: { parent: parent_node },\r\n    callback: function(response) {\r\n        // Build tree from response\r\n    }\r\n});\r\n\r\n// Rebuild tree (if needed)\r\nfrappe.call({\r\n    method: \"batch_amb_custom_tree_api.rebuild_batch_tree\",\r\n    callback: function(response) {\r\n        console.log(response.message);\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch AMB",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.160272",
  "module": "amb_w_tds",
  "name": "batch_node2",
  "script": "// Add new batch node - use this instead of frappe.desk.treeview.add_node\r\nfrappe.call({\r\n    method: \"add_batch_node\",\r\n    args: {\r\n        doctype: \"Batch AMB\",\r\n        is_group: 0,\r\n        work_order_ref: \"MFG-WO-00325\",\r\n        parent: \"LOTE-00002\",\r\n        is_root: true\r\n    },\r\n    callback: function(response) {\r\n        if (response.message) {\r\n            console.log(\"Batch created successfully:\", response.message);\r\n            // Refresh your tree view here\r\n        } else if (response.exc) {\r\n            console.error(\"Error creating batch:\", response.exc);\r\n        }\r\n    }\r\n});\r\n\r\n// Get children for tree view\r\nfrappe.call({\r\n    method: \"get_batch_children\",\r\n    args: { parent: \"LOTE-00002\" },\r\n    callback: function(response) {\r\n        if (response.message) {\r\n            console.log(\"Children:\", response.message);\r\n            // Build your tree view with this data\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COA AMB2",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.142045",
  "module": "amb_w_tds",
  "name": "coa_amb_validate",
  "script": "frappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        // Add custom button to validate all results\r\n        if(!frm.is_new()) {\r\n            frm.add_custom_button(__('Validate All Results'), function() {\r\n                validate_all_results(frm);\r\n            }).addClass('btn-primary');\r\n        }\r\n        \r\n        // Apply CSS styles\r\n        apply_validation_styles();\r\n        \r\n        // Set up validation for existing rows\r\n        setup_existing_rows_validation(frm);\r\n    },\r\n    \r\n    // Set up validation when form loads\r\n    onload: function(frm) {\r\n        setup_parameter_validation(frm);\r\n    },\r\n    \r\n    // Also set up when coa_quality_test_parameter field refreshes\r\n    coa_quality_test_parameter: function(frm) {\r\n        setup_existing_rows_validation(frm);\r\n    }\r\n});\r\n\r\n// Set up validation for parameter rows\r\nfunction setup_parameter_validation(frm) {\r\n    frappe.ui.form.on('COA Quality Test Parameter', {\r\n        result_value: function(frm, cdt, cdn) {\r\n            const row = frappe.get_doc(cdt, cdn);\r\n            setTimeout(function() {\r\n                validate_parameter_row(row);\r\n                frm.refresh_field('coa_quality_test_parameter');\r\n            }, 300);\r\n        },\r\n        \r\n        refresh_field: function(frm, cdt, cdn) {\r\n            // Apply visual styling when field refreshes\r\n            apply_row_styling(frm, cdt, cdn);\r\n        }\r\n    });\r\n}\r\n\r\n// Apply styling to existing rows\r\nfunction setup_existing_rows_validation(frm) {\r\n    if (frm.doc.coa_quality_test_parameter) {\r\n        frm.doc.coa_quality_test_parameter.forEach(function(row) {\r\n            apply_row_styling_by_doc(frm, row);\r\n        });\r\n    }\r\n}\r\n\r\n// Apply CSS styles to document\r\nfunction apply_validation_styles() {\r\n    // Check if styles are already added\r\n    if (document.getElementById('coa-validation-styles')) return;\r\n    \r\n    const style = document.createElement('style');\r\n    style.id = 'coa-validation-styles';\r\n    style.textContent = `\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-pass { \r\n            background-color: #e6f7e6 !important; \r\n        }\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-fail { \r\n            background-color: #ffe6e6 !important; \r\n        }\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-na { \r\n            background-color: #f5f5f5 !important; \r\n        }\r\n    `;\r\n    document.head.appendChild(style);\r\n}\r\n\r\n// Apply styling to a specific row\r\nfunction apply_row_styling(frm, cdt, cdn) {\r\n    const row = frappe.get_doc(cdt, cdn);\r\n    apply_row_styling_by_doc(frm, row);\r\n}\r\n\r\nfunction apply_row_styling_by_doc(frm, row) {\r\n    const grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    if (grid && grid.grid_rows_by_docname && grid.grid_rows_by_docname[row.name]) {\r\n        const grid_row = grid.grid_rows_by_docname[row.name];\r\n        \r\n        // Remove existing classes\r\n        grid_row.$row.removeClass('result-pass result-fail result-na');\r\n        \r\n        // Add appropriate class based on status\r\n        if (row.result_status === 'PASS') {\r\n            grid_row.$row.addClass('result-pass');\r\n        } else if (row.result_status === 'FAIL') {\r\n            grid_row.$row.addClass('result-fail');\r\n        } else if (row.result_status === 'N/A') {\r\n            grid_row.$row.addClass('result-na');\r\n        }\r\n    }\r\n}\r\n\r\n// Function to validate a single row\r\nfunction validate_parameter_row(row) {\r\n    if (!row.result_value) {\r\n        return null;\r\n    }\r\n\r\n    if (row.is_numeric == 1) {\r\n        // Numeric validation\r\n        const result = parseFloat(row.result_value);\r\n        \r\n        if (isNaN(result)) {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        }\r\n\r\n        const min = parseFloat(row.min_value) || -Infinity;\r\n        const max = parseFloat(row.max_value) || Infinity;\r\n\r\n        if (result >= min && result <= max) {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'PASS');\r\n            return true;\r\n        } else {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        }\r\n    } else {\r\n        // Non-numeric validation\r\n        const result = (row.result_value || '').toString().toUpperCase().trim();\r\n        \r\n        if (result === 'PASS' || result === 'YES' || result === 'TRUE' || result === 'OK') {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'PASS');\r\n            return true;\r\n        } else if (result === 'FAIL' || result === 'NO' || result === 'FALSE' || result === 'NOT OK') {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        } else {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'N/A');\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n// Function to validate all results in the table\r\nfunction validate_all_results(frm) {\r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No test parameters found'));\r\n        return;\r\n    }\r\n\r\n    let allValid = true;\r\n    let passedCount = 0;\r\n    let failedCount = 0;\r\n    let naCount = 0;\r\n    let emptyCount = 0;\r\n\r\n    frm.doc.coa_quality_test_parameter.forEach(function(row) {\r\n        if (row.result_value) {\r\n            const isValid = validate_parameter_row(row);\r\n            if (isValid === true) passedCount++;\r\n            if (isValid === false) {\r\n                failedCount++;\r\n                allValid = false;\r\n            }\r\n            if (isValid === null) naCount++;\r\n        } else {\r\n            emptyCount++;\r\n        }\r\n    });\r\n\r\n    // Refresh the table to show updated status\r\n    frm.refresh_field('coa_quality_test_parameter');\r\n\r\n    // Show summary\r\n    let message = __(`Validation complete: ${passedCount} PASS, ${failedCount} FAIL`);\r\n    if (naCount > 0) message += __(`, ${naCount} N/A`);\r\n    if (emptyCount > 0) message += __(`, ${emptyCount} Empty`);\r\n\r\n    frappe.msgprint({\r\n        title: __('Validation Results'),\r\n        indicator: allValid ? 'green' : 'red',\r\n        message: message\r\n    });\r\n\r\n    return allValid;\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COA AMB2",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.123765",
  "module": "amb_w_tds",
  "name": "Load TDS Parameters",
  "script": "frappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        // Add button to load TDS parameters via API\r\n        frm.add_custom_button(__('Load TDS Parameters'), function() {\r\n            load_tds_parameters_via_api(frm);\r\n        }).addClass('btn-primary');\r\n        \r\n        // Add validate button\r\n        if(!frm.is_new()) {\r\n            frm.add_custom_button(__('Validate All Results'), function() {\r\n                validate_all_results(frm);\r\n            }).addClass('btn-default');\r\n        }\r\n        \r\n        // Apply CSS styles\r\n        apply_validation_styles();\r\n        setup_existing_rows_validation(frm);\r\n    },\r\n    \r\n    // Auto-load when TDS is selected for new documents\r\n    linked_tds: function(frm) {\r\n        if (frm.doc.linked_tds && frm.is_new()) {\r\n            load_tds_parameters_via_api(frm);\r\n        }\r\n    },\r\n    \r\n    onload: function(frm) {\r\n        setup_parameter_validation(frm);\r\n    },\r\n    \r\n    coa_quality_test_parameter: function(frm) {\r\n        setup_existing_rows_validation(frm);\r\n    }\r\n});\r\n\r\n// API function to load TDS parameters\r\nfunction load_tds_parameters_via_api(frm) {\r\n    if (!frm.doc.linked_tds) {\r\n        frappe.msgprint(__('Please select a TDS first'));\r\n        return;\r\n    }\r\n    \r\n    if (!frm.doc.name) {\r\n        frappe.msgprint(__('Please save the document first'));\r\n        return;\r\n    }\r\n    \r\n    frappe.call({\r\n        method: 'coa_amb_api',\r\n        args: {\r\n            coa_name: frm.doc.name,\r\n            tds_name: frm.doc.linked_tds\r\n        },\r\n        callback: function(r) {\r\n            if (!r.exc) {\r\n                if (r.message.success) {\r\n                    frappe.msgprint(__('✅ ') + r.message.message);\r\n                    frm.refresh();\r\n                } else {\r\n                    frappe.msgprint(__('❌ ') + r.message.message);\r\n                }\r\n            } else {\r\n                frappe.msgprint(__('Error calling API: ') + r.exc);\r\n            }\r\n        },\r\n        freeze: true,\r\n        freeze_message: __('Loading parameters from TDS...')\r\n    });\r\n}\r\n\r\n// Your existing validation functions (keep them as-is)\r\nfunction setup_parameter_validation(frm) {\r\n    frappe.ui.form.on('COA Quality Test Parameter', {\r\n        result_value: function(frm, cdt, cdn) {\r\n            const row = frappe.get_doc(cdt, cdn);\r\n            setTimeout(function() {\r\n                validate_parameter_row(row);\r\n                frm.refresh_field('coa_quality_test_parameter');\r\n            }, 300);\r\n        },\r\n        refresh_field: function(frm, cdt, cdn) {\r\n            apply_row_styling(frm, cdt, cdn);\r\n        }\r\n    });\r\n}\r\n\r\nfunction setup_existing_rows_validation(frm) {\r\n    if (frm.doc.coa_quality_test_parameter) {\r\n        frm.doc.coa_quality_test_parameter.forEach(function(row) {\r\n            apply_row_styling_by_doc(frm, row);\r\n        });\r\n    }\r\n}\r\n\r\nfunction apply_validation_styles() {\r\n    if (document.getElementById('coa-validation-styles')) return;\r\n    \r\n    const style = document.createElement('style');\r\n    style.id = 'coa-validation-styles';\r\n    style.textContent = `\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-pass { \r\n            background-color: #e6f7e6 !important; \r\n        }\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-fail { \r\n            background-color: #ffe6e6 !important; \r\n        }\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-na { \r\n            background-color: #f5f5f5 !important; \r\n        }\r\n    `;\r\n    document.head.appendChild(style);\r\n}\r\n\r\nfunction apply_row_styling(frm, cdt, cdn) {\r\n    const row = frappe.get_doc(cdt, cdn);\r\n    apply_row_styling_by_doc(frm, row);\r\n}\r\n\r\nfunction apply_row_styling_by_doc(frm, row) {\r\n    const grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    if (grid && grid.grid_rows_by_docname && grid.grid_rows_by_docname[row.name]) {\r\n        const grid_row = grid.grid_rows_by_docname[row.name];\r\n        grid_row.$row.removeClass('result-pass result-fail result-na');\r\n        if (row.result_status === 'PASS') grid_row.$row.addClass('result-pass');\r\n        else if (row.result_status === 'FAIL') grid_row.$row.addClass('result-fail');\r\n        else if (row.result_status === 'N/A') grid_row.$row.addClass('result-na');\r\n    }\r\n}\r\n\r\nfunction validate_parameter_row(row) {\r\n    if (!row.result_value) return null;\r\n    // ... keep your existing validation logic\r\n}\r\n\r\nfunction validate_all_results(frm) {\r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No test parameters found'));\r\n        return;\r\n    }\r\n    // ... keep your existing validation logic\r\n}\r\nfrappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        // Add custom button to validate all results\r\n        if(!frm.is_new()) {\r\n            frm.add_custom_button(__('Validate All Results'), function() {\r\n                validate_all_results(frm);\r\n            }).addClass('btn-primary');\r\n        }\r\n        \r\n        // Apply CSS styles\r\n        apply_validation_styles();\r\n        \r\n        // Set up validation for existing rows\r\n        setup_existing_rows_validation(frm);\r\n    },\r\n    \r\n    // Set up validation when form loads\r\n    onload: function(frm) {\r\n        setup_parameter_validation(frm);\r\n    },\r\n    \r\n    // Also set up when coa_quality_test_parameter field refreshes\r\n    coa_quality_test_parameter: function(frm) {\r\n        setup_existing_rows_validation(frm);\r\n    }\r\n});\r\n\r\n// Set up validation for parameter rows\r\nfunction setup_parameter_validation(frm) {\r\n    frappe.ui.form.on('COA Quality Test Parameter', {\r\n        result_value: function(frm, cdt, cdn) {\r\n            const row = frappe.get_doc(cdt, cdn);\r\n            setTimeout(function() {\r\n                validate_parameter_row(row);\r\n                frm.refresh_field('coa_quality_test_parameter');\r\n            }, 300);\r\n        },\r\n        \r\n        refresh_field: function(frm, cdt, cdn) {\r\n            // Apply visual styling when field refreshes\r\n            apply_row_styling(frm, cdt, cdn);\r\n        }\r\n    });\r\n}\r\n\r\n// Apply styling to existing rows\r\nfunction setup_existing_rows_validation(frm) {\r\n    if (frm.doc.coa_quality_test_parameter) {\r\n        frm.doc.coa_quality_test_parameter.forEach(function(row) {\r\n            apply_row_styling_by_doc(frm, row);\r\n        });\r\n    }\r\n}\r\n\r\n// Apply CSS styles to document\r\nfunction apply_validation_styles() {\r\n    // Check if styles are already added\r\n    if (document.getElementById('coa-validation-styles')) return;\r\n    \r\n    const style = document.createElement('style');\r\n    style.id = 'coa-validation-styles';\r\n    style.textContent = `\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-pass { \r\n            background-color: #e6f7e6 !important; \r\n        }\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-fail { \r\n            background-color: #ffe6e6 !important; \r\n        }\r\n        .grid-row[data-fieldname=\"coa_quality_test_parameter\"] .result-na { \r\n            background-color: #f5f5f5 !important; \r\n        }\r\n    `;\r\n    document.head.appendChild(style);\r\n}\r\n\r\n// Apply styling to a specific row\r\nfunction apply_row_styling(frm, cdt, cdn) {\r\n    const row = frappe.get_doc(cdt, cdn);\r\n    apply_row_styling_by_doc(frm, row);\r\n}\r\n\r\nfunction apply_row_styling_by_doc(frm, row) {\r\n    const grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    if (grid && grid.grid_rows_by_docname && grid.grid_rows_by_docname[row.name]) {\r\n        const grid_row = grid.grid_rows_by_docname[row.name];\r\n        \r\n        // Remove existing classes\r\n        grid_row.$row.removeClass('result-pass result-fail result-na');\r\n        \r\n        // Add appropriate class based on status\r\n        if (row.result_status === 'PASS') {\r\n            grid_row.$row.addClass('result-pass');\r\n        } else if (row.result_status === 'FAIL') {\r\n            grid_row.$row.addClass('result-fail');\r\n        } else if (row.result_status === 'N/A') {\r\n            grid_row.$row.addClass('result-na');\r\n        }\r\n    }\r\n}\r\n\r\n// Function to validate a single row\r\nfunction validate_parameter_row(row) {\r\n    if (!row.result_value) {\r\n        return null;\r\n    }\r\n\r\n    if (row.is_numeric == 1) {\r\n        // Numeric validation\r\n        const result = parseFloat(row.result_value);\r\n        \r\n        if (isNaN(result)) {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        }\r\n\r\n        const min = parseFloat(row.min_value) || -Infinity;\r\n        const max = parseFloat(row.max_value) || Infinity;\r\n\r\n        if (result >= min && result <= max) {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'PASS');\r\n            return true;\r\n        } else {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        }\r\n    } else {\r\n        // Non-numeric validation\r\n        const result = (row.result_value || '').toString().toUpperCase().trim();\r\n        \r\n        if (result === 'PASS' || result === 'YES' || result === 'TRUE' || result === 'OK') {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'PASS');\r\n            return true;\r\n        } else if (result === 'FAIL' || result === 'NO' || result === 'FALSE' || result === 'NOT OK') {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'FAIL');\r\n            return false;\r\n        } else {\r\n            frappe.model.set_value(row.doctype, row.name, 'result_status', 'N/A');\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n// Function to validate all results in the table\r\nfunction validate_all_results(frm) {\r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No test parameters found'));\r\n        return;\r\n    }\r\n\r\n    let allValid = true;\r\n    let passedCount = 0;\r\n    let failedCount = 0;\r\n    let naCount = 0;\r\n    let emptyCount = 0;\r\n\r\n    frm.doc.coa_quality_test_parameter.forEach(function(row) {\r\n        if (row.result_value) {\r\n            const isValid = validate_parameter_row(row);\r\n            if (isValid === true) passedCount++;\r\n            if (isValid === false) {\r\n                failedCount++;\r\n                allValid = false;\r\n            }\r\n            if (isValid === null) naCount++;\r\n        } else {\r\n            emptyCount++;\r\n        }\r\n    });\r\n\r\n    // Refresh the table to show updated status\r\n    frm.refresh_field('coa_quality_test_parameter');\r\n\r\n    // Show summary\r\n    let message = __(`Validation complete: ${passedCount} PASS, ${failedCount} FAIL`);\r\n    if (naCount > 0) message += __(`, ${naCount} N/A`);\r\n    if (emptyCount > 0) message += __(`, ${emptyCount} Empty`);\r\n\r\n    frappe.msgprint({\r\n        title: __('Validation Results'),\r\n        indicator: allValid ? 'green' : 'red',\r\n        message: message\r\n    });\r\n\r\n    return allValid;\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COA AMB2",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.027667",
  "module": "amb_w_tds",
  "name": "load_tds_parameters",
  "script": "// COA AMB Enhanced Client Script with Complete Field Mapping and Fixed Validation\r\n// Complete working version with proper field copying and validation fixes\r\n\r\nfrappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        // Clear any existing buttons first\r\n        frm.page.clear_icons();\r\n        frm.page.clear_actions();\r\n        \r\n        // Store current form reference for real-time validation\r\n        window.cur_frm = frm;\r\n        \r\n        // Add main action buttons\r\n        frm.add_custom_button(__('📥 Load TDS Parameters'), function() {\r\n            load_tds_parameters_enhanced(frm);\r\n        }, __('Actions'));\r\n        \r\n        frm.add_custom_button(__('✅ Validate TDS Compliance'), function() {\r\n            validate_tds_compliance_fixed(frm);\r\n        }, __('Actions'));\r\n        \r\n        // Add Submit button if validation passes and document is not submitted\r\n        if (frm.doc.docstatus === 0 && frm.doc.validation_status === 'Compliant') {\r\n            frm.add_custom_button(__('🚀 Submit COA'), function() {\r\n                submit_coa_document(frm);\r\n            }, __('Actions')).addClass('btn-primary');\r\n            \r\n            // Show compliance alert\r\n            frappe.show_alert({\r\n                message: __('✅ Document is compliant and ready for submission'),\r\n                indicator: 'green'\r\n            });\r\n        }\r\n        \r\n        // Add utility buttons\r\n        if(!frm.is_new()) {\r\n            frm.add_custom_button(__('🔍 Debug Values'), function() {\r\n                debug_current_values_detailed(frm);\r\n            }, __('Tools'));\r\n            \r\n            frm.add_custom_button(__('🗑️ Clear Parameters'), function() {\r\n                clear_parameters_with_confirmation(frm);\r\n            }, __('Tools'));\r\n        }\r\n        \r\n        // Apply enhanced styling\r\n        apply_enhanced_styles();\r\n        \r\n        // Setup real-time validation\r\n        setup_real_time_validation(frm);\r\n        \r\n        console.log('Form refreshed. Validation status:', frm.doc.validation_status, 'Docstatus:', frm.doc.docstatus);\r\n    },\r\n    \r\n    after_save: function(frm) {\r\n        console.log('After save event triggered. Validation status:', frm.doc.validation_status);\r\n        \r\n        // Check validation status after save and update UI accordingly\r\n        if (frm.doc.validation_status === 'Compliant') {\r\n            // Use setTimeout to ensure the form is fully saved before refreshing buttons\r\n            setTimeout(function() {\r\n                console.log('Refreshing buttons after save...');\r\n                setup_form_buttons(frm);\r\n            }, 1000);\r\n        }\r\n    },\r\n    \r\n    linked_tds: function(frm) {\r\n        if (frm.doc.linked_tds) {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'TDS Product Specification',\r\n                    name: frm.doc.linked_tds\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        var param_count = r.message.item_quality_inspection_parameter ? r.message.item_quality_inspection_parameter.length : 0;\r\n                        frappe.show_alert({\r\n                            message: __('TDS Selected: {0} parameters available', [param_count]),\r\n                            indicator: 'green'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n// =====================\r\n// FORM BUTTON MANAGEMENT\r\n// =====================\r\n\r\nfunction setup_form_buttons(frm) {\r\n    console.log('Setting up form buttons. Validation status:', frm.doc.validation_status, 'Docstatus:', frm.doc.docstatus);\r\n    \r\n    // Clear existing buttons\r\n    frm.page.clear_actions();\r\n    \r\n    // Always add these buttons first\r\n    frm.add_custom_button(__('📥 Load TDS Parameters'), function() {\r\n        load_tds_parameters_enhanced(frm);\r\n    }, __('Actions'));\r\n    \r\n    frm.add_custom_button(__('✅ Validate TDS Compliance'), function() {\r\n        validate_tds_compliance_fixed(frm);\r\n    }, __('Actions'));\r\n    \r\n    // Add Submit button if document is compliant and not submitted\r\n    if (frm.doc.docstatus === 0 && frm.doc.validation_status === 'Compliant') {\r\n        console.log('Adding Submit button - conditions met');\r\n        \r\n        frm.add_custom_button(__('🚀 Submit COA'), function() {\r\n            submit_coa_document(frm);\r\n        }, __('Actions')).addClass('btn-primary');\r\n        \r\n        // Show a message indicating the document is ready for submission\r\n        frappe.show_alert({\r\n            message: __('✅ Document is compliant and ready for submission'),\r\n            indicator: 'green'\r\n        });\r\n    } else {\r\n        console.log('Submit button not added. Docstatus:', frm.doc.docstatus, 'Validation status:', frm.doc.validation_status);\r\n    }\r\n    \r\n    // Add utility buttons\r\n    if(!frm.is_new()) {\r\n        frm.add_custom_button(__('🔍 Debug Values'), function() {\r\n            debug_current_values_detailed(frm);\r\n        }, __('Tools'));\r\n        \r\n        frm.add_custom_button(__('🗑️ Clear Parameters'), function() {\r\n            clear_parameters_with_confirmation(frm);\r\n        }, __('Tools'));\r\n    }\r\n    \r\n    // Force refresh of button area\r\n    frm.page.refresh();\r\n}\r\n\r\n// =====================\r\n// REAL-TIME VALIDATION SETUP\r\n// =====================\r\n\r\nfunction setup_real_time_validation(frm) {\r\n    // Initialize validation styles\r\n    initialize_validation_styles();\r\n    \r\n    // Set up event handler for result_value changes\r\n    frappe.ui.form.on('COA Quality Test Parameter', {\r\n        result_value: function(frm, cdt, cdn) {\r\n            console.log('Field changed for row ' + cdn + ': result_value = \"' + locals[cdt][cdn].result_value + '\"');\r\n            \r\n            // Use setTimeout to allow the field change to be processed normally\r\n            setTimeout(function() {\r\n                perform_real_time_validation_for_row(frm, cdt, cdn);\r\n            }, 200);\r\n        }\r\n    });\r\n    \r\n    console.log('Real-time validation setup complete');\r\n}\r\n\r\nfunction perform_real_time_validation_for_row(frm, cdt, cdn) {\r\n    console.log('Performing real-time validation for row ' + cdn);\r\n    \r\n    var row = locals[cdt][cdn];\r\n    if (!row) {\r\n        console.log('Row not found');\r\n        return;\r\n    }\r\n    \r\n    console.log('  Current result value: \"' + row.result_value + '\"');\r\n    \r\n    // Skip validation if result_value is empty\r\n    if (!row.result_value || row.result_value.toString().trim() === '') {\r\n        // Clear any existing validation styling\r\n        clear_validation_styling_fixed(cdn);\r\n        // Clear result text\r\n        frappe.model.set_value(cdt, cdn, 'result_text', '');\r\n        return;\r\n    }\r\n    \r\n    // Handle negative values in real-time validation\r\n    var validation_result = validate_single_parameter(row);\r\n    \r\n    // Apply styling based on validation result\r\n    apply_validation_styling_fixed(cdn, validation_result);\r\n    \r\n    // Update result_text field with PASS/FAIL status\r\n    update_result_text_field(frm, cdt, cdn, validation_result.status);\r\n    \r\n    console.log('  Validation result: ' + validation_result.status);\r\n}\r\n\r\nfunction update_result_text_field(frm, cdt, cdn, status) {\r\n    // Update the result_text field with the validation status\r\n    frappe.model.set_value(cdt, cdn, 'result_text', status);\r\n    \r\n    // Also update the result_status field if it exists\r\n    if (locals[cdt][cdn].result_status !== undefined) {\r\n        var status_display = '';\r\n        switch(status) {\r\n            case 'PASS': status_display = 'Compliant'; break;\r\n            case 'FAIL': status_display = 'Non-Compliant'; break;\r\n            case 'PENDING': status_display = 'Pending'; break;\r\n            default: status_display = status;\r\n        }\r\n        frappe.model.set_value(cdt, cdn, 'result_status', status_display);\r\n    }\r\n}\r\n\r\nfunction clear_validation_styling_fixed(cdn) {\r\n    try {\r\n        // Target the specific row by data-name attribute\r\n        var row_element = $('div[data-name=\"' + cdn + '\"]');\r\n        if (row_element.length > 0) {\r\n            // Remove validation classes from the result_value field input\r\n            row_element.find('[data-fieldname=\"result_value\"] input').removeClass('validation-pass validation-fail');\r\n            \r\n            // Remove any validation indicator elements we might have added\r\n            row_element.find('.validation-indicator').remove();\r\n        }\r\n    } catch (error) {\r\n        console.log('Error clearing validation styling:', error);\r\n    }\r\n}\r\n\r\nfunction apply_validation_styling_fixed(cdn, validation_result) {\r\n    try {\r\n        // Target the specific row by data-name attribute\r\n        var row_element = $('div[data-name=\"' + cdn + '\"]');\r\n        if (row_element.length === 0) {\r\n            console.log('Row element not found for cdn:', cdn);\r\n            return;\r\n        }\r\n        \r\n        // Find the result_value input field specifically\r\n        var result_input = row_element.find('[data-fieldname=\"result_value\"] input');\r\n        if (result_input.length === 0) {\r\n            console.log('Result input field not found for cdn:', cdn);\r\n            return;\r\n        }\r\n        \r\n        // Clear existing validation classes first\r\n        result_input.removeClass('validation-pass validation-fail');\r\n        \r\n        // Apply appropriate class based on validation result\r\n        if (validation_result.status === 'PASS') {\r\n            result_input.addClass('validation-pass');\r\n        } else if (validation_result.status === 'FAIL') {\r\n            result_input.addClass('validation-fail');\r\n        }\r\n        \r\n        console.log('Applied validation styling for row ' + cdn + ': ' + validation_result.status);\r\n        \r\n    } catch (error) {\r\n        console.log('Error applying validation styling:', error);\r\n    }\r\n}\r\n\r\n// Also update the single parameter validation function\r\nfunction validate_single_parameter(param) {\r\n    var result = {\r\n        status: 'PENDING',\r\n        message: '',\r\n        parameter_name: param.parameter || 'Unknown'\r\n    };\r\n    \r\n    // Skip validation for title rows\r\n    if (is_title_row(param)) {\r\n        result.status = 'SKIP';\r\n        result.message = 'Title row - validation skipped';\r\n        return result;\r\n    }\r\n    \r\n    // Skip if result_value is empty\r\n    if (!param.result_value || param.result_value.toString().trim() === '') {\r\n        result.status = 'PENDING';\r\n        result.message = 'No result value entered';\r\n        return result;\r\n    }\r\n    \r\n    try {\r\n        var resultValue = parseFloat(param.result_value);\r\n        var minValue = param.min_value !== null && param.min_value !== undefined && param.min_value !== '' ? parseFloat(param.min_value) : null;\r\n        var maxValue = param.max_value !== null && param.max_value !== undefined && param.max_value !== '' ? parseFloat(param.max_value) : null;\r\n        \r\n        // Get Acceptance Criteria Value (this is the 'value' field, not 'specification')\r\n        var acceptanceCriteria = param.value || '';\r\n        \r\n        // SPECIAL CASE: Handle \"NEGATIVE\" acceptance criteria\r\n        if (acceptanceCriteria.toUpperCase().includes('NEGATIVE')) {\r\n            var resultStr = param.result_value.toString().toUpperCase().trim();\r\n            if (resultStr === 'NEGATIVE' || resultStr === 'NEG' || resultStr === '0') {\r\n                result.status = 'PASS';\r\n                result.message = 'Negative result as required';\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Expected negative result but got \"' + param.result_value + '\"';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // SPECIAL CASE: Handle \"NOT DETECTABLE\" acceptance criteria\r\n        if (acceptanceCriteria.toUpperCase().includes('NOT DETECTABLE')) {\r\n            var lodMatch = acceptanceCriteria.match(/LOD\\s*([0-9.]+)/i);\r\n            var lodValue = lodMatch ? parseFloat(lodMatch[1]) : 0;\r\n            \r\n            if (!isNaN(resultValue) && resultValue < lodValue) {\r\n                result.status = 'PASS';\r\n                result.message = 'Value below detection limit of ' + lodValue;\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Value \"' + param.result_value + '\" should be below LOD of ' + lodValue;\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Check if result value is a valid number\r\n        if (isNaN(resultValue)) {\r\n            // For non-numeric values, check against acceptance criteria\r\n            if (acceptanceCriteria && acceptanceCriteria.trim() !== '') {\r\n                // Compare result with acceptance criteria (case-insensitive)\r\n                var resultStr = param.result_value.toString().toLowerCase().trim();\r\n                var criteriaStr = acceptanceCriteria.toString().toLowerCase().trim();\r\n                \r\n                if (resultStr === criteriaStr) {\r\n                    result.status = 'PASS';\r\n                    result.message = 'Value matches acceptance criteria';\r\n                } else {\r\n                    result.status = 'FAIL';\r\n                    result.message = 'Value doesn\\'t match acceptance criteria';\r\n                }\r\n            } else {\r\n                // No acceptance criteria to compare against - auto-pass if value exists\r\n                result.status = 'PASS';\r\n                result.message = 'No acceptance criteria, value exists';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Handle special case where both min and max are 0\r\n        if (minValue === 0 && maxValue === 0) {\r\n            if (resultValue === 0) {\r\n                result.status = 'PASS';\r\n                result.message = 'Value is exactly 0 as required';\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Value ' + resultValue + ' is not 0 (required range: 0 - 0)';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Perform range validation for numeric values\r\n        var withinMin = (minValue === null || isNaN(minValue) || resultValue >= minValue);\r\n        var withinMax = (maxValue === null || isNaN(maxValue) || resultValue <= maxValue);\r\n        \r\n        if (withinMin && withinMax) {\r\n            result.status = 'PASS';\r\n            result.message = 'Value ' + resultValue + ' is within acceptable range';\r\n        } else {\r\n            result.status = 'FAIL';\r\n            var rangeInfo = '';\r\n            if (minValue !== null && !isNaN(minValue)) rangeInfo += 'Min: ' + minValue;\r\n            if (maxValue !== null && !isNaN(maxValue)) {\r\n                if (rangeInfo) rangeInfo += ', ';\r\n                rangeInfo += 'Max: ' + maxValue;\r\n            }\r\n            result.message = 'Value ' + resultValue + ' is outside acceptable range (' + rangeInfo + ')';\r\n        }\r\n        \r\n    } catch (error) {\r\n        result.status = 'ERROR';\r\n        result.message = 'Validation error: ' + error.message;\r\n        console.error('Validation error for parameter ' + param.parameter + ':', error);\r\n    }\r\n    \r\n    return result;\r\n}\r\nfunction initialize_validation_styles() {\r\n    // Use jQuery document ready instead of frappe.ready\r\n    $(document).ready(function() {\r\n        // Remove any existing validation styles first\r\n        $('#validation-styles').remove();\r\n        \r\n        // Add improved validation styles\r\n        $('<style id=\"validation-styles\">')\r\n            .prop('type', 'text/css')\r\n            .html(\r\n                '/* COA AMB Validation Styles */\\n' +\r\n                '.frappe-control[data-fieldname=\"result_value\"] input.validation-pass {\\n' +\r\n                '    background-color: #d4edda !important;\\n' +\r\n                '    border-color: #28a745 !important;\\n' +\r\n                '    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25) !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_value\"] input.validation-fail {\\n' +\r\n                '    background-color: #f8d7da !important;\\n' +\r\n                '    border-color: #dc3545 !important;\\n' +\r\n                '    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input[readonly] {\\n' +\r\n                '    background-color: #f8f9fa !important;\\n' +\r\n                '    font-weight: bold;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-pass-text {\\n' +\r\n                '    color: #28a745 !important;\\n' +\r\n                '    background-color: #d4edda !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-fail-text {\\n' +\r\n                '    color: #dc3545 !important;\\n' +\r\n                '    background-color: #f8d7da !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-pending-text {\\n' +\r\n                '    color: #ffc107 !important;\\n' +\r\n                '    background-color: #fff3cd !important;\\n' +\r\n                '}\\n' +\r\n                '/* Ensure no accumulation of visual elements */\\n' +\r\n                '.validation-indicator {\\n' +\r\n                '    display: inline-block;\\n' +\r\n                '    margin-left: 5px;\\n' +\r\n                '}'\r\n            )\r\n            .appendTo('head');\r\n        \r\n        console.log('COA AMB validation styles initialized');\r\n    });\r\n}\r\n\r\n// =====================\r\n// VALIDATION FUNCTIONS\r\n// =====================\r\n\r\nfunction validate_tds_compliance_fixed(frm) {\r\n    console.log('=== STARTING TDS COMPLIANCE VALIDATION ===');\r\n    \r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No parameters to validate'));\r\n        return;\r\n    }\r\n    \r\n    // CRITICAL: Force refresh all form data before validation\r\n    frm.refresh_fields();\r\n    \r\n    // Get fresh data from the grid\r\n    var grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    var current_data = [];\r\n    \r\n    if (grid && grid.grid_rows) {\r\n        grid.grid_rows.forEach(function(grid_row, index) {\r\n            if (grid_row.doc) {\r\n                current_data.push(grid_row.doc);\r\n            }\r\n        });\r\n    } else {\r\n        current_data = frm.doc.coa_quality_test_parameter;\r\n    }\r\n    \r\n    console.log('Total parameters to validate:', current_data.length);\r\n    \r\n    var validation_results = {\r\n        total: current_data.length,\r\n        passed: 0,\r\n        failed: 0,\r\n        pending: 0,\r\n        skipped: 0,\r\n        title_rows: 0,\r\n        issues: []\r\n    };\r\n    \r\n    current_data.forEach(function(param, index) {\r\n        console.log('\\n--- Validating Row ' + (index + 1) + ': ' + param.parameter + ' ---');\r\n        console.log('Raw data:', {\r\n            parameter: param.parameter,\r\n            result_value: param.result_value,\r\n            min_value: param.min_value,\r\n            max_value: param.max_value,\r\n            numeric: param.numeric,\r\n            specification: param.specification\r\n        });\r\n        \r\n        // Skip title rows\r\n        if (is_title_row(param)) {\r\n            console.log('Skipping title row');\r\n            validation_results.skipped++;\r\n            validation_results.title_rows++;\r\n            \r\n            // Set result text to empty for title rows\r\n            param.result_text = '';\r\n            param.result_status = 'N/A';\r\n            \r\n            return;\r\n        }\r\n        \r\n        var result = validate_parameter_compliance_fixed(param, index);\r\n        console.log('Validation result:', result);\r\n        \r\n        if (result.status === 'PASS') validation_results.passed++;\r\n        else if (result.status === 'FAIL') validation_results.failed++;\r\n        else validation_results.pending++;\r\n        \r\n        if (result.issues.length > 0) {\r\n            validation_results.issues = validation_results.issues.concat(result.issues);\r\n        }\r\n        \r\n        // Update the parameter result\r\n        param.result_text = result.status;\r\n        update_parameter_result(frm, param, result.status);\r\n    });\r\n    \r\n    console.log('=== VALIDATION COMPLETE ===');\r\n    console.log('Results:', validation_results);\r\n    \r\n    // Update the document validation status\r\n    update_document_validation_status(frm, validation_results);\r\n    \r\n    // Refresh the form after updating results\r\n    frm.refresh_field('coa_quality_test_parameter');\r\n    \r\n    show_compliance_results(validation_results, frm);\r\n}\r\n\r\nfunction validate_parameter_compliance_fixed(param, index) {\r\n    var result = {\r\n        status: 'PENDING',\r\n        issues: []\r\n    };\r\n    \r\n    // Skip title rows\r\n    if (is_title_row(param)) {\r\n        result.status = 'SKIPPED';\r\n        return result;\r\n    }\r\n    \r\n    // Check if result value is provided\r\n    var resultValue = param.result_value;\r\n    console.log('  Result value: \"' + resultValue + '\" (type: ' + (typeof resultValue) + ')');\r\n    \r\n    if (resultValue === null || resultValue === undefined || resultValue === '') {\r\n        result.status = 'PENDING';\r\n        result.issues.push('Row ' + (index + 1) + ': No result value entered');\r\n        console.log('  Status: PENDING (no result value)');\r\n        return result;\r\n    }\r\n    \r\n    // Get Acceptance Criteria Value (this is the 'value' field, not 'specification')\r\n    var acceptanceCriteria = param.value || '';\r\n    console.log('  Acceptance Criteria: \"' + acceptanceCriteria + '\"');\r\n    \r\n    // SPECIAL CASE: Handle \"NEGATIVE\" specifications (like for Coliforms, Pathogens)\r\n    if (acceptanceCriteria.toUpperCase().includes('NEGATIVE')) {\r\n        var resultStr = resultValue.toString().toUpperCase().trim();\r\n        if (resultStr === 'NEGATIVE' || resultStr === 'NEG'  || resultStr === 'NONE' || resultStr === '0' ) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (negative test result)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Expected negative result but got \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (not negative)');\r\n        }\r\n        return result;\r\n    }\r\n        if (acceptanceCriteria.toUpperCase().includes('NONE')) {\r\n        var resultStr = resultValue.toString().toUpperCase().trim();\r\n        if (resultStr === 'NONE' || resultStr === '0' ) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (negative test result)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Expected negative result but got \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (not negative)');\r\n        }\r\n        return result;\r\n    }\r\n    // SPECIAL CASE: Handle \"NOT DETECTABLE\" specifications\r\n    if (acceptanceCriteria.toUpperCase().includes('NOT DETECTABLE')) {\r\n        var resultNum = parseFloat(resultValue);\r\n        var lodMatch = acceptanceCriteria.match(/LOD\\s*([0-9.]+)/i);\r\n        var lodValue = lodMatch ? parseFloat(lodMatch[1]) : 0;\r\n        \r\n        if (!isNaN(resultNum) && resultNum < lodValue) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (below detection limit)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Value \"' + resultValue + '\" should be below LOD of ' + lodValue);\r\n            console.log('  Status: FAIL (above detection limit)');\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    // Determine if this should be treated as numeric\r\n    var minVal = param.min_value;\r\n    var maxVal = param.max_value;\r\n    var hasNumericConstraints = (minVal !== null && minVal !== undefined && minVal !== '') || \r\n                                  (maxVal !== null && maxVal !== undefined && maxVal !== '');\r\n    \r\n    console.log('  Min: ' + minVal + ', Max: : ' + maxVal + ', Has numeric constraints: ' + hasNumericConstraints);\r\n    \r\n    if (hasNumericConstraints) {\r\n        // NUMERIC VALIDATION (including negative values)\r\n        var resultNum = parseFloat(resultValue);\r\n        var minNum = minVal !== null && minVal !== undefined && minVal !== '' ? parseFloat(minVal) : null;\r\n        var maxNum = maxVal !== null && maxVal !== undefined && maxVal !== '' ? parseFloat(maxVal) : null;\r\n        \r\n        console.log('  Parsed values - Result: ' + resultNum + ', Min: ' + minNum + ', Max: ' + maxNum);\r\n        \r\n        // Check if result is a valid number (including negative values)\r\n        if (isNaN(resultNum)) {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Invalid numeric result value \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (invalid number)');\r\n            return result;\r\n        }\r\n        \r\n        // SPECIAL CASE: Handle \"must be exactly 0\" (both min and max are 0)\r\n        if (minNum === 0 && maxNum === 0) {\r\n            if (resultNum === 0) {\r\n                result.status = 'PASS';\r\n                console.log('  Status: PASS (exactly 0 as required)');\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.issues.push('Row ' + (index + 1) + ': Value ' + resultNum + ' is not 0 (required range: 0 - 0)');\r\n                console.log('  Status: FAIL (not 0 when range is 0-0)');\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Check range constraints (handles negative values correctly)\r\n        var withinRange = true;\r\n        var constraintMessages = [];\r\n        \r\n        // Check minimum value (handles negative values)\r\n        if (minVal !== null && minVal !== undefined && minVal !== '' && !isNaN(minNum)) {\r\n            if (resultNum < minNum) {\r\n                withinRange = false;\r\n                constraintMessages.push('Result ' + resultNum + ' below minimum ' + minNum);\r\n            }\r\n        }\r\n        \r\n        // Check maximum value (handles negative values)\r\n        if (maxVal !== null && maxVal !== undefined && maxVal !== '' && !isNaN(maxNum)) {\r\n            if (resultNum > maxNum) {\r\n                withinRange = false;\r\n                constraintMessages.push('Result ' + resultNum + ' above maximum ' + maxNum);\r\n            }\r\n        }\r\n        \r\n        if (withinRange) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (within range)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': ' + constraintMessages.join(', '));\r\n            console.log('  Status: FAIL (' + constraintMessages.join(', ') + ')');\r\n        }\r\n        \r\n    } else {\r\n        // NON-NUMERIC VALIDATION - Check against acceptance criteria\r\n        console.log('  Acceptance Criteria: \"' + acceptanceCriteria + '\"');\r\n        \r\n        if (acceptanceCriteria && acceptanceCriteria.trim() !== '') {\r\n            // Compare result with acceptance criteria (case-insensitive)\r\n            var resultStr = resultValue.toString().toLowerCase().trim();\r\n            var criteriaStr = acceptanceCriteria.toString().toLowerCase().trim();\r\n            \r\n            console.log('  Comparing: \"' + resultStr + '\" vs \"' + criteriaStr + '\"');\r\n            \r\n            if (resultStr === criteriaStr) {\r\n                result.status = 'PASS';\r\n                console.log('  Status: PASS (matches acceptance criteria)');\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.issues.push('Row ' + (index + 1) + ': Result \"' + resultValue + '\" doesn\\'t match acceptance criteria \"' + acceptanceCriteria + '\"');\r\n                console.log('  Status: FAIL (doesn\\'t match acceptance criteria)');\r\n            }\r\n        } else {\r\n            // No acceptance criteria to compare against - auto-pass if value exists\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (no acceptance criteria, value exists)');\r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\n// Enhanced function to check if a row is a title/header\r\nfunction is_title_row(param) {\r\n    if (!param) return false;\r\n    \r\n    // Check explicit title row flag from TDS\r\n    if (param.is_title_row === 1) {\r\n        return true;\r\n    }\r\n    \r\n    // Check if parameter name suggests it's a title\r\n    if (param.parameter) {\r\n        var paramLower = param.parameter.toLowerCase();\r\n        if (paramLower.includes('title') || \r\n            paramLower.includes('header') || \r\n            paramLower.includes('section') ||\r\n            paramLower === 'organoleptic' ||\r\n            paramLower === 'physicochemical' ||\r\n            paramLower === 'microbiological' ||\r\n            paramLower === 'other analysis' ||\r\n            paramLower.includes('---') ||\r\n            paramLower.includes('***') ||\r\n            paramLower.includes('===')) {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    // Check if it has no validation criteria (no min/max/specification)\r\n    var hasMinMax = (param.min_value !== null && param.min_value !== undefined && param.min_value !== '') ||\r\n                      (param.max_value !== null && param.max_value !== undefined && param.max_value !== '');\r\n    var hasSpec = param.specification && param.specification.trim() !== '';\r\n    \r\n    if (!hasMinMax && !hasSpec) {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nfunction update_document_validation_status(frm, validation_results) {\r\n    var validation_status = 'Non-Compliant';\r\n    var overall_status = 'FAIL';\r\n    \r\n    if (validation_results.failed === 0 && validation_results.passed > 0) {\r\n        validation_status = 'Compliant';\r\n        overall_status = 'PASS';\r\n    } else if (validation_results.pending > 0 && validation_results.failed === 0) {\r\n        validation_status = 'Pending Review';\r\n        overall_status = 'PENDING';\r\n    } else if (validation_results.passed === 0 && validation_results.failed === 0 && validation_results.pending === 0) {\r\n        validation_status = 'Not Started';\r\n        overall_status = 'PENDING';\r\n    }\r\n    \r\n    console.log('Setting validation status to:', validation_status);\r\n    \r\n    // Update the document fields - check if fields exist first\r\n    if (frm.fields_dict.validation_status) {\r\n        frm.set_value('validation_status', validation_status);\r\n    } else {\r\n        console.warn('validation_status field not found in doctype');\r\n    }\r\n    \r\n    if (frm.fields_dict.overall_compliance_status) {\r\n        frm.set_value('overall_compliance_status', overall_status);\r\n    } else {\r\n        console.warn('overall_compliance_status field not found in doctype');\r\n    }\r\n    \r\n    // Save the document to persist the validation status\r\n    frm.save().then(function() {\r\n        console.log('Document validation status updated and saved to:', validation_status);\r\n        \r\n        // If validation passed, refresh the form to show the Submit button\r\n        if (validation_status === 'Compliant') {\r\n            console.log('Validation compliant - setting up submit button');\r\n            \r\n            // Multiple approaches to ensure button appears\r\n            setTimeout(function() {\r\n                console.log('Refreshing form for submit button...');\r\n                frm.refresh();\r\n            }, 500);\r\n            \r\n            setTimeout(function() {\r\n                console.log('Setting up form buttons...');\r\n                setup_form_buttons(frm);\r\n            }, 1000);\r\n            \r\n            setTimeout(function() {\r\n                console.log('Final button setup...');\r\n                setup_form_buttons(frm);\r\n            }, 1500);\r\n        }\r\n    }).catch(function(error) {\r\n        console.error('Error saving document:', error);\r\n        // Handle case where fields don't exist\r\n        if (error.message && error.message.includes('validation_status')) {\r\n            frappe.msgprint({\r\n                title: __('Field Missing'),\r\n                message: __('The validation_status field is missing from the COA AMB doctype. Please add it to enable full functionality.'),\r\n                indicator: 'red'\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction show_compliance_results(results, frm) {\r\n    var message = '<div style=\"margin: 10px 0;\">' +\r\n        '<h4>📊 TDS Compliance Results</h4>' +\r\n        '<p><strong>Total Rows:</strong> ' + results.total + '</p>' +\r\n        '<p><strong>✅ PASS:</strong> <span style=\"color: green;\">' + results.passed + '</span></p>' +\r\n        '<p><strong>❌ FAIL:</strong> <span style=\"color: red;\">' + results.failed + '</span></p>' +\r\n        '<p><strong>⏳ PENDING:</strong> <span style=\"color: orange;\">' + results.pending + '</span></p>' +\r\n        '<p><strong>📋 TITLE ROWS:</strong> <span style=\"color: blue;\">' + results.title_rows + '</span></p>' +\r\n        '<p><strong>🚫 SKIPPED:</strong> <span style=\"color: gray;\">' + results.skipped + '</span></p>' +\r\n        '</div>';\r\n    \r\n    if (results.issues.length > 0) {\r\n        message += '<div style=\"margin: 10px 0;\"><h5>🔍 Validation Issues:</h5><ul style=\"max-height: 200px; overflow-y: auto;\">';\r\n        results.issues.forEach(function(issue) {\r\n            message += '<li>' + issue + '</li>';\r\n        });\r\n        message += '</ul></div>';\r\n    } else {\r\n        // Show success message when there are no issues\r\n        message += '<div style=\"margin: 10px 0; padding: 10px; background-color: #d4edda; border-radius: 5px; border: 1px solid #c3e6cb;\">' +\r\n                   '<h5 style=\"color: #155724; margin: 0;\">✅ All parameters passed validation successfully!</h5>' +\r\n                   '</div>';\r\n    }\r\n    \r\n    // Calculate overall status\r\n    var validatedCount = results.passed + results.failed + results.pending;\r\n    var overallStatus = 'PASS';\r\n    var indicator = 'green';\r\n    \r\n    if (results.failed > 0) {\r\n        overallStatus = 'FAIL';\r\n        indicator = 'red';\r\n    } else if (results.pending > 0 && validatedCount > 0) {\r\n        overallStatus = 'PENDING';\r\n        indicator = 'orange';\r\n    }\r\n    \r\n    message += '<div style=\"background-color: ' + getStatusColor(indicator) + '; ' +\r\n                'padding: 10px; border-radius: 5px; margin: 10px 0;\">' +\r\n                '<h4>Overall Status: <span style=\"color: ' + indicator + ';\">' + overallStatus + '</span></h4>' +\r\n                '</div>';\r\n    \r\n    // Add submit instructions if all validations pass\r\n    if (results.failed === 0 && results.passed > 0) {\r\n        message += '<div style=\"margin: 10px 0; padding: 10px; background-color: #d1ecf1; border-radius: 5px; border: 1px solid #bee5eb;\">' +\r\n                   '<h5 style=\"color: #0c5460; margin: 0;\">📝 Next Steps:</h5>' +\r\n                   '<p style=\"margin: 5px 0 0 0; color: #0c5460;\">All parameters are compliant. The \"Submit COA\" button is now available for submission.</p>' +\r\n                   '</div>';\r\n        \r\n        // Force multiple refreshes to ensure button appears\r\n        setTimeout(function() {\r\n            console.log('First refresh after compliance results...');\r\n            frm.refresh();\r\n        }, 500);\r\n        \r\n        setTimeout(function() {\r\n            console.log('Second refresh and button setup...');\r\n            setup_form_buttons(frm);\r\n        }, 1000);\r\n        \r\n        setTimeout(function() {\r\n            console.log('Final button setup...');\r\n            setup_form_buttons(frm);\r\n        }, 1500);\r\n    }\r\n    \r\n    frappe.msgprint({\r\n        title: __('TDS Compliance Validation'),\r\n        message: message,\r\n        indicator: indicator\r\n    });\r\n}\r\n\r\nfunction submit_coa_document(frm) {\r\n    frappe.confirm(\r\n        __('Are you sure you want to submit this COA? This will start the approval workflow.'),\r\n        function() {\r\n            // Show loading indicator\r\n            frappe.show_alert({ message: __('Submitting COA and starting workflow...'), indicator: 'blue' });\r\n            \r\n            // Call server method to submit and start workflow\r\n            frappe.call({\r\n                method: 'erpnext.quality_management.doctype.coa_amb.coa_amb.submit_and_start_workflow',\r\n                args: {\r\n                    docname: frm.doc.name\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.success) {\r\n                        frappe.show_alert({\r\n                            message: __('COA submitted successfully! Workflow has been started.'),\r\n                            indicator: 'green'\r\n                        });\r\n                        \r\n                        // Reload the form to show the new status\r\n                        frm.reload_doc();\r\n                    } else {\r\n                        frappe.msgprint({\r\n                            title: __('Submission Failed'),\r\n                            message: __('Error submitting COA: ') + (r.message.error || 'Unknown error'),\r\n                            indicator: 'red'\r\n                        });\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    frappe.msgprint({\r\n                        title: __('Submission Error'),\r\n                        message: __('Network error: ') + err.message,\r\n                        indicator: 'red'\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        function() {\r\n            // Cancel action\r\n            console.log('COA submission cancelled');\r\n        }\r\n    );\r\n}\r\n\r\n// =====================\r\n// LOAD TDS PARAMETERS (ENHANCED WITH COMPLETE FIELD MAPPING)\r\n// =====================\r\n\r\nfunction load_tds_parameters_enhanced(frm) {\r\n    console.log('Load TDS Parameters button clicked');\r\n    \r\n    if (!frm.doc.linked_tds) {\r\n        frappe.msgprint({\r\n            title: __('TDS Required'),\r\n            message: __('Please select a TDS Product Specification first'),\r\n            indicator: 'red'\r\n        });\r\n        return;\r\n    }\r\n    \r\n    if (!frm.doc.name) {\r\n        frappe.confirm(\r\n            __('Document must be saved before loading parameters. Save now?'),\r\n            function() {\r\n                frm.save().then(function() {\r\n                    execute_parameter_loading(frm);\r\n                });\r\n            }\r\n        );\r\n        return;\r\n    }\r\n    \r\n    execute_parameter_loading(frm);\r\n}\r\n\r\nfunction execute_parameter_loading(frm) {\r\n    console.log('Executing parameter loading for TDS:', frm.doc.linked_tds);\r\n    \r\n    var loading_dialog = frappe.show_progress(\r\n        __('Loading Parameters'),\r\n        __('Fetching parameters from TDS...'),\r\n        0\r\n    );\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'TDS Product Specification',\r\n            name: frm.doc.linked_tds\r\n        },\r\n        callback: function(r) {\r\n            loading_dialog.hide();\r\n            \r\n            if (r.message) {\r\n                process_tds_parameters(r.message, frm);\r\n                \r\n                frappe.show_alert({\r\n                    message: __('✅ Successfully loaded parameters from TDS'),\r\n                    indicator: 'green'\r\n                });\r\n                \r\n            } else {\r\n                frappe.msgprint({\r\n                    title: __('Loading Failed'),\r\n                    message: __('Could not load TDS parameters'),\r\n                    indicator: 'red'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction process_tds_parameters(tds_doc, frm) {\r\n    if (!tds_doc.item_quality_inspection_parameter || tds_doc.item_quality_inspection_parameter.length === 0) {\r\n        frappe.msgprint({\r\n            title: __('No Parameters'),\r\n            message: __('No parameters found in the selected TDS'),\r\n            indicator: 'orange'\r\n        });\r\n        return;\r\n    }\r\n    \r\n    // Clear existing parameters\r\n    frm.clear_table('coa_quality_test_parameter');\r\n    \r\n    // Add parameters from TDS\r\n    tds_doc.item_quality_inspection_parameter.forEach(function(tds_param) {\r\n        var row = frm.add_child('coa_quality_test_parameter');\r\n        \r\n        // Map ALL TDS fields to COA fields - FIXED zero handling\r\n        row.parameter = tds_param.parameter || 'Parameter';\r\n        row.specification = tds_param.specification || '';\r\n        row.parameter_group = tds_param.parameter_group || '';\r\n        row.value = tds_param.value || '';\r\n        row.custom_uom = tds_param.custom_uom || '';\r\n        row.numeric = tds_param.numeric || 0;\r\n        row.custom_reconstituted_to_05_total_solids_solution = tds_param.custom_reconstituted_to_05_total_solids_solution || 0;\r\n        row.is_title_row = tds_param.custom_is_title_row || 0;\r\n        \r\n        // FIX: Proper handling of zero values for min/max\r\n        row.min_value = (tds_param.min_value !== null && tds_param.min_value !== undefined) ? tds_param.min_value : null;\r\n        row.max_value = (tds_param.max_value !== null && tds_param.max_value !== undefined) ? tds_param.max_value : null;\r\n        \r\n        row.method = tds_param.custom_method || '';\r\n        row.formula_based_criteria = tds_param.formula_based_criteria || 0;\r\n        row.acceptance_formula = tds_param.acceptance_formula || '';\r\n        \r\n        // Initialize result fields\r\n        if (is_title_row(row)) {\r\n            row.result_text = '';\r\n            row.result_value = '';\r\n            row.result_status = 'N/A';\r\n            row.numeric = 0;\r\n        } else {\r\n            row.result_text = 'PENDING';\r\n            row.result_value = '';\r\n            row.result_status = 'Pending';\r\n        }\r\n    });\r\n    \r\n    frm.refresh_field('coa_quality_test_parameter');\r\n}\r\n\r\n// =====================\r\n// DEBUG FUNCTIONS\r\n// =====================\r\n\r\nfunction debug_current_values_detailed(frm) {\r\n    console.log('=== DETAILED DEBUG OUTPUT (INCLUDING NEGATIVE VALUES) ===');\r\n    \r\n    // Check form document data\r\n    console.log('Form document data:');\r\n    if (frm.doc.coa_quality_test_parameter) {\r\n        frm.doc.coa_quality_test_parameter.forEach(function(param, index) {\r\n            console.log('Row ' + (index + 1) + ' (form doc):', {\r\n                parameter: param.parameter,\r\n                result_value: param.result_value,\r\n                result_value_type: typeof param.result_value,\r\n                min_value: param.min_value,\r\n                min_value_type: typeof param.min_value,\r\n                max_value: param.max_value,\r\n                max_value_type: typeof param.max_value,\r\n                numeric: param.numeric,\r\n                specification: param.specification,\r\n                result_text: param.result_text,\r\n                // Additional debug for negative values\r\n                has_negative_min: param.min_value < 0,\r\n                has_negative_max: param.max_value < 0,\r\n                has_negative_result: parseFloat(param.result_value) < 0\r\n            });\r\n        });\r\n    }\r\n    \r\n    console.log('Current validation status:', frm.doc.validation_status);\r\n    console.log('Current docstatus:', frm.doc.docstatus);\r\n    console.log('=== DEBUG COMPLETE ===');\r\n    \r\n    frappe.msgprint({\r\n        title: __('Debug Complete'),\r\n        message: __('Check browser console for detailed output including negative value analysis'),\r\n        indicator: 'blue'\r\n    });\r\n}\r\n\r\n// =====================\r\n// UTILITY FUNCTIONS\r\n// =====================\r\n\r\nfunction update_parameter_result(frm, param, status) {\r\n    param.result_text = status;\r\n    \r\n    // Apply styling based on row type\r\n    var grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    if (grid) {\r\n        var row = grid.grid_rows_by_docname[param.name];\r\n        if (row) {\r\n            var $row = $(row.row);\r\n            $row.removeClass('parameter-pass parameter-fail parameter-pending parameter-title');\r\n            \r\n            if (is_title_row(param)) {\r\n                $row.addClass('parameter-title');\r\n            } else {\r\n                switch(status) {\r\n                    case 'PASS': $row.addClass('parameter-pass'); break;\r\n                    case 'FAIL': $row.addClass('parameter-fail'); break;\r\n                    case 'PENDING': $row.addClass('parameter-pending'); break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getStatusColor(indicator) {\r\n    var colors = {\r\n        'green': '#d4edda',\r\n        'red': '#f8d7da', \r\n        'orange': '#fff3cd',\r\n        'blue': '#cce5ff',\r\n        'gray': '#e2e3e5'\r\n    };\r\n    return colors[indicator] || '#f8f9fa';\r\n}\r\n\r\nfunction clear_parameters_with_confirmation(frm) {\r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No parameters to clear'));\r\n        return;\r\n    }\r\n    \r\n    frappe.confirm(\r\n        __('Are you sure you want to clear all {0} parameters?', [frm.doc.coa_quality_test_parameter.length]),\r\n        function() {\r\n            frm.clear_table('coa_quality_test_parameter');\r\n            frm.refresh_field('coa_quality_test_parameter');\r\n            frappe.show_alert({\r\n                message: __('All parameters cleared'),\r\n                indicator: 'orange'\r\n            });\r\n        }\r\n    );\r\n}\r\n\r\nfunction apply_enhanced_styles() {\r\n    if (!document.getElementById('coa-amb-enhanced-styles')) {\r\n        var style = document.createElement('style');\r\n        style.id = 'coa-amb-enhanced-styles';\r\n        style.textContent = \r\n            '.parameter-pass {' +\r\n            '    background-color: #d4edda !important;' +\r\n            '    border-left: 4px solid #28a745 !important;' +\r\n            '}' +\r\n            '.parameter-fail {' +\r\n            '    background-color: #f8d7da !important;' +\r\n            '    border-left: 4px solid #dc3545 !important;' +\r\n            '}' +\r\n            '.parameter-pending {' +\r\n            '    background-color: #fff3cd !important;' +\r\n            '    border-left: 4px solid #ffc107 !important;' +\r\n            '}' +\r\n            '.parameter-title {' +\r\n            '    background-color: #e9ecef !important;' +\r\n            '    border-left: 4px solid #6c757d !important;' +\r\n            '    font-style: italic;' +\r\n            '}';\r\n        document.head.appendChild(style);\r\n    }\r\n}\r\n\r\n// Initialize styles\r\napply_enhanced_styles();\r\n\r\nconsole.log('COA AMB Enhanced Client Script with Complete Field Mapping and Fixed Validation loaded successfully');",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COA AMB2",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.103878",
  "module": "amb_w_tds",
  "name": "hello_world_test",
  "script": "// CORRECT Client Script for Frappe v15\r\nfrappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        // Test buttons\r\n        frm.add_custom_button(__('Test Server Script'), function() {\r\n            test_server_script();\r\n        }).addClass('btn-success');\r\n        \r\n        frm.add_custom_button(__('Test TDS Load'), function() {\r\n            test_tds_load(frm);\r\n        }).addClass('btn-primary');\r\n        \r\n        frm.add_custom_button(__('Direct Console Test'), function() {\r\n            direct_console_test();\r\n        }).addClass('btn-info');\r\n    }\r\n});\r\n\r\n// Method 1: Using frappe.call with correct method path\r\nfunction test_server_script() {\r\n    console.group('🧪 Testing Server Script');\r\n    console.log('Testing with frappe.call...');\r\n    \r\n    frappe.call({\r\n        method: 'hello_world_test',\r\n        args: {},\r\n        callback: function(r) {\r\n            console.log('Server response:', r);\r\n            \r\n            if (r.message) {\r\n                console.log('✅ Response received');\r\n                console.log('Message:', r.message);\r\n                \r\n                if (r.message.success) {\r\n                    frappe.show_alert({\r\n                        message: __('✅ {0}', [r.message.message]),\r\n                        indicator: 'green'\r\n                    });\r\n                } else {\r\n                    frappe.msgprint({\r\n                        title: __('Error'),\r\n                        message: __('Server script error: ') + (r.message.message || 'Unknown'),\r\n                        indicator: 'red'\r\n                    });\r\n                }\r\n            } else {\r\n                console.error('❌ No message in response');\r\n                frappe.msgprint({\r\n                    title: __('Error'),\r\n                    message: __('No response from server script'),\r\n                    indicator: 'red'\r\n                });\r\n            }\r\n            console.groupEnd();\r\n        },\r\n        error: function(err) {\r\n            console.error('❌ Call error:', err);\r\n            frappe.msgprint({\r\n                title: __('Network Error'),\r\n                message: __('Could not connect to server script. Please check script name and configuration.'),\r\n                indicator: 'red'\r\n            });\r\n            console.groupEnd();\r\n        }\r\n    });\r\n}\r\n\r\n// Method 2: Test TDS loading\r\nfunction test_tds_load(frm) {\r\n    if (!frm.doc.linked_tds) {\r\n        frappe.msgprint(__('Please select a TDS first'));\r\n        return;\r\n    }\r\n    \r\n    frappe.call({\r\n        method: 'load_tds_parameters_api.load_tds_parameters',\r\n        args: {\r\n            coa_name: frm.doc.name || 'test_coa',\r\n            tds_name: frm.doc.linked_tds\r\n        },\r\n        freeze: true,\r\n        freeze_message: __('Loading parameters...'),\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                if (r.message.success) {\r\n                    frappe.show_alert({\r\n                        message: __('✅ {0}', [r.message.message]),\r\n                        indicator: 'green'\r\n                    });\r\n                    if (frm.doc.name) {\r\n                        frm.reload_doc();\r\n                    }\r\n                } else {\r\n                    frappe.msgprint({\r\n                        title: __('Error'),\r\n                        message: __('Failed to load parameters: ') + (r.message.message || 'Unknown error'),\r\n                        indicator: 'red'\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Method 3: Direct test from console\r\nfunction direct_console_test() {\r\n    // This is the code you can run directly in browser console\r\n    console.log('Running direct test...');\r\n    frappe.call({\r\n        method: 'hello_world_test.hello_world',\r\n        callback: function(r) {\r\n            console.log('Direct test result:', r);\r\n        }\r\n    });\r\n}\r\n\r\n// Method 4: Alternative approach - check if server script exists\r\nfunction check_server_script() {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Server Script',\r\n            name: 'hello_world_test'\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                console.log('Server script found:', r.message);\r\n                frappe.show_alert({\r\n                    message: __('Server script exists and is {0}', [r.message.disabled ? 'disabled' : 'enabled']),\r\n                    indicator: 'green'\r\n                });\r\n            } else {\r\n                console.log('Server script not found');\r\n                frappe.msgprint({\r\n                    title: __('Not Found'),\r\n                    message: __('Server script \"hello_world_test\" does not exist'),\r\n                    indicator: 'red'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COA AMB2",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.086048",
  "module": "amb_w_tds",
  "name": "load_tds_parameters_best_practice",
  "script": "// BEST PRACTICE Client Script for TDS Loading\r\nfrappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('📥 Load TDS Parameters (Best Practice)'), function() {\r\n            load_tds_parameters_best_practice(frm);\r\n        }).addClass('btn-primary');\r\n    }\r\n});\r\n\r\nasync function load_tds_parameters_best_practice(frm) {\r\n    if (!frm.doc.linked_tds) {\r\n        frappe.msgprint(__('Please select a TDS first'));\r\n        return;\r\n    }\r\n\r\n    const loading = frappe.show_progress(__('Loading'), __('Fetching parameters...'), 0);\r\n\r\n    try {\r\n        // Option 1: Use client-side processing (Recommended)\r\n        await load_with_client_side(frm);\r\n        \r\n        // Option 2: Use server script if needed\r\n        // await load_with_server_script(frm);\r\n        \r\n    } catch (error) {\r\n        handle_load_error(error);\r\n    } finally {\r\n        loading.hide();\r\n    }\r\n}\r\n\r\n// OPTION 1: Client-side processing (PREFERRED)\r\nasync function load_with_client_side(frm) {\r\n    const result = await frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'TDS Product Specification',\r\n            name: frm.doc.linked_tds,\r\n            fields: [\r\n                'item_quality_inspection_parameter.parameter',\r\n                'item_quality_inspection_parameter.specification',\r\n                'item_quality_inspection_parameter.min_value',\r\n                'item_quality_inspection_parameter.max_value'\r\n            ]\r\n        }\r\n    });\r\n\r\n    if (result.message) {\r\n        process_parameters_client_side(result.message, frm);\r\n    }\r\n}\r\n\r\n// OPTION 2: Server script approach\r\nasync function load_with_server_script(frm) {\r\n    const result = await frappe.call({\r\n        method: 'load_tds_parameters',\r\n        args: {\r\n            coa_name: frm.doc.name || 'new_document',\r\n            tds_name: frm.doc.linked_tds\r\n        }\r\n    });\r\n\r\n    if (result.message && result.message.success) {\r\n        process_server_response(result.message, frm);\r\n    } else {\r\n        throw new Error(result.message?.message || 'Server script failed');\r\n    }\r\n}\r\n\r\nfunction process_parameters_client_side(tds_doc, frm) {\r\n    if (!tds_doc.item_quality_inspection_parameter) {\r\n        throw new Error('No parameters found in TDS');\r\n    }\r\n\r\n    frm.clear_table('coa_quality_test_parameter');\r\n    \r\n    tds_doc.item_quality_inspection_parameter.forEach(param => {\r\n        const row = frm.add_child('coa_quality_test_parameter');\r\n        Object.assign(row, {\r\n            parameter: param.parameter || 'Parameter',\r\n            specification: param.specification || '',\r\n            min_value: param.min_value,\r\n            max_value: param.max_value,\r\n            is_numeric: (param.min_value || param.max_value) ? 1 : 0,\r\n            result_status: 'Pending'\r\n        });\r\n    });\r\n\r\n    frm.refresh_field('coa_quality_test_parameter');\r\n    frappe.show_alert(__('Successfully loaded parameters'), 'green');\r\n}\r\n\r\nfunction process_server_response(response, frm) {\r\n    if (response.parameters) {\r\n        frm.clear_table('coa_quality_test_parameter');\r\n        \r\n        response.parameters.forEach(param => {\r\n            const row = frm.add_child('coa_quality_test_parameter');\r\n            Object.assign(row, param);\r\n        });\r\n\r\n        frm.refresh_field('coa_quality_test_parameter');\r\n    }\r\n    \r\n    frappe.show_alert(response.message, 'green');\r\n}\r\n\r\nfunction handle_load_error(error) {\r\n    console.error('Load error:', error);\r\n    frappe.msgprint({\r\n        title: __('Load Failed'),\r\n        message: __('Error loading parameters: ') + error.message,\r\n        indicator: 'red'\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch AMB",
  "enabled": 0,
  "modified": "2025-10-24 11:52:39.047801",
  "module": "amb_w_tds",
  "name": "batch_amb_old",
  "script": "// Batch AMB Client Script - Proper Nested Set Implementation\r\n// This version prevents self-referencing and handles level changes correctly\r\n\r\nfrappe.ui.form.on('Batch AMB', {\r\n    onload: function(frm) {\r\n        console.log('Batch AMB form loaded');\r\n        \r\n        // Set default values when creating new document\r\n        if (frm.is_new()) {\r\n            frm.set_value('custom_batch_level', '1');\r\n            frm.set_value('is_group', 1);\r\n        }\r\n    },\r\n    \r\n    refresh: function(frm) {\r\n        // Auto-generate batch code when all required fields are filled\r\n        if (should_auto_generate(frm)) {\r\n            generate_batch_code(frm);\r\n        }\r\n        \r\n        // Add custom buttons for creating sublots\r\n        if (!frm.is_new() && frm.doc.custom_batch_level == '1') {\r\n            frm.add_custom_button(__('Create Sublot'), function() {\r\n                create_sublot_batch(frm);\r\n            });\r\n        }\r\n    },\r\n    \r\n    work_order_ref: function(frm) {\r\n        if (frm.doc.work_order_ref) {\r\n            fetch_work_order_data(frm);\r\n        }\r\n    },\r\n    \r\n    custom_batch_level: function(frm) {\r\n        console.log('Batch Level changed to:', frm.doc.custom_batch_level);\r\n        \r\n        // Prevent changing level of existing documents\r\n        if (!frm.is_new()) {\r\n            frappe.msgprint('Cannot change batch level of existing documents. Create a new document for different levels.');\r\n            frm.set_value('custom_batch_level', frm.doc.__original_level || '1');\r\n            return;\r\n        }\r\n        \r\n        // Clear parent when changing to level 1\r\n        if (frm.doc.custom_batch_level == '1') {\r\n            frm.set_value('parent_batch_amb', '');\r\n            frm.set_value('is_group', 1);\r\n        } else {\r\n            frm.set_value('is_group', 0);\r\n        }\r\n        \r\n        // Auto-generate batch code when level changes\r\n        if (should_auto_generate(frm)) {\r\n            generate_batch_code(frm);\r\n        }\r\n    },\r\n    \r\n    parent_batch_amb: function(frm) {\r\n        console.log('Parent Batch selected:', frm.doc.parent_batch_amb);\r\n        \r\n        // Prevent self-referencing\r\n        if (frm.doc.parent_batch_amb === frm.doc.name) {\r\n            frappe.msgprint('A batch cannot be its own parent');\r\n            frm.set_value('parent_batch_amb', '');\r\n            return;\r\n        }\r\n        \r\n        // Auto-generate batch code when parent is selected\r\n        if (frm.doc.parent_batch_amb && should_auto_generate(frm)) {\r\n            generate_batch_code(frm);\r\n        }\r\n    },\r\n    \r\n    before_save: function(frm) {\r\n        console.log('Before save validation');\r\n        \r\n        // Prevent self-referencing\r\n        if (frm.doc.parent_batch_amb === frm.doc.name) {\r\n            frappe.throw('A batch cannot be its own parent');\r\n            return false;\r\n        }\r\n        \r\n        // Validate batch level and parent relationship\r\n        if (frm.doc.custom_batch_level > '1' && !frm.doc.parent_batch_amb) {\r\n            frappe.throw('Parent Batch AMB is required for level ' + frm.doc.custom_batch_level);\r\n            return false;\r\n        }\r\n        \r\n        // Store original level for preventing changes\r\n        if (!frm.doc.__original_level) {\r\n            frm.doc.__original_level = frm.doc.custom_batch_level;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n});\r\n\r\nfunction create_sublot_batch(parent_frm) {\r\n    // Create a new Batch AMB document for sublot\r\n    frappe.new_doc('Batch AMB', {\r\n        'custom_batch_level': '2',\r\n        'parent_batch_amb': parent_frm.doc.name,\r\n        'work_order_ref': parent_frm.doc.work_order_ref,\r\n        'sales_order_related': parent_frm.doc.sales_order_related,\r\n        'production_plant_name': parent_frm.doc.production_plant_name,\r\n        'custom_batch_year': parent_frm.doc.custom_batch_year,\r\n        'custom_plant_code': parent_frm.doc.custom_plant_code,\r\n        'tds_link': parent_frm.doc.tds_link,\r\n        'wo_item_name': parent_frm.doc.wo_item_name,\r\n        'item_to_manufacture': parent_frm.doc.item_to_manufacture,\r\n        'tds_item_name': parent_frm.doc.tds_item_name,\r\n        'is_group': 0\r\n    });\r\n}\r\n\r\nfunction fetch_work_order_data(frm) {\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Work Order',\r\n            name: frm.doc.work_order_ref\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                const wo = r.message;\r\n                \r\n                // Set related fields\r\n                frm.set_value('sales_order_related', wo.sales_order);\r\n                frm.set_value('wo_item_name', wo.item_name);\r\n                frm.set_value('item_to_manufacture', wo.production_item);\r\n                \r\n                // Fetch additional data\r\n                fetch_sales_order_data(frm, wo.sales_order);\r\n                fetch_item_data(frm, wo.production_item);\r\n                \r\n                // Auto-generate batch code after setting work order data\r\n                if (should_auto_generate(frm)) {\r\n                    setTimeout(function() {\r\n                        generate_batch_code(frm);\r\n                    }, 500);\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction fetch_sales_order_data(frm, sales_order) {\r\n    if (!sales_order) return;\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Sales Order',\r\n            name: sales_order\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                // You can set additional fields from sales order if needed\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction fetch_item_data(frm, item_code) {\r\n    if (!item_code) return;\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Item',\r\n            name: item_code\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                const item = r.message;\r\n                \r\n                // Set TDS related fields\r\n                //frm.set_value('tds_link', item.item_custom_product_key_tds);\r\n                //frm.set_value('tds_item_name', item.item_name);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction should_auto_generate(frm) {\r\n    // Check if all required fields are filled for auto-generation\r\n    const required_fields = [\r\n        'work_order_ref',\r\n        'production_plant_name',\r\n        'custom_batch_level'\r\n    ];\r\n    \r\n    for (let field of required_fields) {\r\n        if (!frm.doc[field]) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    console.log('All required fields filled, auto-generating batch code');\r\n    return true;\r\n}\r\n\r\nfunction generate_batch_code(frm) {\r\n    const level = parseInt(frm.doc.custom_batch_level) || 1;\r\n    console.log('Generating batch code for level:', level);\r\n    \r\n    if (level === 1) {\r\n        // Generate base batch code for Level 1\r\n        generate_level_1_batch_code(frm);\r\n    } else {\r\n        // Generate hierarchical batch code for Level 2+\r\n        generate_sublot_batch_code(frm, level);\r\n    }\r\n}\r\n\r\nfunction generate_level_1_batch_code(frm) {\r\n    // Get base components from work order and form data\r\n    get_base_components(frm, function(components) {\r\n        console.log('Base components:', components);\r\n        \r\n        const product_code = components.product_code;\r\n        const consecutive = components.consecutive.toString().padStart(5, '0');\r\n        const plant_code = components.plant_code;\r\n        \r\n        // Generate final batch code: PRODUCTCODE + CONSECUTIVE + PLANTCODE\r\n        const final_batch_code = `${product_code}${consecutive}${plant_code}`;\r\n        \r\n        console.log('Final batch code generated:', final_batch_code);\r\n        \r\n        // Set the generated batch code\r\n        frm.set_value('title', final_batch_code);\r\n        frm.set_value('custom_generated_batch_name', final_batch_code);\r\n        \r\n        // Store business data in custom fields\r\n        frm.set_value('custom_consecutive_number', consecutive);\r\n        frm.set_value('custom_plant_code', plant_code);\r\n        \r\n        frm.refresh_field('title');\r\n        frm.refresh_field('custom_generated_batch_name');\r\n    });\r\n}\r\n\r\nfunction generate_sublot_batch_code(frm, level) {\r\n    if (!frm.doc.parent_batch_amb) {\r\n        console.log('No parent selected for level', level);\r\n        return;\r\n    }\r\n    \r\n    // Prevent self-referencing\r\n    if (frm.doc.parent_batch_amb === frm.doc.name) {\r\n        frappe.msgprint('A batch cannot be its own parent');\r\n        frm.set_value('parent_batch_amb', '');\r\n        return;\r\n    }\r\n    \r\n    // For Level 2+, get the parent's batch name and append sublot number\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            name: frm.doc.parent_batch_amb\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                const parent_batch = r.message;\r\n                const parent_batch_code = parent_batch.title || parent_batch.custom_generated_batch_name;\r\n                \r\n                if (!parent_batch_code) {\r\n                    frappe.msgprint('Parent batch does not have a valid batch code');\r\n                    return;\r\n                }\r\n                \r\n                console.log('Parent batch code:', parent_batch_code);\r\n                \r\n                // Get next consecutive number for this sublot\r\n                get_next_sublot_consecutive(frm, parent_batch_code, function(next_consecutive) {\r\n                    console.log('Next consecutive for level', level, ':', next_consecutive);\r\n                    \r\n                    // Generate sublot code: PARENT_CODE-CONSECUTIVE\r\n                    const final_batch_code = `${parent_batch_code}-${next_consecutive}`;\r\n                    \r\n                    console.log('Final batch code generated:', final_batch_code);\r\n                    \r\n                    // Set the generated batch code\r\n                    frm.set_value('title', final_batch_code);\r\n                    frm.set_value('custom_generated_batch_name', final_batch_code);\r\n                    \r\n                    // Store sublot consecutive number in custom field\r\n                    frm.set_value('custom_sublot_consecutive', next_consecutive);\r\n                    \r\n                    frm.refresh_field('title');\r\n                    frm.refresh_field('custom_generated_batch_name');\r\n                });\r\n            } else {\r\n                frappe.msgprint('Could not fetch parent batch information');\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction get_base_components(frm, callback) {\r\n    // Extract product code from work order or item\r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'Work Order',\r\n            name: frm.doc.work_order_ref\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                const wo = r.message;\r\n                \r\n                // Extract product code (first 4 digits from item code or name)\r\n                let product_code = '';\r\n                if (wo.production_item) {\r\n                    const match = wo.production_item.match(/^(\\d{4})/);\r\n                    product_code = match ? match[1] : '0000';\r\n                } else {\r\n                    product_code = '0000';\r\n                }\r\n                \r\n                // Get consecutive number from work order name\r\n                let consecutive = 1;\r\n                const wo_match = wo.name.match(/(\\d+)$/);\r\n                if (wo_match) {\r\n                    consecutive = parseInt(wo_match[1]);\r\n                }\r\n                \r\n                // Get year and plant code from form\r\n                const year = frm.doc.custom_batch_year || '25';\r\n                const plant_code = frm.doc.custom_plant_code || '1';\r\n                \r\n                callback({\r\n                    product_code: product_code,\r\n                    consecutive: consecutive,\r\n                    year: year,\r\n                    plant_code: plant_code,\r\n                    source: 'work_order'\r\n                });\r\n            } else {\r\n                // Fallback values\r\n                callback({\r\n                    product_code: '0000',\r\n                    consecutive: 1,\r\n                    year: '25',\r\n                    plant_code: '1',\r\n                    source: 'fallback'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction get_next_sublot_consecutive(frm, parent_batch_code, callback) {\r\n    // Find existing sublots for this parent\r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            filters: {\r\n                'parent_batch_amb': frm.doc.parent_batch_amb,\r\n                'name': ['!=', frm.doc.name || '']  // Exclude current document if editing\r\n            },\r\n            fields: ['name', 'title', 'custom_generated_batch_name'],\r\n            limit_page_length: 100\r\n        },\r\n        callback: function(r) {\r\n            let next_consecutive = 1;\r\n            \r\n            if (r.message && r.message.length > 0) {\r\n                // Extract consecutive numbers from existing sublots\r\n                const existing_consecutives = [];\r\n                \r\n                r.message.forEach(function(batch) {\r\n                    const batch_name = batch.title || batch.custom_generated_batch_name || '';\r\n                    \r\n                    // Look for pattern: PARENT_CODE-NUMBER\r\n                    const pattern = new RegExp(`^${parent_batch_code.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}-(\\\\d+)$`);\r\n                    const match = batch_name.match(pattern);\r\n                    \r\n                    if (match) {\r\n                        existing_consecutives.push(parseInt(match[1]));\r\n                    }\r\n                });\r\n                \r\n                // Find the next available consecutive number\r\n                if (existing_consecutives.length > 0) {\r\n                    next_consecutive = Math.max(...existing_consecutives) + 1;\r\n                }\r\n            }\r\n            \r\n            callback(next_consecutive);\r\n        }\r\n    });\r\n}\r\n\r\nconsole.log('Batch AMB client script loaded successfully');\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch AMB",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.806427",
  "module": "amb_w_tds",
  "name": "Global Batch Navbar Widget",
  "script": "// =============================================================================\r\n// ENHANCED BATCH NAVBAR WIDGET - Multi-Company, Multi-Plant, Multi-Batch Support\r\n// Save this as: public/js/batch_navbar_widget.js\r\n// =============================================================================\r\n\r\n// Use proper Frappe event handling\r\nfrappe.provide('frappe.ui');\r\nfrappe.provide('amb.batch_widget');\r\n\r\n// Initialize when page loads\r\n$(document).ready(function() {\r\n    initializeBatchWidget();\r\n});\r\n\r\n// Configuration\r\namb.batch_widget.config = {\r\n    refreshInterval: 60000, // 60 seconds\r\n    autoMinimizeDelay: 45000, // 45 seconds\r\n    widgetWidth: 500,\r\n    plantColors: {\r\n        '1': '#3498db', // Mix Plant - Blue\r\n        '2': '#e74c3c', // Dry Plant - Red\r\n        '3': '#2ecc71', // Juice Plant - Green\r\n        '4': '#f39c12', // Laboratory - Orange\r\n        '5': '#9b59b6'  // Formulated Plant - Purple\r\n    },\r\n    companyColors: {\r\n        'AMB-Wellness': '#1abc9c',\r\n        'Juice': '#3498db',\r\n        'Dry Plant Company': '#e74c3c'\r\n    }\r\n};\r\n\r\nfunction initializeBatchWidget() {\r\n    // Initialize widget only for logged-in users\r\n    if (frappe.session && frappe.session.user !== 'Guest') {\r\n        console.log('Initializing Enhanced Batch Navbar Widget...');\r\n        \r\n        // Wait a bit for Frappe to fully initialize\r\n        setTimeout(function() {\r\n            // Set up auto-refresh\r\n            setInterval(function() {\r\n                update_batch_announcements();\r\n            }, amb.batch_widget.config.refreshInterval);\r\n            \r\n            // Initial load\r\n            update_batch_announcements();\r\n            \r\n            // Add global refresh button to navbar if not exists\r\n            addGlobalRefreshButton();\r\n        }, 3000);\r\n    }\r\n}\r\n\r\n// =============================================================================\r\n// MAIN FUNCTIONS\r\n// =============================================================================\r\n\r\nfunction update_batch_announcements() {\r\n    frappe.call({\r\n        method: 'rnd.amb.js.get_running_batch_announcements',\r\n        args: {\r\n            include_companies: true,\r\n            include_plants: true,\r\n            include_quality: true\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.success) {\r\n                if (r.message.grouped_announcements) {\r\n                    display_grouped_batch_announcements(r.message.grouped_announcements);\r\n                } else if (r.message.announcements && r.message.announcements.length > 0) {\r\n                    display_batch_announcements(r.message.announcements);\r\n                } else {\r\n                    // Hide widget if no running batches\r\n                    $('.batch-announcement-widget').fadeOut();\r\n                }\r\n            } else {\r\n                console.log('No running batches or API error');\r\n                $('.batch-announcement-widget').fadeOut();\r\n            }\r\n        },\r\n        error: function(r) {\r\n            console.error('Error fetching batch announcements:', r);\r\n        }\r\n    });\r\n}\r\n\r\nfunction display_grouped_batch_announcements(groupedData) {\r\n    let announcement_html = '';\r\n    let totalBatches = 0;\r\n    \r\n    // Process by company\r\n    for (const [companyName, companyData] of Object.entries(groupedData)) {\r\n        const companyColor = amb.batch_widget.config.companyColors[companyName] || '#7f8c8d';\r\n        let companyBatches = 0;\r\n        \r\n        announcement_html += `\r\n            <div class=\"company-group\" style=\"margin-bottom: 15px;\">\r\n                <div class=\"company-header\" style=\"\r\n                    display: flex; \r\n                    align-items: center; \r\n                    padding: 8px 12px;\r\n                    background: ${companyColor};\r\n                    color: white;\r\n                    border-radius: 5px;\r\n                    margin-bottom: 10px;\r\n                    font-weight: bold;\r\n                \">\r\n                    <span style=\"margin-right: 8px;\">🏢</span>\r\n                    ${companyName}\r\n                </div>\r\n        `;\r\n        \r\n        // Process by plant\r\n        for (const [plantCode, plantBatches] of Object.entries(companyData)) {\r\n            const plantColor = amb.batch_widget.config.plantColors[plantCode] || '#95a5a6';\r\n            const plantName = getPlantName(plantCode);\r\n            \r\n            announcement_html += `\r\n                <div class=\"plant-group\" style=\"margin-left: 10px; margin-bottom: 12px;\">\r\n                    <div class=\"plant-header\" style=\"\r\n                        display: flex; \r\n                        align-items: center; \r\n                        padding: 6px 10px;\r\n                        background: ${plantColor}22;\r\n                        border-left: 4px solid ${plantColor};\r\n                        border-radius: 3px;\r\n                        margin-bottom: 8px;\r\n                        font-size: 13px;\r\n                    \">\r\n                        <span style=\"margin-right: 6px;\">${getPlantIcon(plantCode)}</span>\r\n                        ${plantName} (Plant ${plantCode})\r\n                    </div>\r\n                    <div class=\"batch-list\">\r\n            `;\r\n            \r\n            // Process batches\r\n            plantBatches.forEach(function(batch, index) {\r\n                companyBatches++;\r\n                totalBatches++;\r\n                \r\n                const priorityColor = batch.priority === 'high' ? '#00ff00' : \r\n                                    batch.priority === 'medium' ? '#ffff00' : '#ff9900';\r\n                const statusIcon = getStatusIcon(batch.status);\r\n                \r\n                announcement_html += `\r\n                    <div class=\"batch-announcement-item\" style=\"\r\n                        margin-bottom: 10px; \r\n                        padding: 10px; \r\n                        background: #f8f9fa; \r\n                        border-radius: 5px;\r\n                        border-left: 4px solid ${priorityColor};\r\n                        font-family: 'Courier New', monospace;\r\n                        position: relative;\r\n                    \">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: flex-start;\">\r\n                            <div style=\"flex: 1;\">\r\n                                <div style=\"font-weight: bold; margin-bottom: 5px; font-size: 13px; color: #2c3e50;\">\r\n                                    ${statusIcon} ${batch.title || 'Batch'} - ${batch.batch_code || ''}\r\n                                </div>\r\n                                <div style=\"font-size: 11px; color: #34495e; margin-bottom: 5px;\">\r\n                                    Item: ${batch.item_code || 'N/A'} | Level: ${batch.level || 'N/A'}\r\n                                </div>\r\n                                <pre style=\"\r\n                                    margin: 0; \r\n                                    font-size: 11px; \r\n                                    white-space: pre-line; \r\n                                    line-height: 1.3;\r\n                                    font-family: inherit;\r\n                                    color: #7f8c8d;\r\n                                \">${batch.content || batch.message || 'No details available'}</pre>\r\n                            </div>\r\n                            <div style=\"\r\n                                background: rgba(0,0,0,0.05);\r\n                                padding: 3px 6px;\r\n                                border-radius: 3px;\r\n                                font-size: 9px;\r\n                                white-space: nowrap;\r\n                                margin-left: 8px;\r\n                            \">\r\n                                ${batch.quality_status || 'Pending'}\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"\r\n                            position: absolute;\r\n                            top: 8px;\r\n                            right: 8px;\r\n                            background: rgba(0,0,0,0.1);\r\n                            padding: 2px 6px;\r\n                            border-radius: 3px;\r\n                            font-size: 9px;\r\n                        \">\r\n                            ${formatTime(batch.modified || batch.creation)}\r\n                        </div>\r\n                    </div>\r\n                `;\r\n            });\r\n            \r\n            announcement_html += `\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n        \r\n        // Add company batch count\r\n        announcement_html = announcement_html.replace('${companyName}', `${companyName} (${companyBatches})`);\r\n        \r\n        announcement_html += `</div>`;\r\n    }\r\n    \r\n    if (announcement_html) {\r\n        show_navbar_widget(announcement_html, totalBatches);\r\n    }\r\n}\r\n\r\nfunction display_batch_announcements(announcements) {\r\n    // Fallback to original display for backward compatibility\r\n    let announcement_html = '';\r\n    \r\n    announcements.forEach(function(announcement, index) {\r\n        let priorityColor = announcement.priority === 'high' ? '#00ff00' : \r\n                          announcement.priority === 'medium' ? '#ffff00' : '#ff9900';\r\n        \r\n        announcement_html += `\r\n            <div class=\"batch-announcement-item\" style=\"\r\n                margin-bottom: 12px; \r\n                padding: 12px; \r\n                background: #2c3e50; \r\n                color: ${priorityColor}; \r\n                font-family: 'Courier New', monospace; \r\n                border-radius: 6px;\r\n                border-left: 4px solid ${priorityColor};\r\n                position: relative;\r\n            \">\r\n                <div style=\"font-weight: bold; margin-bottom: 8px; font-size: 13px;\">\r\n                    📢 ${announcement.title || 'Announcement'}\r\n                </div>\r\n                <pre style=\"\r\n                    margin: 0; \r\n                    font-size: 11px; \r\n                    white-space: pre-line; \r\n                    line-height: 1.4;\r\n                    font-family: inherit;\r\n                \">${announcement.content || announcement.message || 'No content'}</pre>\r\n                <div style=\"\r\n                    position: absolute;\r\n                    top: 8px;\r\n                    right: 8px;\r\n                    background: rgba(255,255,255,0.1);\r\n                    padding: 2px 6px;\r\n                    border-radius: 3px;\r\n                    font-size: 9px;\r\n                \">\r\n                    Live\r\n                </div>\r\n            </div>\r\n        `;\r\n    });\r\n    \r\n    if (announcement_html) {\r\n        show_navbar_widget(announcement_html, announcements.length);\r\n    }\r\n}\r\n\r\nfunction show_navbar_widget(html_content, count) {\r\n    // Remove existing widget\r\n    $('.batch-announcement-widget').remove();\r\n    \r\n    // Create floating announcement widget\r\n    let widget = $(`\r\n        <div class=\"batch-announcement-widget\" style=\"\r\n            position: fixed;\r\n            top: 70px;\r\n            right: 20px;\r\n            width: ${amb.batch_widget.config.widgetWidth}px;\r\n            max-height: 70vh;\r\n            overflow-y: auto;\r\n            z-index: 1050;\r\n            background: white;\r\n            border: 2px solid #28a745;\r\n            border-radius: 8px;\r\n            box-shadow: 0 6px 20px rgba(0,0,0,0.25);\r\n            padding: 15px;\r\n            animation: slideInRight 0.5s ease-out;\r\n        \">\r\n            <div style=\"\r\n                display: flex; \r\n                justify-content: space-between; \r\n                align-items: center; \r\n                margin-bottom: 15px;\r\n                padding-bottom: 10px;\r\n                border-bottom: 2px solid #28a745;\r\n                position: sticky;\r\n                top: 0;\r\n                background: white;\r\n                z-index: 10;\r\n            \">\r\n                <div>\r\n                    <h4 style=\"margin: 0; color: #28a745; font-size: 16px;\">\r\n                        🏭 Multi-Plant Production Monitor\r\n                    </h4>\r\n                    <small style=\"color: #666; font-size: 11px;\">\r\n                        ${count} active batch${count !== 1 ? 'es' : ''} across all facilities\r\n                    </small>\r\n                </div>\r\n                <div>\r\n                    <button class=\"btn btn-xs btn-success refresh-announcements\" style=\"margin-right: 5px;\" title=\"Refresh\">\r\n                        🔄\r\n                    </button>\r\n                    <button class=\"btn btn-xs btn-secondary toggle-grouping\" title=\"Toggle Grouping\">\r\n                        🗂️\r\n                    </button>\r\n                    <button class=\"btn btn-xs btn-secondary minimize-announcement\" title=\"Minimize\">\r\n                        📌\r\n                    </button>\r\n                    <button class=\"btn btn-xs btn-danger close-announcement\" title=\"Close\">\r\n                        ✕\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div class=\"announcement-content\">\r\n                ${html_content}\r\n            </div>\r\n            <div style=\"\r\n                text-align: center; \r\n                margin-top: 15px; \r\n                padding-top: 10px;\r\n                border-top: 1px solid #eee;\r\n                font-size: 10px; \r\n                color: #666;\r\n                position: sticky;\r\n                bottom: 0;\r\n                background: white;\r\n            \">\r\n                🔄 Auto-update every minute • \r\n                <span id=\"last-update-time\">${new Date().toLocaleTimeString()}</span>\r\n            </div>\r\n        </div>\r\n    `);\r\n    \r\n    // Add to page\r\n    $('body').append(widget);\r\n    \r\n    // Event handlers\r\n    setup_widget_events(widget);\r\n    \r\n    // Auto-minimize after delay\r\n    setTimeout(function() {\r\n        if (widget.is(':visible')) {\r\n            minimizeWidget(widget);\r\n        }\r\n    }, amb.batch_widget.config.autoMinimizeDelay);\r\n}\r\n\r\n// =============================================================================\r\n// EVENT HANDLERS\r\n// =============================================================================\r\n\r\nfunction setup_widget_events(widget) {\r\n    // Refresh button\r\n    widget.find('.refresh-announcements').off('click').on('click', function() {\r\n        var $this = $(this);\r\n        $this.html('⏳');\r\n        update_batch_announcements();\r\n        setTimeout(function() {\r\n            $this.html('🔄');\r\n        }, 1000);\r\n    });\r\n    \r\n    // Toggle grouping button\r\n    widget.find('.toggle-grouping').off('click').on('click', function() {\r\n        // This would toggle between grouped and flat view\r\n        // Implementation would depend on your data structure\r\n        frappe.msgprint('Grouping toggle functionality would be implemented here');\r\n    });\r\n    \r\n    // Minimize button\r\n    widget.find('.minimize-announcement').off('click').on('click', function() {\r\n        minimizeWidget(widget);\r\n    });\r\n    \r\n    // Close button\r\n    widget.find('.close-announcement').off('click').on('click', function() {\r\n        widget.fadeOut(300, function() {\r\n            $(this).remove();\r\n        });\r\n        \r\n        // Re-show after 5 minutes\r\n        setTimeout(function() {\r\n            update_batch_announcements();\r\n        }, 300000);\r\n    });\r\n    \r\n    // Hover effects\r\n    widget.off('mouseenter mouseleave').hover(\r\n        function() {\r\n            $(this).css({\r\n                'opacity': '1',\r\n                'transform': 'scale(1)',\r\n                'box-shadow': '0 8px 25px rgba(0,0,0,0.3)'\r\n            });\r\n        },\r\n        function() {\r\n            $(this).css({\r\n                'opacity': '0.95',\r\n                'transform': 'scale(1)',\r\n                'box-shadow': '0 6px 20px rgba(0,0,0,0.25)'\r\n            });\r\n        }\r\n    );\r\n    \r\n    // Make widget draggable\r\n    makeWidgetDraggable(widget);\r\n}\r\n\r\nfunction minimizeWidget(widget) {\r\n    widget.animate({\r\n        width: '60px',\r\n        height: '50px'\r\n    }, 300);\r\n    widget.find('.announcement-content, h4, small, .close-announcement, .refresh-announcements, .toggle-grouping').hide();\r\n    widget.find('.minimize-announcement').html('📋').attr('title', 'Expand');\r\n    \r\n    // Click to expand\r\n    widget.find('.minimize-announcement').off('click').on('click', function() {\r\n        widget.animate({\r\n            width: amb.batch_widget.config.widgetWidth + 'px',\r\n            height: 'auto'\r\n        }, 300);\r\n        widget.find('.announcement-content, h4, small, .close-announcement, .refresh-announcements, .toggle-grouping').show();\r\n        widget.find('.minimize-announcement').html('📌').attr('title', 'Minimize');\r\n        setup_widget_events(widget);\r\n    });\r\n}\r\n\r\nfunction makeWidgetDraggable(widget) {\r\n    let isDragging = false;\r\n    let startX, startY, initialTop, initialLeft;\r\n    \r\n    widget.find('h4').css('cursor', 'move');\r\n    \r\n    widget.find('h4').on('mousedown', function(e) {\r\n        isDragging = true;\r\n        startX = e.clientX;\r\n        startY = e.clientY;\r\n        initialTop = parseInt(widget.css('top'));\r\n        initialLeft = parseInt(widget.css('right'));\r\n        widget.css('cursor', 'move');\r\n        e.preventDefault();\r\n    });\r\n    \r\n    $(document).on('mousemove', function(e) {\r\n        if (!isDragging) return;\r\n        \r\n        const newRight = initialLeft - (e.clientX - startX);\r\n        const newTop = initialTop + (e.clientY - startY);\r\n        \r\n        widget.css({\r\n            right: newRight + 'px',\r\n            top: newTop + 'px'\r\n        });\r\n    });\r\n    \r\n    $(document).on('mouseup', function() {\r\n        isDragging = false;\r\n        widget.css('cursor', 'default');\r\n    });\r\n}\r\n\r\n// =============================================================================\r\n// UTILITY FUNCTIONS\r\n// =============================================================================\r\n\r\nfunction getPlantName(plantCode) {\r\n    const plantNames = {\r\n        '1': 'Mix Plant',\r\n        '2': 'Dry Plant',\r\n        '3': 'Juice Plant',\r\n        '4': 'Laboratory',\r\n        '5': 'Formulated Plant'\r\n    };\r\n    return plantNames[plantCode] || `Plant ${plantCode}`;\r\n}\r\n\r\nfunction getPlantIcon(plantCode) {\r\n    const plantIcons = {\r\n        '1': '⚗️', // Mix Plant\r\n        '2': '🔥', // Dry Plant\r\n        '3': '🧃', // Juice Plant\r\n        '4': '🔬', // Laboratory\r\n        '5': '🧪'  // Formulated Plant\r\n    };\r\n    return plantIcons[plantCode] || '🏭';\r\n}\r\n\r\nfunction getStatusIcon(status) {\r\n    const statusIcons = {\r\n        'Draft': '📝',\r\n        'In Progress': '🔄',\r\n        'Completed': '✅',\r\n        'Stopped': '⏹️',\r\n        'Cancelled': '❌',\r\n        'Quality Check': '🔍'\r\n    };\r\n    return statusIcons[status] || '📋';\r\n}\r\n\r\nfunction formatTime(timestamp) {\r\n    if (!timestamp) return 'Just now';\r\n    \r\n    const time = new Date(timestamp);\r\n    const now = new Date();\r\n    const diffMs = now - time;\r\n    const diffMins = Math.round(diffMs / (1000 * 60));\r\n    \r\n    if (diffMins < 1) return 'Just now';\r\n    if (diffMins < 60) return `${diffMins}m ago`;\r\n    \r\n    const diffHours = Math.round(diffMins / 60);\r\n    if (diffHours < 24) return `${diffHours}h ago`;\r\n    \r\n    return time.toLocaleDateString();\r\n}\r\n\r\nfunction addGlobalRefreshButton() {\r\n    // Add a refresh button to the navbar for quick access\r\n    if ($('.batch-global-refresh').length === 0) {\r\n        const refreshBtn = $(`\r\n            <button class=\"btn btn-default btn-sm batch-global-refresh\" \r\n                    style=\"margin-right: 10px; padding: 5px 10px;\"\r\n                    title=\"Refresh Batch Monitor\">\r\n                🔄 Batches\r\n            </button>\r\n        `);\r\n        \r\n        // Try to find a good place in the navbar\r\n        if ($('.navbar .custom-actions').length) {\r\n            $('.navbar .custom-actions').prepend(refreshBtn);\r\n        } else if ($('.navbar-header .navbar-right').length) {\r\n            $('.navbar-header .navbar-right').prepend(refreshBtn);\r\n        } else {\r\n            $('.navbar-header').append(refreshBtn);\r\n        }\r\n        \r\n        refreshBtn.on('click', function() {\r\n            update_batch_announcements();\r\n        });\r\n    }\r\n}\r\n\r\n// =============================================================================\r\n// CSS ANIMATIONS\r\n// =============================================================================\r\n\r\n// Add CSS animations only once\r\nif (typeof window.batchWidgetStylesAdded === 'undefined') {\r\n    window.batchWidgetStylesAdded = true;\r\n    \r\n    var styles = `\r\n        <style id=\"batch-widget-styles\">\r\n            @keyframes slideInRight {\r\n                from {\r\n                    transform: translateX(100%);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n            \r\n            .batch-announcement-widget {\r\n                transition: all 0.3s ease;\r\n            }\r\n            \r\n            .batch-announcement-item {\r\n                transition: all 0.2s ease;\r\n            }\r\n            \r\n            .batch-announcement-item:hover {\r\n                transform: translateX(-3px);\r\n                box-shadow: 0 3px 10px rgba(0,0,0,0.2);\r\n            }\r\n            \r\n            .company-group {\r\n                transition: all 0.3s ease;\r\n            }\r\n            \r\n            .plant-group {\r\n                transition: all 0.3s ease;\r\n            }\r\n            \r\n            @media (max-width: 768px) {\r\n                .batch-announcement-widget {\r\n                    width: calc(100vw - 40px) !important;\r\n                    right: 20px !important;\r\n                    font-size: 12px !important;\r\n                }\r\n            }\r\n            \r\n            /* Scrollbar styling */\r\n            .batch-announcement-widget::-webkit-scrollbar {\r\n                width: 6px;\r\n            }\r\n            \r\n            .batch-announcement-widget::-webkit-scrollbar-track {\r\n                background: #f1f1f1;\r\n                border-radius: 10px;\r\n            }\r\n            \r\n            .batch-announcement-widget::-webkit-scrollbar-thumb {\r\n                background: #888;\r\n                border-radius: 10px;\r\n            }\r\n            \r\n            .batch-announcement-widget::-webkit-scrollbar-thumb:hover {\r\n                background: #555;\r\n            }\r\n        </style>\r\n    `;\r\n    \r\n    $('head').append(styles);\r\n}\r\n\r\n// =============================================================================\r\n// GLOBAL FUNCTIONS\r\n// =============================================================================\r\n\r\n// Make functions available globally\r\nwindow.refresh_batch_announcements = update_batch_announcements;\r\nwindow.hide_batch_widget = function() {\r\n    $('.batch-announcement-widget').fadeOut();\r\n};\r\nwindow.show_batch_widget = function() {\r\n    update_batch_announcements();\r\n};\r\n\r\n// Export for potential use in other scripts\r\nif (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = {\r\n        update_batch_announcements: update_batch_announcements,\r\n        hide_batch_widget: hide_batch_widget,\r\n        show_batch_widget: show_batch_widget,\r\n        config: amb.batch_widget.config\r\n    };\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COA AMB2",
  "enabled": 1,
  "modified": "2025-10-24 11:52:39.009433",
  "module": "amb_w_tds",
  "name": "custom_naming_series",
  "script": "frappe.ui.form.on('COA AMB', {\r\n    onload: function(frm) {\r\n        // Only set the value if the document is new and the field is empty\r\n        if (frm.is_new() && frm.doc.naming_series) {\r\n            frm.set_value('naming_series', '');\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COA AMB",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.991001",
  "module": "amb_w_tds",
  "name": "custom_naming_series_1",
  "script": "frappe.ui.form.on('COA AMB', {\r\n    onload: function(frm) {\r\n        // Only set the value if the document is new and the field is empty\r\n        if (frm.is_new() && frm.doc.naming_series) {\r\n            frm.set_value('naming_series', '');\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COA AMB",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.969439",
  "module": "amb_w_tds",
  "name": "load_tds_parameters_1",
  "script": "// COA AMB Enhanced Client Script with Complete Field Mapping and Fixed Validation\r\n// Complete working version with proper field copying and validation fixes\r\n\r\nfrappe.ui.form.on('COA AMB', {\r\n    refresh: function(frm) {\r\n        // Clear any existing buttons first\r\n        frm.page.clear_icons();\r\n        frm.page.clear_actions();\r\n        \r\n        // Store current form reference for real-time validation\r\n        window.cur_frm = frm;\r\n        \r\n        // Add main action buttons\r\n        frm.add_custom_button(__('📥 Load TDS Parameters'), function() {\r\n            load_tds_parameters_enhanced(frm);\r\n        }, __('Actions'));\r\n        \r\n        frm.add_custom_button(__('✅ Validate TDS Compliance'), function() {\r\n            validate_tds_compliance_fixed(frm);\r\n        }, __('Actions'));\r\n        \r\n        // Add Submit button if validation passes and document is not submitted\r\n        if (frm.doc.docstatus === 0 && frm.doc.validation_status === 'Compliant') {\r\n            frm.add_custom_button(__('🚀 Submit COA'), function() {\r\n                submit_coa_document(frm);\r\n            }, __('Actions')).addClass('btn-primary');\r\n            \r\n            // Show compliance alert\r\n            frappe.show_alert({\r\n                message: __('✅ Document is compliant and ready for submission'),\r\n                indicator: 'green'\r\n            });\r\n        }\r\n        \r\n        // Add utility buttons\r\n        if(!frm.is_new()) {\r\n            frm.add_custom_button(__('🔍 Debug Values'), function() {\r\n                debug_current_values_detailed(frm);\r\n            }, __('Tools'));\r\n            \r\n            frm.add_custom_button(__('🗑️ Clear Parameters'), function() {\r\n                clear_parameters_with_confirmation(frm);\r\n            }, __('Tools'));\r\n        }\r\n        \r\n        // Apply enhanced styling\r\n        apply_enhanced_styles();\r\n        \r\n        // Setup real-time validation\r\n        setup_real_time_validation(frm);\r\n        \r\n        console.log('Form refreshed. Validation status:', frm.doc.validation_status, 'Docstatus:', frm.doc.docstatus);\r\n    },\r\n    \r\n    after_save: function(frm) {\r\n        console.log('After save event triggered. Validation status:', frm.doc.validation_status);\r\n        \r\n        // Check validation status after save and update UI accordingly\r\n        if (frm.doc.validation_status === 'Compliant') {\r\n            // Use setTimeout to ensure the form is fully saved before refreshing buttons\r\n            setTimeout(function() {\r\n                console.log('Refreshing buttons after save...');\r\n                setup_form_buttons(frm);\r\n            }, 1000);\r\n        }\r\n    },\r\n    \r\n    linked_tds: function(frm) {\r\n        if (frm.doc.linked_tds) {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'TDS Product Specification',\r\n                    name: frm.doc.linked_tds\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        var param_count = r.message.item_quality_inspection_parameter ? r.message.item_quality_inspection_parameter.length : 0;\r\n                        frappe.show_alert({\r\n                            message: __('TDS Selected: {0} parameters available', [param_count]),\r\n                            indicator: 'green'\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\n// =====================\r\n// FORM BUTTON MANAGEMENT\r\n// =====================\r\n\r\nfunction setup_form_buttons(frm) {\r\n    console.log('Setting up form buttons. Validation status:', frm.doc.validation_status, 'Docstatus:', frm.doc.docstatus);\r\n    \r\n    // Clear existing buttons\r\n    frm.page.clear_actions();\r\n    \r\n    // Always add these buttons first\r\n    frm.add_custom_button(__('📥 Load TDS Parameters'), function() {\r\n        load_tds_parameters_enhanced(frm);\r\n    }, __('Actions'));\r\n    \r\n    frm.add_custom_button(__('✅ Validate TDS Compliance'), function() {\r\n        validate_tds_compliance_fixed(frm);\r\n    }, __('Actions'));\r\n    \r\n    // Add Submit button if document is compliant and not submitted\r\n    if (frm.doc.docstatus === 0 && frm.doc.validation_status === 'Compliant') {\r\n        console.log('Adding Submit button - conditions met');\r\n        \r\n        frm.add_custom_button(__('🚀 Submit COA'), function() {\r\n            submit_coa_document(frm);\r\n        }, __('Actions')).addClass('btn-primary');\r\n        \r\n        // Show a message indicating the document is ready for submission\r\n        frappe.show_alert({\r\n            message: __('✅ Document is compliant and ready for submission'),\r\n            indicator: 'green'\r\n        });\r\n    } else {\r\n        console.log('Submit button not added. Docstatus:', frm.doc.docstatus, 'Validation status:', frm.doc.validation_status);\r\n    }\r\n    \r\n    // Add utility buttons\r\n    if(!frm.is_new()) {\r\n        frm.add_custom_button(__('🔍 Debug Values'), function() {\r\n            debug_current_values_detailed(frm);\r\n        }, __('Tools'));\r\n        \r\n        frm.add_custom_button(__('🗑️ Clear Parameters'), function() {\r\n            clear_parameters_with_confirmation(frm);\r\n        }, __('Tools'));\r\n    }\r\n    \r\n    // Force refresh of button area\r\n    frm.page.refresh();\r\n}\r\n\r\n// =====================\r\n// REAL-TIME VALIDATION SETUP\r\n// =====================\r\n\r\nfunction setup_real_time_validation(frm) {\r\n    // Initialize validation styles\r\n    initialize_validation_styles();\r\n    \r\n    // Set up event handler for result_value changes\r\n    frappe.ui.form.on('COA Quality Test Parameter', {\r\n        result_value: function(frm, cdt, cdn) {\r\n            console.log('Field changed for row ' + cdn + ': result_value = \"' + locals[cdt][cdn].result_value + '\"');\r\n            \r\n            // Use setTimeout to allow the field change to be processed normally\r\n            setTimeout(function() {\r\n                perform_real_time_validation_for_row(frm, cdt, cdn);\r\n            }, 200);\r\n        }\r\n    });\r\n    \r\n    console.log('Real-time validation setup complete');\r\n}\r\n\r\nfunction perform_real_time_validation_for_row(frm, cdt, cdn) {\r\n    console.log('Performing real-time validation for row ' + cdn);\r\n    \r\n    var row = locals[cdt][cdn];\r\n    if (!row) {\r\n        console.log('Row not found');\r\n        return;\r\n    }\r\n    \r\n    console.log('  Current result value: \"' + row.result_value + '\"');\r\n    \r\n    // Skip validation if result_value is empty\r\n    if (!row.result_value || row.result_value.toString().trim() === '') {\r\n        // Clear any existing validation styling\r\n        clear_validation_styling_fixed(cdn);\r\n        // Clear result text\r\n        frappe.model.set_value(cdt, cdn, 'result_text', '');\r\n        return;\r\n    }\r\n    \r\n    // Handle negative values in real-time validation\r\n    var validation_result = validate_single_parameter(row);\r\n    \r\n    // Apply styling based on validation result\r\n    apply_validation_styling_fixed(cdn, validation_result);\r\n    \r\n    // Update result_text field with PASS/FAIL status\r\n    update_result_text_field(frm, cdt, cdn, validation_result.status);\r\n    \r\n    console.log('  Validation result: ' + validation_result.status);\r\n}\r\n\r\nfunction update_result_text_field(frm, cdt, cdn, status) {\r\n    // Update the result_text field with the validation status\r\n    frappe.model.set_value(cdt, cdn, 'result_text', status);\r\n    \r\n    // Also update the result_status field if it exists\r\n    if (locals[cdt][cdn].result_status !== undefined) {\r\n        var status_display = '';\r\n        switch(status) {\r\n            case 'PASS': status_display = 'Compliant'; break;\r\n            case 'FAIL': status_display = 'Non-Compliant'; break;\r\n            case 'PENDING': status_display = 'Pending'; break;\r\n            default: status_display = status;\r\n        }\r\n        frappe.model.set_value(cdt, cdn, 'result_status', status_display);\r\n    }\r\n}\r\n\r\nfunction clear_validation_styling_fixed(cdn) {\r\n    try {\r\n        // Target the specific row by data-name attribute\r\n        var row_element = $('div[data-name=\"' + cdn + '\"]');\r\n        if (row_element.length > 0) {\r\n            // Remove validation classes from the result_value field input\r\n            row_element.find('[data-fieldname=\"result_value\"] input').removeClass('validation-pass validation-fail');\r\n            \r\n            // Remove any validation indicator elements we might have added\r\n            row_element.find('.validation-indicator').remove();\r\n        }\r\n    } catch (error) {\r\n        console.log('Error clearing validation styling:', error);\r\n    }\r\n}\r\n\r\nfunction apply_validation_styling_fixed(cdn, validation_result) {\r\n    try {\r\n        // Target the specific row by data-name attribute\r\n        var row_element = $('div[data-name=\"' + cdn + '\"]');\r\n        if (row_element.length === 0) {\r\n            console.log('Row element not found for cdn:', cdn);\r\n            return;\r\n        }\r\n        \r\n        // Find the result_value input field specifically\r\n        var result_input = row_element.find('[data-fieldname=\"result_value\"] input');\r\n        if (result_input.length === 0) {\r\n            console.log('Result input field not found for cdn:', cdn);\r\n            return;\r\n        }\r\n        \r\n        // Clear existing validation classes first\r\n        result_input.removeClass('validation-pass validation-fail');\r\n        \r\n        // Apply appropriate class based on validation result\r\n        if (validation_result.status === 'PASS') {\r\n            result_input.addClass('validation-pass');\r\n        } else if (validation_result.status === 'FAIL') {\r\n            result_input.addClass('validation-fail');\r\n        }\r\n        \r\n        console.log('Applied validation styling for row ' + cdn + ': ' + validation_result.status);\r\n        \r\n    } catch (error) {\r\n        console.log('Error applying validation styling:', error);\r\n    }\r\n}\r\n\r\n// Also update the single parameter validation function\r\nfunction validate_single_parameter(param) {\r\n    var result = {\r\n        status: 'PENDING',\r\n        message: '',\r\n        parameter_name: param.parameter || 'Unknown'\r\n    };\r\n    \r\n    // Skip validation for title rows\r\n    if (is_title_row(param)) {\r\n        result.status = 'SKIP';\r\n        result.message = 'Title row - validation skipped';\r\n        return result;\r\n    }\r\n    \r\n    // Skip if result_value is empty\r\n    if (!param.result_value || param.result_value.toString().trim() === '') {\r\n        result.status = 'PENDING';\r\n        result.message = 'No result value entered';\r\n        return result;\r\n    }\r\n    \r\n    try {\r\n        var resultValue = parseFloat(param.result_value);\r\n        var minValue = param.min_value !== null && param.min_value !== undefined && param.min_value !== '' ? parseFloat(param.min_value) : null;\r\n        var maxValue = param.max_value !== null && param.max_value !== undefined && param.max_value !== '' ? parseFloat(param.max_value) : null;\r\n        \r\n        // Get Acceptance Criteria Value (this is the 'value' field, not 'specification')\r\n        var acceptanceCriteria = param.value || '';\r\n        \r\n        // SPECIAL CASE: Handle \"NEGATIVE\" acceptance criteria\r\n        if (acceptanceCriteria.toUpperCase().includes('NEGATIVE')) {\r\n            var resultStr = param.result_value.toString().toUpperCase().trim();\r\n            if (resultStr === 'NEGATIVE' || resultStr === 'NEG' || resultStr === '0') {\r\n                result.status = 'PASS';\r\n                result.message = 'Negative result as required';\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Expected negative result but got \"' + param.result_value + '\"';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // SPECIAL CASE: Handle \"NOT DETECTABLE\" acceptance criteria\r\n        if (acceptanceCriteria.toUpperCase().includes('NOT DETECTABLE')) {\r\n            var lodMatch = acceptanceCriteria.match(/LOD\\s*([0-9.]+)/i);\r\n            var lodValue = lodMatch ? parseFloat(lodMatch[1]) : 0;\r\n            \r\n            if (!isNaN(resultValue) && resultValue < lodValue) {\r\n                result.status = 'PASS';\r\n                result.message = 'Value below detection limit of ' + lodValue;\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Value \"' + param.result_value + '\" should be below LOD of ' + lodValue;\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Check if result value is a valid number\r\n        if (isNaN(resultValue)) {\r\n            // For non-numeric values, check against acceptance criteria\r\n            if (acceptanceCriteria && acceptanceCriteria.trim() !== '') {\r\n                // Compare result with acceptance criteria (case-insensitive)\r\n                var resultStr = param.result_value.toString().toLowerCase().trim();\r\n                var criteriaStr = acceptanceCriteria.toString().toLowerCase().trim();\r\n                \r\n                if (resultStr === criteriaStr) {\r\n                    result.status = 'PASS';\r\n                    result.message = 'Value matches acceptance criteria';\r\n                } else {\r\n                    result.status = 'FAIL';\r\n                    result.message = 'Value doesn\\'t match acceptance criteria';\r\n                }\r\n            } else {\r\n                // No acceptance criteria to compare against - auto-pass if value exists\r\n                result.status = 'PASS';\r\n                result.message = 'No acceptance criteria, value exists';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Handle special case where both min and max are 0\r\n        if (minValue === 0 && maxValue === 0) {\r\n            if (resultValue === 0) {\r\n                result.status = 'PASS';\r\n                result.message = 'Value is exactly 0 as required';\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.message = 'Value ' + resultValue + ' is not 0 (required range: 0 - 0)';\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Perform range validation for numeric values\r\n        var withinMin = (minValue === null || isNaN(minValue) || resultValue >= minValue);\r\n        var withinMax = (maxValue === null || isNaN(maxValue) || resultValue <= maxValue);\r\n        \r\n        if (withinMin && withinMax) {\r\n            result.status = 'PASS';\r\n            result.message = 'Value ' + resultValue + ' is within acceptable range';\r\n        } else {\r\n            result.status = 'FAIL';\r\n            var rangeInfo = '';\r\n            if (minValue !== null && !isNaN(minValue)) rangeInfo += 'Min: ' + minValue;\r\n            if (maxValue !== null && !isNaN(maxValue)) {\r\n                if (rangeInfo) rangeInfo += ', ';\r\n                rangeInfo += 'Max: ' + maxValue;\r\n            }\r\n            result.message = 'Value ' + resultValue + ' is outside acceptable range (' + rangeInfo + ')';\r\n        }\r\n        \r\n    } catch (error) {\r\n        result.status = 'ERROR';\r\n        result.message = 'Validation error: ' + error.message;\r\n        console.error('Validation error for parameter ' + param.parameter + ':', error);\r\n    }\r\n    \r\n    return result;\r\n}\r\nfunction initialize_validation_styles() {\r\n    // Use jQuery document ready instead of frappe.ready\r\n    $(document).ready(function() {\r\n        // Remove any existing validation styles first\r\n        $('#validation-styles').remove();\r\n        \r\n        // Add improved validation styles\r\n        $('<style id=\"validation-styles\">')\r\n            .prop('type', 'text/css')\r\n            .html(\r\n                '/* COA AMB Validation Styles */\\n' +\r\n                '.frappe-control[data-fieldname=\"result_value\"] input.validation-pass {\\n' +\r\n                '    background-color: #d4edda !important;\\n' +\r\n                '    border-color: #28a745 !important;\\n' +\r\n                '    box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25) !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_value\"] input.validation-fail {\\n' +\r\n                '    background-color: #f8d7da !important;\\n' +\r\n                '    border-color: #dc3545 !important;\\n' +\r\n                '    box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input[readonly] {\\n' +\r\n                '    background-color: #f8f9fa !important;\\n' +\r\n                '    font-weight: bold;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-pass-text {\\n' +\r\n                '    color: #28a745 !important;\\n' +\r\n                '    background-color: #d4edda !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-fail-text {\\n' +\r\n                '    color: #dc3545 !important;\\n' +\r\n                '    background-color: #f8d7da !important;\\n' +\r\n                '}\\n' +\r\n                '.frappe-control[data-fieldname=\"result_text\"] input.validation-pending-text {\\n' +\r\n                '    color: #ffc107 !important;\\n' +\r\n                '    background-color: #fff3cd !important;\\n' +\r\n                '}\\n' +\r\n                '/* Ensure no accumulation of visual elements */\\n' +\r\n                '.validation-indicator {\\n' +\r\n                '    display: inline-block;\\n' +\r\n                '    margin-left: 5px;\\n' +\r\n                '}'\r\n            )\r\n            .appendTo('head');\r\n        \r\n        console.log('COA AMB validation styles initialized');\r\n    });\r\n}\r\n\r\n// =====================\r\n// VALIDATION FUNCTIONS\r\n// =====================\r\n\r\nfunction validate_tds_compliance_fixed(frm) {\r\n    console.log('=== STARTING TDS COMPLIANCE VALIDATION ===');\r\n    \r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No parameters to validate'));\r\n        return;\r\n    }\r\n    \r\n    // CRITICAL: Force refresh all form data before validation\r\n    frm.refresh_fields();\r\n    \r\n    // Get fresh data from the grid\r\n    var grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    var current_data = [];\r\n    \r\n    if (grid && grid.grid_rows) {\r\n        grid.grid_rows.forEach(function(grid_row, index) {\r\n            if (grid_row.doc) {\r\n                current_data.push(grid_row.doc);\r\n            }\r\n        });\r\n    } else {\r\n        current_data = frm.doc.coa_quality_test_parameter;\r\n    }\r\n    \r\n    console.log('Total parameters to validate:', current_data.length);\r\n    \r\n    var validation_results = {\r\n        total: current_data.length,\r\n        passed: 0,\r\n        failed: 0,\r\n        pending: 0,\r\n        skipped: 0,\r\n        title_rows: 0,\r\n        issues: []\r\n    };\r\n    \r\n    current_data.forEach(function(param, index) {\r\n        console.log('\\n--- Validating Row ' + (index + 1) + ': ' + param.parameter + ' ---');\r\n        console.log('Raw data:', {\r\n            parameter: param.parameter,\r\n            result_value: param.result_value,\r\n            min_value: param.min_value,\r\n            max_value: param.max_value,\r\n            numeric: param.numeric,\r\n            specification: param.specification\r\n        });\r\n        \r\n        // Skip title rows\r\n        if (is_title_row(param)) {\r\n            console.log('Skipping title row');\r\n            validation_results.skipped++;\r\n            validation_results.title_rows++;\r\n            \r\n            // Set result text to empty for title rows\r\n            param.result_text = '';\r\n            param.result_status = 'N/A';\r\n            \r\n            return;\r\n        }\r\n        \r\n        var result = validate_parameter_compliance_fixed(param, index);\r\n        console.log('Validation result:', result);\r\n        \r\n        if (result.status === 'PASS') validation_results.passed++;\r\n        else if (result.status === 'FAIL') validation_results.failed++;\r\n        else validation_results.pending++;\r\n        \r\n        if (result.issues.length > 0) {\r\n            validation_results.issues = validation_results.issues.concat(result.issues);\r\n        }\r\n        \r\n        // Update the parameter result\r\n        param.result_text = result.status;\r\n        update_parameter_result(frm, param, result.status);\r\n    });\r\n    \r\n    console.log('=== VALIDATION COMPLETE ===');\r\n    console.log('Results:', validation_results);\r\n    \r\n    // Update the document validation status\r\n    update_document_validation_status(frm, validation_results);\r\n    \r\n    // Refresh the form after updating results\r\n    frm.refresh_field('coa_quality_test_parameter');\r\n    \r\n    show_compliance_results(validation_results, frm);\r\n}\r\n\r\nfunction validate_parameter_compliance_fixed(param, index) {\r\n    var result = {\r\n        status: 'PENDING',\r\n        issues: []\r\n    };\r\n    \r\n    // Skip title rows\r\n    if (is_title_row(param)) {\r\n        result.status = 'SKIPPED';\r\n        return result;\r\n    }\r\n    \r\n    // Check if result value is provided\r\n    var resultValue = param.result_value;\r\n    console.log('  Result value: \"' + resultValue + '\" (type: ' + (typeof resultValue) + ')');\r\n    \r\n    if (resultValue === null || resultValue === undefined || resultValue === '') {\r\n        result.status = 'PENDING';\r\n        result.issues.push('Row ' + (index + 1) + ': No result value entered');\r\n        console.log('  Status: PENDING (no result value)');\r\n        return result;\r\n    }\r\n    \r\n    // Get Acceptance Criteria Value (this is the 'value' field, not 'specification')\r\n    var acceptanceCriteria = param.value || '';\r\n    console.log('  Acceptance Criteria: \"' + acceptanceCriteria + '\"');\r\n    \r\n    // SPECIAL CASE: Handle \"NEGATIVE\" specifications (like for Coliforms, Pathogens)\r\n    if (acceptanceCriteria.toUpperCase().includes('NEGATIVE')) {\r\n        var resultStr = resultValue.toString().toUpperCase().trim();\r\n        if (resultStr === 'NEGATIVE' || resultStr === 'NEG'  || resultStr === 'NONE' || resultStr === '0' ) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (negative test result)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Expected negative result but got \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (not negative)');\r\n        }\r\n        return result;\r\n    }\r\n        if (acceptanceCriteria.toUpperCase().includes('NONE')) {\r\n        var resultStr = resultValue.toString().toUpperCase().trim();\r\n        if (resultStr === 'NONE' || resultStr === '0' ) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (negative test result)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Expected negative result but got \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (not negative)');\r\n        }\r\n        return result;\r\n    }\r\n    // SPECIAL CASE: Handle \"NOT DETECTABLE\" specifications\r\n    if (acceptanceCriteria.toUpperCase().includes('NOT DETECTABLE')) {\r\n        var resultNum = parseFloat(resultValue);\r\n        var lodMatch = acceptanceCriteria.match(/LOD\\s*([0-9.]+)/i);\r\n        var lodValue = lodMatch ? parseFloat(lodMatch[1]) : 0;\r\n        \r\n        if (!isNaN(resultNum) && resultNum < lodValue) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (below detection limit)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Value \"' + resultValue + '\" should be below LOD of ' + lodValue);\r\n            console.log('  Status: FAIL (above detection limit)');\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    // Determine if this should be treated as numeric\r\n    var minVal = param.min_value;\r\n    var maxVal = param.max_value;\r\n    var hasNumericConstraints = (minVal !== null && minVal !== undefined && minVal !== '') || \r\n                                  (maxVal !== null && maxVal !== undefined && maxVal !== '');\r\n    \r\n    console.log('  Min: ' + minVal + ', Max: : ' + maxVal + ', Has numeric constraints: ' + hasNumericConstraints);\r\n    \r\n    if (hasNumericConstraints) {\r\n        // NUMERIC VALIDATION (including negative values)\r\n        var resultNum = parseFloat(resultValue);\r\n        var minNum = minVal !== null && minVal !== undefined && minVal !== '' ? parseFloat(minVal) : null;\r\n        var maxNum = maxVal !== null && maxVal !== undefined && maxVal !== '' ? parseFloat(maxVal) : null;\r\n        \r\n        console.log('  Parsed values - Result: ' + resultNum + ', Min: ' + minNum + ', Max: ' + maxNum);\r\n        \r\n        // Check if result is a valid number (including negative values)\r\n        if (isNaN(resultNum)) {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': Invalid numeric result value \"' + resultValue + '\"');\r\n            console.log('  Status: FAIL (invalid number)');\r\n            return result;\r\n        }\r\n        \r\n        // SPECIAL CASE: Handle \"must be exactly 0\" (both min and max are 0)\r\n        if (minNum === 0 && maxNum === 0) {\r\n            if (resultNum === 0) {\r\n                result.status = 'PASS';\r\n                console.log('  Status: PASS (exactly 0 as required)');\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.issues.push('Row ' + (index + 1) + ': Value ' + resultNum + ' is not 0 (required range: 0 - 0)');\r\n                console.log('  Status: FAIL (not 0 when range is 0-0)');\r\n            }\r\n            return result;\r\n        }\r\n        \r\n        // Check range constraints (handles negative values correctly)\r\n        var withinRange = true;\r\n        var constraintMessages = [];\r\n        \r\n        // Check minimum value (handles negative values)\r\n        if (minVal !== null && minVal !== undefined && minVal !== '' && !isNaN(minNum)) {\r\n            if (resultNum < minNum) {\r\n                withinRange = false;\r\n                constraintMessages.push('Result ' + resultNum + ' below minimum ' + minNum);\r\n            }\r\n        }\r\n        \r\n        // Check maximum value (handles negative values)\r\n        if (maxVal !== null && maxVal !== undefined && maxVal !== '' && !isNaN(maxNum)) {\r\n            if (resultNum > maxNum) {\r\n                withinRange = false;\r\n                constraintMessages.push('Result ' + resultNum + ' above maximum ' + maxNum);\r\n            }\r\n        }\r\n        \r\n        if (withinRange) {\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (within range)');\r\n        } else {\r\n            result.status = 'FAIL';\r\n            result.issues.push('Row ' + (index + 1) + ': ' + constraintMessages.join(', '));\r\n            console.log('  Status: FAIL (' + constraintMessages.join(', ') + ')');\r\n        }\r\n        \r\n    } else {\r\n        // NON-NUMERIC VALIDATION - Check against acceptance criteria\r\n        console.log('  Acceptance Criteria: \"' + acceptanceCriteria + '\"');\r\n        \r\n        if (acceptanceCriteria && acceptanceCriteria.trim() !== '') {\r\n            // Compare result with acceptance criteria (case-insensitive)\r\n            var resultStr = resultValue.toString().toLowerCase().trim();\r\n            var criteriaStr = acceptanceCriteria.toString().toLowerCase().trim();\r\n            \r\n            console.log('  Comparing: \"' + resultStr + '\" vs \"' + criteriaStr + '\"');\r\n            \r\n            if (resultStr === criteriaStr) {\r\n                result.status = 'PASS';\r\n                console.log('  Status: PASS (matches acceptance criteria)');\r\n            } else {\r\n                result.status = 'FAIL';\r\n                result.issues.push('Row ' + (index + 1) + ': Result \"' + resultValue + '\" doesn\\'t match acceptance criteria \"' + acceptanceCriteria + '\"');\r\n                console.log('  Status: FAIL (doesn\\'t match acceptance criteria)');\r\n            }\r\n        } else {\r\n            // No acceptance criteria to compare against - auto-pass if value exists\r\n            result.status = 'PASS';\r\n            console.log('  Status: PASS (no acceptance criteria, value exists)');\r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\n// Enhanced function to check if a row is a title/header\r\nfunction is_title_row(param) {\r\n    if (!param) return false;\r\n    \r\n    // Check explicit title row flag from TDS\r\n    if (param.is_title_row === 1) {\r\n        return true;\r\n    }\r\n    \r\n    // Check if parameter name suggests it's a title\r\n    if (param.parameter) {\r\n        var paramLower = param.parameter.toLowerCase();\r\n        if (paramLower.includes('title') || \r\n            paramLower.includes('header') || \r\n            paramLower.includes('section') ||\r\n            paramLower === 'organoleptic' ||\r\n            paramLower === 'physicochemical' ||\r\n            paramLower === 'microbiological' ||\r\n            paramLower === 'other analysis' ||\r\n            paramLower.includes('---') ||\r\n            paramLower.includes('***') ||\r\n            paramLower.includes('===')) {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    // Check if it has no validation criteria (no min/max/specification)\r\n    var hasMinMax = (param.min_value !== null && param.min_value !== undefined && param.min_value !== '') ||\r\n                      (param.max_value !== null && param.max_value !== undefined && param.max_value !== '');\r\n    var hasSpec = param.specification && param.specification.trim() !== '';\r\n    \r\n    if (!hasMinMax && !hasSpec) {\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nfunction update_document_validation_status(frm, validation_results) {\r\n    var validation_status = 'Non-Compliant';\r\n    var overall_status = 'FAIL';\r\n    \r\n    if (validation_results.failed === 0 && validation_results.passed > 0) {\r\n        validation_status = 'Compliant';\r\n        overall_status = 'PASS';\r\n    } else if (validation_results.pending > 0 && validation_results.failed === 0) {\r\n        validation_status = 'Pending Review';\r\n        overall_status = 'PENDING';\r\n    } else if (validation_results.passed === 0 && validation_results.failed === 0 && validation_results.pending === 0) {\r\n        validation_status = 'Not Started';\r\n        overall_status = 'PENDING';\r\n    }\r\n    \r\n    console.log('Setting validation status to:', validation_status);\r\n    \r\n    // Update the document fields - check if fields exist first\r\n    if (frm.fields_dict.validation_status) {\r\n        frm.set_value('validation_status', validation_status);\r\n    } else {\r\n        console.warn('validation_status field not found in doctype');\r\n    }\r\n    \r\n    if (frm.fields_dict.overall_compliance_status) {\r\n        frm.set_value('overall_compliance_status', overall_status);\r\n    } else {\r\n        console.warn('overall_compliance_status field not found in doctype');\r\n    }\r\n    \r\n    // Save the document to persist the validation status\r\n    frm.save().then(function() {\r\n        console.log('Document validation status updated and saved to:', validation_status);\r\n        \r\n        // If validation passed, refresh the form to show the Submit button\r\n        if (validation_status === 'Compliant') {\r\n            console.log('Validation compliant - setting up submit button');\r\n            \r\n            // Multiple approaches to ensure button appears\r\n            setTimeout(function() {\r\n                console.log('Refreshing form for submit button...');\r\n                frm.refresh();\r\n            }, 500);\r\n            \r\n            setTimeout(function() {\r\n                console.log('Setting up form buttons...');\r\n                setup_form_buttons(frm);\r\n            }, 1000);\r\n            \r\n            setTimeout(function() {\r\n                console.log('Final button setup...');\r\n                setup_form_buttons(frm);\r\n            }, 1500);\r\n        }\r\n    }).catch(function(error) {\r\n        console.error('Error saving document:', error);\r\n        // Handle case where fields don't exist\r\n        if (error.message && error.message.includes('validation_status')) {\r\n            frappe.msgprint({\r\n                title: __('Field Missing'),\r\n                message: __('The validation_status field is missing from the COA AMB doctype. Please add it to enable full functionality.'),\r\n                indicator: 'red'\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction show_compliance_results(results, frm) {\r\n    var message = '<div style=\"margin: 10px 0;\">' +\r\n        '<h4>📊 TDS Compliance Results</h4>' +\r\n        '<p><strong>Total Rows:</strong> ' + results.total + '</p>' +\r\n        '<p><strong>✅ PASS:</strong> <span style=\"color: green;\">' + results.passed + '</span></p>' +\r\n        '<p><strong>❌ FAIL:</strong> <span style=\"color: red;\">' + results.failed + '</span></p>' +\r\n        '<p><strong>⏳ PENDING:</strong> <span style=\"color: orange;\">' + results.pending + '</span></p>' +\r\n        '<p><strong>📋 TITLE ROWS:</strong> <span style=\"color: blue;\">' + results.title_rows + '</span></p>' +\r\n        '<p><strong>🚫 SKIPPED:</strong> <span style=\"color: gray;\">' + results.skipped + '</span></p>' +\r\n        '</div>';\r\n    \r\n    if (results.issues.length > 0) {\r\n        message += '<div style=\"margin: 10px 0;\"><h5>🔍 Validation Issues:</h5><ul style=\"max-height: 200px; overflow-y: auto;\">';\r\n        results.issues.forEach(function(issue) {\r\n            message += '<li>' + issue + '</li>';\r\n        });\r\n        message += '</ul></div>';\r\n    } else {\r\n        // Show success message when there are no issues\r\n        message += '<div style=\"margin: 10px 0; padding: 10px; background-color: #d4edda; border-radius: 5px; border: 1px solid #c3e6cb;\">' +\r\n                   '<h5 style=\"color: #155724; margin: 0;\">✅ All parameters passed validation successfully!</h5>' +\r\n                   '</div>';\r\n    }\r\n    \r\n    // Calculate overall status\r\n    var validatedCount = results.passed + results.failed + results.pending;\r\n    var overallStatus = 'PASS';\r\n    var indicator = 'green';\r\n    \r\n    if (results.failed > 0) {\r\n        overallStatus = 'FAIL';\r\n        indicator = 'red';\r\n    } else if (results.pending > 0 && validatedCount > 0) {\r\n        overallStatus = 'PENDING';\r\n        indicator = 'orange';\r\n    }\r\n    \r\n    message += '<div style=\"background-color: ' + getStatusColor(indicator) + '; ' +\r\n                'padding: 10px; border-radius: 5px; margin: 10px 0;\">' +\r\n                '<h4>Overall Status: <span style=\"color: ' + indicator + ';\">' + overallStatus + '</span></h4>' +\r\n                '</div>';\r\n    \r\n    // Add submit instructions if all validations pass\r\n    if (results.failed === 0 && results.passed > 0) {\r\n        message += '<div style=\"margin: 10px 0; padding: 10px; background-color: #d1ecf1; border-radius: 5px; border: 1px solid #bee5eb;\">' +\r\n                   '<h5 style=\"color: #0c5460; margin: 0;\">📝 Next Steps:</h5>' +\r\n                   '<p style=\"margin: 5px 0 0 0; color: #0c5460;\">All parameters are compliant. The \"Submit COA\" button is now available for submission.</p>' +\r\n                   '</div>';\r\n        \r\n        // Force multiple refreshes to ensure button appears\r\n        setTimeout(function() {\r\n            console.log('First refresh after compliance results...');\r\n            frm.refresh();\r\n        }, 500);\r\n        \r\n        setTimeout(function() {\r\n            console.log('Second refresh and button setup...');\r\n            setup_form_buttons(frm);\r\n        }, 1000);\r\n        \r\n        setTimeout(function() {\r\n            console.log('Final button setup...');\r\n            setup_form_buttons(frm);\r\n        }, 1500);\r\n    }\r\n    \r\n    frappe.msgprint({\r\n        title: __('TDS Compliance Validation'),\r\n        message: message,\r\n        indicator: indicator\r\n    });\r\n}\r\n\r\nfunction submit_coa_document(frm) {\r\n    frappe.confirm(\r\n        __('Are you sure you want to submit this COA? This will start the approval workflow.'),\r\n        function() {\r\n            // Show loading indicator\r\n            frappe.show_alert({ message: __('Submitting COA and starting workflow...'), indicator: 'blue' });\r\n            \r\n            // Call server method to submit and start workflow\r\n            frappe.call({\r\n                method: 'erpnext.quality_management.doctype.coa_amb.coa_amb.submit_and_start_workflow',\r\n                args: {\r\n                    docname: frm.doc.name\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message && r.message.success) {\r\n                        frappe.show_alert({\r\n                            message: __('COA submitted successfully! Workflow has been started.'),\r\n                            indicator: 'green'\r\n                        });\r\n                        \r\n                        // Reload the form to show the new status\r\n                        frm.reload_doc();\r\n                    } else {\r\n                        frappe.msgprint({\r\n                            title: __('Submission Failed'),\r\n                            message: __('Error submitting COA: ') + (r.message.error || 'Unknown error'),\r\n                            indicator: 'red'\r\n                        });\r\n                    }\r\n                },\r\n                error: function(err) {\r\n                    frappe.msgprint({\r\n                        title: __('Submission Error'),\r\n                        message: __('Network error: ') + err.message,\r\n                        indicator: 'red'\r\n                    });\r\n                }\r\n            });\r\n        },\r\n        function() {\r\n            // Cancel action\r\n            console.log('COA submission cancelled');\r\n        }\r\n    );\r\n}\r\n\r\n// =====================\r\n// LOAD TDS PARAMETERS (ENHANCED WITH COMPLETE FIELD MAPPING)\r\n// =====================\r\n\r\nfunction load_tds_parameters_enhanced(frm) {\r\n    console.log('Load TDS Parameters button clicked');\r\n    \r\n    if (!frm.doc.linked_tds) {\r\n        frappe.msgprint({\r\n            title: __('TDS Required'),\r\n            message: __('Please select a TDS Product Specification first'),\r\n            indicator: 'red'\r\n        });\r\n        return;\r\n    }\r\n    \r\n    if (!frm.doc.name) {\r\n        frappe.confirm(\r\n            __('Document must be saved before loading parameters. Save now?'),\r\n            function() {\r\n                frm.save().then(function() {\r\n                    execute_parameter_loading(frm);\r\n                });\r\n            }\r\n        );\r\n        return;\r\n    }\r\n    \r\n    execute_parameter_loading(frm);\r\n}\r\n\r\nfunction execute_parameter_loading(frm) {\r\n    console.log('Executing parameter loading for TDS:', frm.doc.linked_tds);\r\n    \r\n    var loading_dialog = frappe.show_progress(\r\n        __('Loading Parameters'),\r\n        __('Fetching parameters from TDS...'),\r\n        0\r\n    );\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get',\r\n        args: {\r\n            doctype: 'TDS Product Specification',\r\n            name: frm.doc.linked_tds\r\n        },\r\n        callback: function(r) {\r\n            loading_dialog.hide();\r\n            \r\n            if (r.message) {\r\n                process_tds_parameters(r.message, frm);\r\n                \r\n                frappe.show_alert({\r\n                    message: __('✅ Successfully loaded parameters from TDS'),\r\n                    indicator: 'green'\r\n                });\r\n                \r\n            } else {\r\n                frappe.msgprint({\r\n                    title: __('Loading Failed'),\r\n                    message: __('Could not load TDS parameters'),\r\n                    indicator: 'red'\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction process_tds_parameters(tds_doc, frm) {\r\n    if (!tds_doc.item_quality_inspection_parameter || tds_doc.item_quality_inspection_parameter.length === 0) {\r\n        frappe.msgprint({\r\n            title: __('No Parameters'),\r\n            message: __('No parameters found in the selected TDS'),\r\n            indicator: 'orange'\r\n        });\r\n        return;\r\n    }\r\n    \r\n    // Clear existing parameters\r\n    frm.clear_table('coa_quality_test_parameter');\r\n    \r\n    // Add parameters from TDS\r\n    tds_doc.item_quality_inspection_parameter.forEach(function(tds_param) {\r\n        var row = frm.add_child('coa_quality_test_parameter');\r\n        \r\n        // Map ALL TDS fields to COA fields - FIXED zero handling\r\n        row.parameter = tds_param.parameter || 'Parameter';\r\n        row.specification = tds_param.specification || '';\r\n        row.parameter_group = tds_param.parameter_group || '';\r\n        row.value = tds_param.value || '';\r\n        row.custom_uom = tds_param.custom_uom || '';\r\n        row.numeric = tds_param.numeric || 0;\r\n        row.custom_reconstituted_to_05_total_solids_solution = tds_param.custom_reconstituted_to_05_total_solids_solution || 0;\r\n        row.is_title_row = tds_param.custom_is_title_row || 0;\r\n        \r\n        // FIX: Proper handling of zero values for min/max\r\n        row.min_value = (tds_param.min_value !== null && tds_param.min_value !== undefined) ? tds_param.min_value : null;\r\n        row.max_value = (tds_param.max_value !== null && tds_param.max_value !== undefined) ? tds_param.max_value : null;\r\n        \r\n        row.method = tds_param.custom_method || '';\r\n        row.uom = tds_param.uom || '';\r\n        row.formula_based_criteria = tds_param.formula_based_criteria || 0;\r\n        row.acceptance_formula = tds_param.acceptance_formula || '';\r\n        \r\n        // Initialize result fields\r\n        if (is_title_row(row)) {\r\n            row.result_text = '';\r\n            row.result_value = '';\r\n            row.result_status = 'N/A';\r\n            row.numeric = 0;\r\n        } else {\r\n            row.result_text = 'PENDING';\r\n            row.result_value = '';\r\n            row.result_status = 'Pending';\r\n        }\r\n    });\r\n    \r\n    frm.refresh_field('coa_quality_test_parameter');\r\n}\r\n\r\n// =====================\r\n// DEBUG FUNCTIONS\r\n// =====================\r\n\r\nfunction debug_current_values_detailed(frm) {\r\n    console.log('=== DETAILED DEBUG OUTPUT (INCLUDING NEGATIVE VALUES) ===');\r\n    \r\n    // Check form document data\r\n    console.log('Form document data:');\r\n    if (frm.doc.coa_quality_test_parameter) {\r\n        frm.doc.coa_quality_test_parameter.forEach(function(param, index) {\r\n            console.log('Row ' + (index + 1) + ' (form doc):', {\r\n                parameter: param.parameter,\r\n                result_value: param.result_value,\r\n                result_value_type: typeof param.result_value,\r\n                min_value: param.min_value,\r\n                min_value_type: typeof param.min_value,\r\n                max_value: param.max_value,\r\n                max_value_type: typeof param.max_value,\r\n                numeric: param.numeric,\r\n                specification: param.specification,\r\n                result_text: param.result_text,\r\n                // Additional debug for negative values\r\n                has_negative_min: param.min_value < 0,\r\n                has_negative_max: param.max_value < 0,\r\n                has_negative_result: parseFloat(param.result_value) < 0\r\n            });\r\n        });\r\n    }\r\n    \r\n    console.log('Current validation status:', frm.doc.validation_status);\r\n    console.log('Current docstatus:', frm.doc.docstatus);\r\n    console.log('=== DEBUG COMPLETE ===');\r\n    \r\n    frappe.msgprint({\r\n        title: __('Debug Complete'),\r\n        message: __('Check browser console for detailed output including negative value analysis'),\r\n        indicator: 'blue'\r\n    });\r\n}\r\n\r\n// =====================\r\n// UTILITY FUNCTIONS\r\n// =====================\r\n\r\nfunction update_parameter_result(frm, param, status) {\r\n    param.result_text = status;\r\n    \r\n    // Apply styling based on row type\r\n    var grid = frm.fields_dict.coa_quality_test_parameter.grid;\r\n    if (grid) {\r\n        var row = grid.grid_rows_by_docname[param.name];\r\n        if (row) {\r\n            var $row = $(row.row);\r\n            $row.removeClass('parameter-pass parameter-fail parameter-pending parameter-title');\r\n            \r\n            if (is_title_row(param)) {\r\n                $row.addClass('parameter-title');\r\n            } else {\r\n                switch(status) {\r\n                    case 'PASS': $row.addClass('parameter-pass'); break;\r\n                    case 'FAIL': $row.addClass('parameter-fail'); break;\r\n                    case 'PENDING': $row.addClass('parameter-pending'); break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getStatusColor(indicator) {\r\n    var colors = {\r\n        'green': '#d4edda',\r\n        'red': '#f8d7da', \r\n        'orange': '#fff3cd',\r\n        'blue': '#cce5ff',\r\n        'gray': '#e2e3e5'\r\n    };\r\n    return colors[indicator] || '#f8f9fa';\r\n}\r\n\r\nfunction clear_parameters_with_confirmation(frm) {\r\n    if (!frm.doc.coa_quality_test_parameter || frm.doc.coa_quality_test_parameter.length === 0) {\r\n        frappe.msgprint(__('No parameters to clear'));\r\n        return;\r\n    }\r\n    \r\n    frappe.confirm(\r\n        __('Are you sure you want to clear all {0} parameters?', [frm.doc.coa_quality_test_parameter.length]),\r\n        function() {\r\n            frm.clear_table('coa_quality_test_parameter');\r\n            frm.refresh_field('coa_quality_test_parameter');\r\n            frappe.show_alert({\r\n                message: __('All parameters cleared'),\r\n                indicator: 'orange'\r\n            });\r\n        }\r\n    );\r\n}\r\n\r\nfunction apply_enhanced_styles() {\r\n    if (!document.getElementById('coa-amb-enhanced-styles')) {\r\n        var style = document.createElement('style');\r\n        style.id = 'coa-amb-enhanced-styles';\r\n        style.textContent = \r\n            '.parameter-pass {' +\r\n            '    background-color: #d4edda !important;' +\r\n            '    border-left: 4px solid #28a745 !important;' +\r\n            '}' +\r\n            '.parameter-fail {' +\r\n            '    background-color: #f8d7da !important;' +\r\n            '    border-left: 4px solid #dc3545 !important;' +\r\n            '}' +\r\n            '.parameter-pending {' +\r\n            '    background-color: #fff3cd !important;' +\r\n            '    border-left: 4px solid #ffc107 !important;' +\r\n            '}' +\r\n            '.parameter-title {' +\r\n            '    background-color: #e9ecef !important;' +\r\n            '    border-left: 4px solid #6c757d !important;' +\r\n            '    font-style: italic;' +\r\n            '}';\r\n        document.head.appendChild(style);\r\n    }\r\n}\r\n\r\n// Initialize styles\r\napply_enhanced_styles();\r\n\r\nconsole.log('COA AMB Enhanced Client Script with Complete Field Mapping and Fixed Validation loaded successfully');",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch AMB",
  "enabled": 0,
  "modified": "2025-10-24 11:52:38.923261",
  "module": "amb_w_tds",
  "name": "Production data widget Batch AMB",
  "script": "// =============================================================================\r\n// ENHANCED BATCH NAVBAR WIDGET - Multi-Plant Manufacturing\r\n// Save this as: public/js/batch_navbar_widget.js\r\n// =============================================================================\r\n\r\n// Configuration\r\nconst BATCH_WIDGET_CONFIG = {\r\n    refreshInterval: 60000, // 60 seconds\r\n    autoMinimizeDelay: 45000, // 45 seconds\r\n    widgetWidth: 500,\r\n    plantColors: {\r\n        '1': '#3498db', // Mix Plant - Blue\r\n        '2': '#e74c3c', // Dry Plant - Red\r\n        '3': '#2ecc71', // Juice Plant - Green\r\n        '4': '#f39c12', // Laboratory - Orange\r\n        '5': '#9b59b6'  // Formulated Plant - Purple\r\n    },\r\n    companyColors: {\r\n        'AMB-Wellness': '#1abc9c',\r\n        'Juice': '#3498db'\r\n    }\r\n};\r\n\r\n// Initialize when page loads\r\nfrappe.ready(function() {\r\n    // Initialize widget only for logged-in users\r\n    if (frappe.session.user !== 'Guest') {\r\n        console.log('Initializing Enhanced Batch Navbar Widget...');\r\n\r\n        // Set up auto-refresh\r\n        setInterval(function() {\r\n            update_batch_announcements();\r\n        }, BATCH_WIDGET_CONFIG.refreshInterval);\r\n\r\n        // Initial load after 2 seconds\r\n        setTimeout(function() {\r\n            update_batch_announcements();\r\n        }, 2000);\r\n    }\r\n});\r\n\r\n// =============================================================================\r\n// MAIN FUNCTIONS\r\n// =============================================================================\r\n\r\nfunction update_batch_announcements() {\r\n    frappe.call({\r\n        method: 'erpnext.manufacturing.doctype.batch_amb.batch_amb.get_enhanced_running_batch_announcements',\r\n        callback: function(r) {\r\n            if (r.message && r.message.success) {\r\n                if (r.message.grouped_announcements && Object.keys(r.message.grouped_announcements).length > 0) {\r\n                    display_grouped_batch_announcements(r.message.grouped_announcements);\r\n                } else if (r.message.flat_announcements && r.message.flat_announcements.length > 0) {\r\n                    // Fallback to flat announcements\r\n                    display_batch_announcements(r.message.flat_announcements);\r\n                } else {\r\n                    // Hide widget if no running batches\r\n                    $('.batch-announcement-widget').fadeOut();\r\n                }\r\n            } else {\r\n                console.log('No running batches or API error');\r\n                $('.batch-announcement-widget').fadeOut();\r\n            }\r\n        },\r\n        error: function(r) {\r\n            console.error('Error fetching batch announcements:', r);\r\n        }\r\n    });\r\n}\r\n\r\nfunction display_grouped_batch_announcements(groupedData) {\r\n    let announcement_html = '';\r\n    let totalBatches = 0;\r\n    \r\n    // Process by company\r\n    for (const [companyName, companyData] of Object.entries(groupedData)) {\r\n        const companyColor = BATCH_WIDGET_CONFIG.companyColors[companyName] || '#7f8c8d';\r\n        let companyBatches = 0;\r\n        \r\n        announcement_html += `\r\n            <div class=\"company-group\" style=\"margin-bottom: 15px;\">\r\n                <div class=\"company-header\" style=\"\r\n                    display: flex; \r\n                    align-items: center; \r\n                    padding: 8px 12px;\r\n                    background: ${companyColor};\r\n                    color: white;\r\n                    border-radius: 5px;\r\n                    margin-bottom: 10px;\r\n                    font-weight: bold;\r\n                \">\r\n                    <span style=\"margin-right: 8px;\">🏢</span>\r\n                    ${companyName}\r\n                </div>\r\n        `;\r\n        \r\n        // Process by plant\r\n        for (const [plantCode, plantBatches] of Object.entries(companyData)) {\r\n            const plantColor = BATCH_WIDGET_CONFIG.plantColors[plantCode] || '#95a5a6';\r\n            const plantName = getPlantName(plantCode);\r\n            \r\n            announcement_html += `\r\n                <div class=\"plant-group\" style=\"margin-left: 10px; margin-bottom: 12px;\">\r\n                    <div class=\"plant-header\" style=\"\r\n                        display: flex; \r\n                        align-items: center; \r\n                        padding: 6px 10px;\r\n                        background: ${plantColor}22;\r\n                        border-left: 4px solid ${plantColor};\r\n                        border-radius: 3px;\r\n                        margin-bottom: 8px;\r\n                        font-size: 13px;\r\n                    \">\r\n                        <span style=\"margin-right: 6px;\">${getPlantIcon(plantCode)}</span>\r\n                        ${plantName} (Plant ${plantCode})\r\n                    </div>\r\n                    <div class=\"batch-list\">\r\n            `;\r\n            \r\n            // Process batches\r\n            plantBatches.forEach(function(batch, index) {\r\n                companyBatches++;\r\n                totalBatches++;\r\n                \r\n                const priorityColor = batch.priority === 'high' ? '#00ff00' : \r\n                                    batch.priority === 'medium' ? '#ffff00' : '#ff9900';\r\n                const statusIcon = getStatusIcon(batch.batch_status);\r\n                \r\n                announcement_html += `\r\n                    <div class=\"batch-announcement-item\" style=\"\r\n                        margin-bottom: 10px; \r\n                        padding: 10px; \r\n                        background: #f8f9fa; \r\n                        border-radius: 5px;\r\n                        border-left: 4px solid ${priorityColor};\r\n                        font-family: 'Courier New', monospace;\r\n                        position: relative;\r\n                    \">\r\n                        <div style=\"display: flex; justify-content: space-between; align-items: flex-start;\">\r\n                            <div style=\"flex: 1;\">\r\n                                <div style=\"font-weight: bold; margin-bottom: 5px; font-size: 13px; color: #2c3e50;\">\r\n                                    ${statusIcon} ${batch.title}\r\n                                </div>\r\n                                <div style=\"font-size: 11px; color: #34495e; margin-bottom: 5px;\">\r\n                                    ${batch.content.replace(/\\n/g, '<br>')}\r\n                                </div>\r\n                            </div>\r\n                            <div style=\"\r\n                                background: rgba(0,0,0,0.05);\r\n                                padding: 3px 6px;\r\n                                border-radius: 3px;\r\n                                font-size: 9px;\r\n                                white-space: nowrap;\r\n                                margin-left: 8px;\r\n                                color: ${batch.quality_grade === 'Red' ? '#e74c3c' : \r\n                                       batch.quality_grade === 'Yellow' ? '#f39c12' : '#2ecc71'};\r\n                            \">\r\n                                ${batch.quality_grade || 'N/A'}\r\n                            </div>\r\n                        </div>\r\n                        <div style=\"\r\n                            position: absolute;\r\n                            top: 8px;\r\n                            right: 8px;\r\n                            background: rgba(0,0,0,0.1);\r\n                            padding: 2px 6px;\r\n                            border-radius: 3px;\r\n                            font-size: 9px;\r\n                        \">\r\n                            ${formatTime(batch.timestamp)}\r\n                        </div>\r\n                    </div>\r\n                `;\r\n            });\r\n            \r\n            announcement_html += `\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n        \r\n        // Add company batch count\r\n        announcement_html = announcement_html.replace('${companyName}', `${companyName} (${companyBatches})`);\r\n        \r\n        announcement_html += `</div>`;\r\n    }\r\n    \r\n    if (announcement_html) {\r\n        show_navbar_widget(announcement_html, totalBatches);\r\n    }\r\n}\r\n\r\nfunction display_batch_announcements(announcements) {\r\n    // Fallback to original display for backward compatibility\r\n    let announcement_html = '';\r\n    \r\n    announcements.forEach(function(announcement, index) {\r\n        let priorityColor = announcement.priority === 'high' ? '#00ff00' : '#ffff00';\r\n        \r\n        announcement_html += `\r\n            <div class=\"batch-announcement-item\" style=\"\r\n                margin-bottom: 12px; \r\n                padding: 12px; \r\n                background: #2c3e50; \r\n                color: ${priorityColor}; \r\n                font-family: 'Courier New', monospace; \r\n                border-radius: 6px;\r\n                border-left: 4px solid ${priorityColor};\r\n                position: relative;\r\n            \">\r\n                <div style=\"font-weight: bold; margin-bottom: 8px; font-size: 13px;\">\r\n                    📢 ${announcement.title}\r\n                </div>\r\n                <pre style=\"\r\n                    margin: 0; \r\n                    font-size: 11px; \r\n                    white-space: pre-line; \r\n                    line-height: 1.4;\r\n                    font-family: inherit;\r\n                \">${announcement.content}</pre>\r\n                <div style=\"\r\n                    position: absolute;\r\n                    top: 8px;\r\n                    right: 8px;\r\n                    background: rgba(255,255,255,0.1);\r\n                    padding: 2px 6px;\r\n                    border-radius: 3px;\r\n                    font-size: 9px;\r\n                \">\r\n                    Live\r\n                </div>\r\n            </div>\r\n        `;\r\n    });\r\n    \r\n    if (announcement_html) {\r\n        show_navbar_widget(announcement_html, announcements.length);\r\n    }\r\n}\r\n\r\nfunction show_navbar_widget(html_content, count) {\r\n    // Remove existing widget\r\n    $('.batch-announcement-widget').remove();\r\n    \r\n    // Create floating announcement widget\r\n    let widget = $(`\r\n        <div class=\"batch-announcement-widget\" style=\"\r\n            position: fixed;\r\n            top: 70px;\r\n            right: 20px;\r\n            width: ${BATCH_WIDGET_CONFIG.widgetWidth}px;\r\n            max-height: 70vh;\r\n            overflow-y: auto;\r\n            z-index: 1050;\r\n            background: white;\r\n            border: 2px solid #28a745;\r\n            border-radius: 8px;\r\n            box-shadow: 0 6px 20px rgba(0,0,0,0.25);\r\n            padding: 15px;\r\n            animation: slideInRight 0.5s ease-out;\r\n        \">\r\n            <div style=\"\r\n                display: flex; \r\n                justify-content: space-between; \r\n                align-items: center; \r\n                margin-bottom: 15px;\r\n                padding-bottom: 10px;\r\n                border-bottom: 2px solid #28a745;\r\n                position: sticky;\r\n                top: 0;\r\n                background: white;\r\n                z-index: 10;\r\n            \">\r\n                <div>\r\n                    <h4 style=\"margin: 0; color: #28a745; font-size: 16px;\">\r\n                        🏭 Multi-Plant Production Monitor\r\n                    </h4>\r\n                    <small style=\"color: #666; font-size: 11px;\">\r\n                        ${count} active batch${count !== 1 ? 'es' : ''} across all facilities\r\n                    </small>\r\n                </div>\r\n                <div>\r\n                    <button class=\"btn btn-xs btn-success refresh-announcements\" style=\"margin-right: 5px;\" title=\"Refresh\">\r\n                        🔄\r\n                    </button>\r\n                    <button class=\"btn btn-xs btn-secondary minimize-announcement\" title=\"Minimize\">\r\n                        📌\r\n                    </button>\r\n                    <button class=\"btn btn-xs btn-danger close-announcement\" title=\"Close\">\r\n                        ✕\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div class=\"announcement-content\">\r\n                ${html_content}\r\n            </div>\r\n            <div style=\"\r\n                text-align: center; \r\n                margin-top: 15px; \r\n                padding-top: 10px;\r\n                border-top: 1px solid #eee;\r\n                font-size: 10px; \r\n                color: #666;\r\n                position: sticky;\r\n                bottom: 0;\r\n                background: white;\r\n            \">\r\n                🔄 Auto-update every minute • \r\n                <span id=\"last-update-time\">${new Date().toLocaleTimeString()}</span>\r\n            </div>\r\n        </div>\r\n    `);\r\n    \r\n    // Add to page\r\n    $('body').append(widget);\r\n    \r\n    // Event handlers\r\n    setup_widget_events(widget);\r\n    \r\n    // Auto-minimize after delay\r\n    setTimeout(function() {\r\n        if (widget.is(':visible')) {\r\n            minimizeWidget(widget);\r\n        }\r\n    }, BATCH_WIDGET_CONFIG.autoMinimizeDelay);\r\n}\r\n\r\n// =============================================================================\r\n// EVENT HANDLERS\r\n// =============================================================================\r\n\r\nfunction setup_widget_events(widget) {\r\n    // Refresh button\r\n    widget.find('.refresh-announcements').click(function() {\r\n        $(this).html('⏳');\r\n        update_batch_announcements();\r\n        setTimeout(() => $(this).html('🔄'), 1000);\r\n    });\r\n    \r\n    // Minimize button\r\n    widget.find('.minimize-announcement').click(function() {\r\n        minimizeWidget(widget);\r\n    });\r\n    \r\n    // Close button\r\n    widget.find('.close-announcement').click(function() {\r\n        widget.fadeOut(300, function() {\r\n            $(this).remove();\r\n        });\r\n        \r\n        // Re-show after 5 minutes\r\n        setTimeout(function() {\r\n            update_batch_announcements();\r\n        }, 300000);\r\n    });\r\n    \r\n    // Hover effects\r\n    widget.hover(\r\n        function() {\r\n            $(this).css({\r\n                'opacity': '1',\r\n                'transform': 'scale(1)',\r\n                'box-shadow': '0 8px 25px rgba(0,0,0,0.3)'\r\n            });\r\n        },\r\n        function() {\r\n            $(this).css({\r\n                'opacity': '0.95',\r\n                'transform': 'scale(1)',\r\n                'box-shadow': '0 6px 20px rgba(0,0,0,0.25)'\r\n            });\r\n        }\r\n    );\r\n}\r\n\r\nfunction minimizeWidget(widget) {\r\n    widget.animate({\r\n        width: '60px',\r\n        height: '50px'\r\n    }, 300);\r\n    widget.find('.announcement-content, h4, small, .close-announcement, .refresh-announcements').hide();\r\n    widget.find('.minimize-announcement').html('📋').attr('title', 'Expand');\r\n    \r\n    // Click to expand\r\n    widget.find('.minimize-announcement').off('click').click(function() {\r\n        widget.animate({\r\n            width: BATCH_WIDGET_CONFIG.widgetWidth + 'px',\r\n            height: 'auto'\r\n        }, 300);\r\n        widget.find('.announcement-content, h4, small, .close-announcement, .refresh-announcements').show();\r\n        widget.find('.minimize-announcement').html('📌').attr('title', 'Minimize');\r\n        setup_widget_events(widget);\r\n    });\r\n}\r\n\r\n// =============================================================================\r\n// UTILITY FUNCTIONS\r\n// =============================================================================\r\n\r\nfunction getPlantName(plantCode) {\r\n    const plantNames = {\r\n        '1': 'Mix Plant',\r\n        '2': 'Dry Plant',\r\n        '3': 'Juice Plant',\r\n        '4': 'Laboratory',\r\n        '5': 'Formulated Plant'\r\n    };\r\n    return plantNames[plantCode] || `Plant ${plantCode}`;\r\n}\r\n\r\nfunction getPlantIcon(plantCode) {\r\n    const plantIcons = {\r\n        '1': '⚗️', // Mix Plant\r\n        '2': '🔥', // Dry Plant\r\n        '3': '🧃', // Juice Plant\r\n        '4': '🔬', // Laboratory\r\n        '5': '🧪'  // Formulated Plant\r\n    };\r\n    return plantIcons[plantCode] || '🏭';\r\n}\r\n\r\nfunction getStatusIcon(status) {\r\n    const statusIcons = {\r\n        'Running Now': '🔄',\r\n        'Quality Check': '🔍',\r\n        'On Hold': '⏸️',\r\n        'Completed': '✅',\r\n        'Planning': '📝'\r\n    };\r\n    return statusIcons[status] || '📋';\r\n}\r\n\r\nfunction formatTime(timestamp) {\r\n    if (!timestamp) return 'Just now';\r\n    \r\n    const time = new Date(timestamp);\r\n    const now = new Date();\r\n    const diffMs = now - time;\r\n    const diffMins = Math.round(diffMs / (1000 * 60));\r\n    \r\n    if (diffMins < 1) return 'Just now';\r\n    if (diffMins < 60) return `${diffMins}m ago`;\r\n    \r\n    const diffHours = Math.round(diffMins / 60);\r\n    if (diffHours < 24) return `${diffHours}h ago`;\r\n    \r\n    return time.toLocaleDateString();\r\n}\r\n\r\n// =============================================================================\r\n// CSS ANIMATIONS\r\n// =============================================================================\r\n\r\n// Add CSS animations only once\r\nif (!$('#batch-widget-styles').length) {\r\n    $('head').append(`\r\n        <style id=\"batch-widget-styles\">\r\n            @keyframes slideInRight {\r\n                from {\r\n                    transform: translateX(100%);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n\r\n            .batch-announcement-widget {\r\n                transition: all 0.3s ease;\r\n            }\r\n\r\n            .batch-announcement-item {\r\n                transition: all 0.2s ease;\r\n            }\r\n\r\n            .batch-announcement-item:hover {\r\n                transform: translateX(-3px);\r\n                box-shadow: 0 3px 10px rgba(0,0,0,0.2);\r\n            }\r\n\r\n            .company-group {\r\n                transition: all 0.3s ease;\r\n            }\r\n\r\n            .plant-group {\r\n                transition: all 0.3s ease;\r\n            }\r\n\r\n            @media (max-width: 768px) {\r\n                .batch-announcement-widget {\r\n                    width: calc(100vw - 40px) !important;\r\n                    right: 20px !important;\r\n                    font-size: 12px !important;\r\n                }\r\n            }\r\n\r\n            /* Scrollbar styling */\r\n            .batch-announcement-widget::-webkit-scrollbar {\r\n                width: 6px;\r\n            }\r\n            \r\n            .batch-announcement-widget::-webkit-scrollbar-track {\r\n                background: #f1f1f1;\r\n                border-radius: 10px;\r\n            }\r\n            \r\n            .batch-announcement-widget::-webkit-scrollbar-thumb {\r\n                background: #888;\r\n                border-radius: 10px;\r\n            }\r\n            \r\n            .batch-announcement-widget::-webkit-scrollbar-thumb:hover {\r\n                background: #555;\r\n            }\r\n        </style>\r\n    `);\r\n}\r\n\r\n// =============================================================================\r\n// GLOBAL FUNCTIONS\r\n// =============================================================================\r\n\r\n// Make functions available globally\r\nwindow.refresh_batch_announcements = update_batch_announcements;\r\nwindow.hide_batch_widget = function() {\r\n    $('.batch-announcement-widget').fadeOut();\r\n};\r\nwindow.show_batch_widget = function() {\r\n    update_batch_announcements();\r\n};",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Navbar Settings",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.700174",
  "module": "amb_w_tds",
  "name": "Navbar Settings Widget",
  "script": "// =============================================================================\r\n// BATCH NAVBAR WIDGET - Custom Script for Navbar Settings\r\n// =============================================================================\r\n\r\nfrappe.ui.form.on('Navbar Settings', {\r\n    refresh: function(frm) {\r\n        // Initialize the batch widget when Navbar Settings form loads\r\n        initializeBatchWidget();\r\n    }\r\n});\r\n\r\n// =============================================================================\r\n// BATCH WIDGET FUNCTIONS\r\n// =============================================================================\r\n\r\nfunction initializeBatchWidget() {\r\n    // Wait for Frappe to be fully loaded and user to be logged in\r\n    if (typeof frappe === 'undefined' || !frappe.session || frappe.session.user === 'Guest') {\r\n        setTimeout(initializeBatchWidget, 1000);\r\n        return;\r\n    }\r\n\r\n    console.log('🚀 Initializing Batch Navbar Widget for user:', frappe.session.user);\r\n    addWidgetStyles();\r\n    \r\n    // Set up auto-refresh every 30 seconds\r\n    setInterval(update_batch_announcements, 30000);\r\n    \r\n    // Initial load after 2 seconds\r\n    setTimeout(update_batch_announcements, 2000);\r\n}\r\n\r\nfunction update_batch_announcements() {\r\n    console.log('🔄 Fetching Batch AMB data...');\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Batch AMB',\r\n            fields: ['name', 'title', 'wo_start_date', 'status', 'custom_batch_level'],\r\n            filters: { 'status': ['!=', 'Completed'] },\r\n            limit: 10\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                console.log('✅ Found', r.message.length, 'active batches');\r\n                process_batch_data(r.message);\r\n            } else {\r\n                console.log('ℹ️ No active batches found');\r\n                show_no_batches_message();\r\n            }\r\n        },\r\n        error: function(r) {\r\n            console.log('⚠️ No batches found or connection issue');\r\n            show_no_batches_message();\r\n        }\r\n    });\r\n}\r\n\r\nfunction process_batch_data(batches) {\r\n    const announcements = batches.map(batch => {\r\n        return {\r\n            id: batch.name,\r\n            title: batch.title || batch.name,\r\n            start_date: batch.wo_start_date,\r\n            status: batch.status || 'Active',\r\n            level: batch.custom_batch_level || '1'\r\n        };\r\n    });\r\n    \r\n    display_batch_announcements(announcements);\r\n}\r\n\r\nfunction display_batch_announcements(announcements) {\r\n    let announcement_html = '';\r\n    \r\n    announcements.forEach(function(announcement, index) {\r\n        const levelColors = {'1': '#e74c3c', '2': '#3498db', '3': '#2ecc71', '4': '#f39c12'};\r\n        const color = levelColors[announcement.level] || '#95a5a6';\r\n        \r\n        announcement_html += `\r\n            <div class=\"batch-announcement-item\" data-batch-id=\"${announcement.id}\" \r\n                 style=\"margin-bottom: 12px; padding: 12px; background: white; \r\n                        color: #333; border-radius: 8px; border-left: 4px solid ${color};\r\n                        position: relative; cursor: pointer; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n                        transition: all 0.3s ease;\">\r\n                \r\n                <div style=\"font-weight: bold; margin-bottom: 8px; font-size: 14px;\">\r\n                    🏭 ${announcement.title}\r\n                </div>\r\n                \r\n                <div style=\"font-size: 11px; color: #555;\">\r\n                    🔢 ID: ${announcement.id}\r\n                </div>\r\n                \r\n                <div style=\"font-size: 11px; color: #555; margin-top: 4px;\">\r\n                    📊 Nivel: ${announcement.level} • Estado: ${announcement.status}\r\n                </div>\r\n                \r\n                ${announcement.start_date ? `\r\n                <div style=\"font-size: 11px; color: #555; margin-top: 4px;\">\r\n                    📅 Inicio: ${frappe.datetime.str_to_user(announcement.start_date)}\r\n                </div>\r\n                ` : ''}\r\n                \r\n                <div style=\"display: flex; justify-content: space-between; align-items: center; margin-top: 8px; font-size: 10px; color: #888;\">\r\n                    <span>${new Date().toLocaleTimeString('es-ES')}</span>\r\n                    <span style=\"background: #28a745; color: white; padding: 2px 6px; border-radius: 3px; font-weight: bold;\">\r\n                        ACTIVO\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        `;\r\n    });\r\n    \r\n    show_navbar_widget(announcement_html, announcements.length);\r\n}\r\n\r\nfunction show_navbar_widget(html_content, count) {\r\n    // Remove existing widget if any\r\n    $('.batch-announcement-widget').remove();\r\n    \r\n    const timestamp = new Date().toLocaleTimeString('es-ES');\r\n\r\n    let widget = $(`\r\n        <div class=\"batch-announcement-widget\" style=\"position: fixed; top: 70px; right: 20px; width: 400px; max-height: 70vh; overflow-y: auto; \r\n            z-index: 9999; background: white; color: #333; border: 2px solid #28a745; \r\n            border-radius: 12px; box-shadow: 0 8px 32px rgba(0,0,0,0.2); padding: 20px;\r\n            animation: slideInRight 0.5s ease-out;\">\r\n            \r\n            <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; padding-bottom: 15px; border-bottom: 2px solid #eee;\">\r\n                <div>\r\n                    <h4 style=\"margin: 0; color: #28a745; font-size: 18px; font-weight: 600;\">\r\n                        🏭 MONITOR BATCH AMB\r\n                    </h4>\r\n                    <small style=\"color: #666; font-size: 12px;\">\r\n                        ${count} lote${count !== 1 ? 's' : ''} activo${count !== 1 ? 's' : ''} • Actualizado: ${timestamp}\r\n                    </small>\r\n                </div>\r\n                <div style=\"display: flex; gap: 6px;\">\r\n                    <button class=\"refresh-announcements\" style=\"background: #28a745; border: 1px solid #28a745; color: white; padding: 4px 8px; border-radius: 3px; cursor: pointer; font-size: 12px;\">\r\n                        🔄\r\n                    </button>\r\n                    <button class=\"close-announcement\" style=\"background: #dc3545; border: 1px solid #dc3545; color: white; padding: 4px 8px; border-radius: 3px; cursor: pointer; font-size: 12px;\">\r\n                        ✕\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"announcement-content\" style=\"max-height: 400px; overflow-y: auto; padding-right: 5px;\">\r\n                ${html_content || '<div style=\"text-align: center; padding: 20px; color: #666;\">No hay lotes activos en este momento</div>'}\r\n            </div>\r\n            \r\n            <div style=\"text-align: center; margin-top: 20px; padding-top: 15px; border-top: 1px solid #eee; font-size: 11px; color: #888;\">\r\n                🔄 Actualización automática cada 30s\r\n            </div>\r\n        </div>\r\n    `);\r\n    \r\n    $('body').append(widget);\r\n    \r\n    // Add event handlers\r\n    widget.find('.refresh-announcements').click(function() {\r\n        const $btn = $(this);\r\n        $btn.html('⏳').prop('disabled', true);\r\n        update_batch_announcements();\r\n        setTimeout(() => {\r\n            $btn.html('🔄').prop('disabled', false);\r\n        }, 1500);\r\n    });\r\n    \r\n    widget.find('.close-announcement').click(function() {\r\n        widget.fadeOut(300, function() {\r\n            $(this).remove();\r\n        });\r\n    });\r\n    \r\n    widget.find('.batch-announcement-item').click(function() {\r\n        const batchId = $(this).data('batch-id');\r\n        frappe.set_route('Form', 'Batch AMB', batchId);\r\n    });\r\n}\r\n\r\nfunction show_no_batches_message() {\r\n    const message = `\r\n        <div style=\"text-align: center; padding: 40px 20px; color: #666;\">\r\n            <div style=\"font-size: 48px; margin-bottom: 15px;\">📋</div>\r\n            <h4 style=\"color: #666; margin-bottom: 10px; font-weight: normal;\">No hay lotes activos</h4>\r\n            <p style=\"font-size: 12px; opacity: 0.7;\">Todos los batches están completos o en pausa</p>\r\n            <div style=\"margin-top: 15px;\">\r\n                <button onclick=\"frappe.set_route('List', 'Batch AMB', 'List')\" \r\n                        style=\"background: #f8f9fa; border: 1px solid #dee2e6; color: #495057; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 11px;\">\r\n                    📋 Ver todos los batches\r\n                </button>\r\n            </div>\r\n        </div>\r\n    `;\r\n    show_navbar_widget(message, 0);\r\n}\r\n\r\nfunction addWidgetStyles() {\r\n    if ($('#batch-widget-styles').length) return;\r\n    \r\n    const styles = `\r\n        <style id=\"batch-widget-styles\">\r\n            @keyframes slideInRight {\r\n                from {\r\n                    transform: translateX(100%);\r\n                    opacity: 0;\r\n                }\r\n                to {\r\n                    transform: translateX(0);\r\n                    opacity: 1;\r\n                }\r\n            }\r\n            \r\n            .batch-announcement-widget {\r\n                transition: all 0.3s ease;\r\n            }\r\n            \r\n            .batch-announcement-item {\r\n                transition: all 0.3s ease;\r\n            }\r\n            \r\n            .batch-announcement-item:hover {\r\n                transform: translateX(-4px);\r\n                box-shadow: 0 4px 15px rgba(0,0,0,0.15);\r\n            }\r\n            \r\n            .refresh-announcements:hover {\r\n                background: #218838 !important;\r\n                border-color: #1e7e34 !important;\r\n            }\r\n            \r\n            .close-announcement:hover {\r\n                background: #c82333 !important;\r\n                border-color: #bd2130 !important;\r\n            }\r\n            \r\n            @media (max-width: 768px) {\r\n                .batch-announcement-widget {\r\n                    width: calc(100vw - 40px) !important;\r\n                    right: 20px !important;\r\n                    left: 20px !important;\r\n                    top: 80px !important;\r\n                    font-size: 14px !important;\r\n                }\r\n            }\r\n        </style>\r\n    `;\r\n    \r\n    $('head').append(styles);\r\n}\r\n\r\n// Global functions for manual control\r\nwindow.BatchWidget = {\r\n    refresh: update_batch_announcements,\r\n    hide: function() {\r\n        $('.batch-announcement-widget').fadeOut(300, function() {\r\n            $(this).remove();\r\n        });\r\n    },\r\n    show: function() {\r\n        update_batch_announcements();\r\n    }\r\n};\r\n\r\nconsole.log('✅ Batch AMB Navbar Widget loaded successfully');",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.866235",
  "module": "amb_w_tds",
  "name": "Quotation Item Escalated Client Script",
  "script": "frappe.ui.form.on('Quotation Item Escalated', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        // Fetch item details when item code changes\r\n        var row = frappe.get_doc(cdt, cdn);\r\n        if (row.item_code) {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Item\",\r\n                    name: row.item_code\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        frappe.model.set_value(cdt, cdn, 'item_name', r.message.item_name);\r\n                        frappe.model.set_value(cdt, cdn, 'description', r.message.description);\r\n                        frappe.model.set_value(cdt, cdn, 'item_group', r.message.item_group);\r\n                        frappe.model.set_value(cdt, cdn, 'brand', r.message.brand);\r\n                        frappe.model.set_value(cdt, cdn, 'stock_uom', r.message.stock_uom);\r\n                        frappe.model.set_value(cdt, cdn, 'weight_per_unit', r.message.weight_per_unit);\r\n                        frappe.model.set_value(cdt, cdn, 'weight_uom', r.message.weight_uom);\r\n                        \r\n                        // Set UOM conversion factor to 1 by default\r\n                        frappe.model.set_value(cdt, cdn, 'uom', r.message.stock_uom);\r\n                        frappe.model.set_value(cdt, cdn, 'conversion_factor', 1);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    qty: function(frm, cdt, cdn) {\r\n        // Recalculate when quantity changes\r\n        recalculate_row(frm, cdt, cdn);\r\n        update_stock_details(frm, cdt, cdn);\r\n    },\r\n\r\n    conversion_factor: function(frm, cdt, cdn) {\r\n        // Recalculate stock quantity\r\n        var row = frappe.get_doc(cdt, cdn);\r\n        if (row.qty && row.conversion_factor) {\r\n            frappe.model.set_value(cdt, cdn, 'stock_qty', \r\n                flt(row.qty) * flt(row.conversion_factor));\r\n        }\r\n    },\r\n\r\n    price_list_rate: function(frm, cdt, cdn) {\r\n        recalculate_row(frm, cdt, cdn);\r\n    },\r\n\r\n    discount_percentage: function(frm, cdt, cdn) {\r\n        calculate_discount(frm, cdt, cdn);\r\n    },\r\n\r\n    discount_amount: function(frm, cdt, cdn) {\r\n        calculate_discount_from_amount(frm, cdt, cdn);\r\n    },\r\n\r\n    ex_works_price: function(frm, cdt, cdn) {\r\n        calculate_delivered_price(frm, cdt, cdn);\r\n    },\r\n\r\n    freight_cost: function(frm, cdt, cdn) {\r\n        calculate_delivered_price(frm, cdt, cdn);\r\n    },\r\n\r\n    freight_location: function(frm, cdt, cdn) {\r\n        // Fetch freight cost when freight location changes\r\n        fetch_freight_cost_and_calculate(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\n// Function to recalculate entire row\r\nfunction recalculate_row(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    \r\n    // Calculate freight cost based on quantity\r\n    var freight_cost = calculate_freight_cost(row.qty);\r\n    frappe.model.set_value(cdt, cdn, 'freight_cost', freight_cost);\r\n    \r\n    // Apply quantity-based escalation\r\n    var escalated_price = apply_quantity_escalation(row.price_list_rate, row.qty);\r\n    frappe.model.set_value(cdt, cdn, 'escalated_rate', escalated_price);\r\n    \r\n    // Calculate final rate\r\n    var final_rate = flt(escalated_price) + flt(freight_cost);\r\n    frappe.model.set_value(cdt, cdn, 'rate', final_rate);\r\n    \r\n    // Calculate amount\r\n    if (row.qty && final_rate) {\r\n        var amount = flt(row.qty) * final_rate;\r\n        frappe.model.set_value(cdt, cdn, 'amount', amount);\r\n        \r\n        // Recalculate discount if percentage is set\r\n        if (row.discount_percentage) {\r\n            calculate_discount(frm, cdt, cdn);\r\n        }\r\n    }\r\n\r\n    // Calculate delivered price\r\n    calculate_delivered_price(frm, cdt, cdn);\r\n}\r\n\r\n// Calculate delivered price (ex_works_price + freight_cost)\r\nfunction calculate_delivered_price(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    var ex_works_price = flt(row.ex_works_price) || 0;\r\n    var freight_cost = flt(row.freight_cost) || 0;\r\n    \r\n    var delivered_price = ex_works_price + freight_cost;\r\n    frappe.model.set_value(cdt, cdn, 'delivered_price', delivered_price);\r\n}\r\n\r\n// Fetch freight cost from freight location and calculate delivered price\r\nfunction fetch_freight_cost_and_calculate(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    \r\n    if (row.freight_location) {\r\n        frappe.call({\r\n            method: \"frappe.client.get_value\",\r\n            args: {\r\n                doctype: \"Freight Location\", // Replace with your actual doctype name\r\n                filters: { name: row.freight_location },\r\n                fieldname: [\"freight_cost\"] // Replace with actual field name for freight cost\r\n            },\r\n            callback: function(r) {\r\n                if (r.message && r.message.freight_cost) {\r\n                    // Set the freight cost from the freight location\r\n                    frappe.model.set_value(cdt, cdn, 'freight_cost', r.message.freight_cost);\r\n                    \r\n                    // Recalculate delivered price\r\n                    calculate_delivered_price(frm, cdt, cdn);\r\n                    \r\n                    // Also trigger row recalculation\r\n                    recalculate_row(frm, cdt, cdn);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Calculate freight cost based on quantity\r\nfunction calculate_freight_cost(quantity) {\r\n    quantity = flt(quantity);\r\n    if (quantity <= 1) return 58.30;\r\n    if (quantity <= 5) return 19.87;\r\n    if (quantity <= 10) return 16.06;\r\n    if (quantity <= 20) return 14.17;\r\n    return 13.91;\r\n}\r\n\r\n// Apply quantity-based price escalation\r\nfunction apply_quantity_escalation(base_price, quantity) {\r\n    base_price = flt(base_price);\r\n    quantity = flt(quantity);\r\n    \r\n    if (quantity >= 100) return base_price * 0.9;      // 10% discount\r\n    if (quantity >= 50) return base_price * 0.95;      // 5% discount\r\n    return base_price;\r\n}\r\n\r\n// Calculate discount from percentage\r\nfunction calculate_discount(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    if (row.discount_percentage && row.amount) {\r\n        var discount_amount = flt(row.amount) * flt(row.discount_percentage) / 100;\r\n        frappe.model.set_value(cdt, cdn, 'discount_amount', discount_amount);\r\n        \r\n        var net_amount = flt(row.amount) - discount_amount;\r\n        frappe.model.set_value(cdt, cdn, 'net_amount', net_amount);\r\n        \r\n        if (row.qty) {\r\n            var net_rate = net_amount / flt(row.qty);\r\n            frappe.model.set_value(cdt, cdn, 'net_rate', net_rate);\r\n        }\r\n    }\r\n}\r\n\r\n// Calculate discount percentage from amount\r\nfunction calculate_discount_from_amount(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    if (row.discount_amount && row.amount) {\r\n        var discount_percentage = (flt(row.discount_amount) / flt(row.amount)) * 100;\r\n        frappe.model.set_value(cdt, cdn, 'discount_percentage', discount_percentage);\r\n        \r\n        var net_amount = flt(row.amount) - flt(row.discount_amount);\r\n        frappe.model.set_value(cdt, cdn, 'net_amount', net_amount);\r\n        \r\n        if (row.qty) {\r\n            var net_rate = net_amount / flt(row.qty);\r\n            frappe.model.set_value(cdt, cdn, 'net_rate', net_rate);\r\n        }\r\n    }\r\n}\r\n\r\n// Update stock details\r\nfunction update_stock_details(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    if (row.item_code && row.warehouse) {\r\n        frappe.call({\r\n            method: \"erpnext.stock.get_item_details.get_available_quantity\",\r\n            args: {\r\n                item_code: row.item_code,\r\n                warehouse: row.warehouse\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    frappe.model.set_value(cdt, cdn, 'actual_qty', r.message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation Item Escalated",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.947764",
  "module": "amb_w_tds",
  "name": "Quantity Range Handling",
  "script": "frappe.ui.form.on('Quotation Item Escalated', {\r\n    quantity_range: function(frm, cdt, cdn) {\r\n        set_quantity_limits(frm, cdt, cdn);\r\n        calculate_prices(frm, cdt, cdn);\r\n    },\r\n    \r\n    ex_works_price: function(frm, cdt, cdn) {\r\n        calculate_prices(frm, cdt, cdn);\r\n    },\r\n    \r\n    freight_cost: function(frm, cdt, cdn) {\r\n        calculate_prices(frm, cdt, cdn);\r\n    },\r\n    \r\n    freight_type: function(frm, cdt, cdn) {\r\n        calculate_freight_based_on_type(frm, cdt, cdn);\r\n    }\r\n});\r\n\r\nfunction set_quantity_limits(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    \r\n    switch(row.quantity_range) {\r\n        case '1-5 kg':\r\n            row.min_quantity = 1;\r\n            row.max_quantity = 5;\r\n            break;\r\n        case '6-10 kg':\r\n            row.min_quantity = 6;\r\n            row.max_quantity = 10;\r\n            break;\r\n        case '11-25 kg':\r\n            row.min_quantity = 11;\r\n            row.max_quantity = 25;\r\n            break;\r\n        case '26-200 kg':\r\n            row.min_quantity = 26;\r\n            row.max_quantity = 200;\r\n            break;\r\n        default:\r\n            row.min_quantity = 0;\r\n            row.max_quantity = 0;\r\n    }\r\n    \r\n    frappe.model.set_value(cdt, cdn, 'min_quantity', row.min_quantity);\r\n    frappe.model.set_value(cdt, cdn, 'max_quantity', row.max_quantity);\r\n}\r\n\r\nfunction calculate_freight_based_on_type(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    var freight_cost = 0;\r\n    \r\n    // Set freight cost based on quantity range and freight type\r\n    if (row.quantity_range && row.freight_type) {\r\n        switch(row.quantity_range) {\r\n            case '1-5 kg':\r\n                freight_cost = (row.freight_type === 'Air Freight') ? 58.30 : \r\n                              (row.freight_type === 'Sea Freight') ? 45.00 :\r\n                              (row.freight_type === 'Ground') ? 35.00 : 60.00;\r\n                break;\r\n            case '6-10 kg':\r\n                freight_cost = (row.freight_type === 'Air Freight') ? 19.87 : \r\n                              (row.freight_type === 'Sea Freight') ? 15.00 :\r\n                              (row.freight_type === 'Ground') ? 12.00 : 22.00;\r\n                break;\r\n            case '11-25 kg':\r\n                freight_cost = (row.freight_type === 'Air Freight') ? 16.06 : \r\n                              (row.freight_type === 'Sea Freight') ? 12.00 :\r\n                              (row.freight_type === 'Ground') ? 9.00 : 18.00;\r\n                break;\r\n            case '26-200 kg':\r\n                freight_cost = (row.freight_type === 'Air Freight') ? 13.91 : \r\n                              (row.freight_type === 'Sea Freight') ? 10.00 :\r\n                              (row.freight_type === 'Ground') ? 7.00 : 15.00;\r\n                break;\r\n        }\r\n        \r\n        frappe.model.set_value(cdt, cdn, 'freight_cost', freight_cost);\r\n        calculate_prices(frm, cdt, cdn);\r\n    }\r\n}\r\n\r\nfunction calculate_prices(frm, cdt, cdn) {\r\n    var row = frappe.get_doc(cdt, cdn);\r\n    \r\n    if (row.ex_works_price && row.freight_cost && row.min_quantity && row.max_quantity) {\r\n        // Calculate delivered price per kg\r\n        var delivered_price = flt(row.ex_works_price) + flt(row.freight_cost);\r\n        frappe.model.set_value(cdt, cdn, 'delivered_price', delivered_price);\r\n        \r\n        // Calculate price per kg\r\n        frappe.model.set_value(cdt, cdn, 'price_per_kg', delivered_price);\r\n        \r\n        // Calculate total price range (min and max)\r\n        var min_total = delivered_price * row.min_quantity;\r\n        var max_total = delivered_price * row.max_quantity;\r\n        \r\n        // Display as range or single value\r\n        if (row.min_quantity === row.max_quantity) {\r\n            frappe.model.set_value(cdt, cdn, 'total_price', min_total);\r\n        } else {\r\n            frappe.model.set_value(cdt, cdn, 'total_price', max_total);\r\n            // You could also display as range: min_total + \" - \" + max_total\r\n        }\r\n    }\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Batch AMB",
  "enabled": 0,
  "modified": "2025-10-24 11:52:38.903334",
  "module": "amb_w_tds",
  "name": "History Display",
  "script": "// Enhanced client script with history table management\r\nfrappe.ui.form.on('Batch AMB', {\r\n    onload: function(frm) {\r\n        setup_plant_dependencies(frm);\r\n        setup_quality_status_actions(frm);\r\n        setup_history_table(frm);\r\n    },\r\n\r\n    refresh: function(frm) {\r\n        add_workflow_buttons(frm);\r\n        update_ui_based_on_state(frm);\r\n        refresh_history_table(frm);\r\n    },\r\n\r\n    current_plant: function(frm) {\r\n        update_target_plant_options(frm);\r\n        validate_plant_transition(frm);\r\n    },\r\n\r\n    quality_status: function(frm) {\r\n        handle_quality_status_change(frm);\r\n    },\r\n\r\n    coa_reference: function(frm) {\r\n        update_from_coa(frm);\r\n    }\r\n});\r\n\r\nfunction setup_history_table(frm) {\r\n    // Make history table read-only and properly formatted\r\n    frm.fields_dict.processing_history.grid.set_column_disp(\"batch_reference\", false);\r\n    \r\n    // Set column widths for better display\r\n    frm.fields_dict.processing_history.grid.update_docfield_property(\r\n        \"date\", \"width\", 120\r\n    );\r\n    frm.fields_dict.processing_history.grid.update_docfield_property(\r\n        \"plant\", \"width\", 80\r\n    );\r\n    frm.fields_dict.processing_history.grid.update_docfield_property(\r\n        \"processing_action\", \"width\", 150\r\n    );\r\n}\r\n\r\nfunction refresh_history_table(frm) {\r\n    // Sort history by date descending (newest first)\r\n    if (frm.doc.processing_history) {\r\n        frm.doc.processing_history.sort(function(a, b) {\r\n            return new Date(b.date) - new Date(a.date);\r\n        });\r\n        frm.refresh_field('processing_history');\r\n    }\r\n}\r\n\r\nfunction add_history_action_buttons(frm) {\r\n    // Add button to view full history\r\n    if (!frm.is_new() && frm.doc.processing_history && frm.doc.processing_history.length > 0) {\r\n        frm.add_custom_button(__('View Full History'), function() {\r\n            show_full_history_report(frm);\r\n        }, __('Tools'));\r\n    }\r\n}\r\n\r\nfunction show_full_history_report(frm) {\r\n    // Open a dialog with the complete processing history\r\n    var dialog = new frappe.ui.Dialog({\r\n        title: __('Complete Processing History - ' + frm.doc.name),\r\n        fields: [\r\n            {\r\n                fieldname: 'history_html',\r\n                fieldtype: 'HTML'\r\n            }\r\n        ],\r\n        size: 'large'\r\n    });\r\n    \r\n    // Generate HTML table for history\r\n    var html = `<div style=\"max-height: 400px; overflow-y: auto;\">\r\n        <table class=\"table table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Date</th>\r\n                    <th>Plant</th>\r\n                    <th>Action</th>\r\n                    <th>Item Code</th>\r\n                    <th>Quality</th>\r\n                    <th>Changed By</th>\r\n                    <th>Comments</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>`;\r\n    \r\n    frm.doc.processing_history.forEach(function(entry) {\r\n        html += `<tr>\r\n            <td>${frappe.datetime.str_to_user(entry.date)}</td>\r\n            <td>${entry.plant}</td>\r\n            <td>${entry.processing_action}</td>\r\n            <td>${entry.item_code}</td>\r\n            <td>${entry.quality_status}</td>\r\n            <td>${entry.changed_by}</td>\r\n            <td>${entry.comments || ''}</td>\r\n        </tr>`;\r\n    });\r\n    \r\n    html += `</tbody></table></div>`;\r\n    \r\n    dialog.fields_dict.history_html.$wrapper.html(html);\r\n    dialog.show();\r\n}\r\n\r\n// Add to your existing utility functions\r\nfunction add_manual_history_entry(frm, action, comments) {\r\n    // Allow users to add manual history entries\r\n    frappe.prompt([\r\n        {\r\n            fieldname: 'comments',\r\n            label: __('Comments'),\r\n            fieldtype: 'Text',\r\n            reqd: 1,\r\n            default: comments\r\n        }\r\n    ], function(values) {\r\n        frappe.call({\r\n            method: 'your_app.your_module.doctype.batch_amb.batch_amb.add_manual_history_entry',\r\n            args: {\r\n                batch_name: frm.doc.name,\r\n                action: action,\r\n                comments: values.comments,\r\n                user: frappe.session.user\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    frm.reload_doc();\r\n                    frappe.msgprint(__('History entry added successfully'));\r\n                }\r\n            }\r\n        });\r\n    }, __('Add History Entry'), __('Add'));\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.827898",
  "module": "amb_w_tds",
  "name": "fetching_TDS",
  "script": "frappe.ui.form.on('Sales Order', {\r\n    custom_item_name: function(frm) {\r\n        if (frm.doc.custom_item_name) {\r\n            fetch_tds_options_for_item(frm);\r\n        }\r\n    },\r\n    \r\n    custom_tds_amb: function(frm) {\r\n        if (frm.doc.custom_tds_amb) {\r\n            fetch_tds_details(frm);\r\n        }\r\n    },\r\n    \r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('Refresh TDS Details'), function() {\r\n            if (frm.doc.custom_tds_amb) {\r\n                fetch_tds_details(frm);\r\n            } else if (frm.doc.custom_item_name) {\r\n                fetch_tds_options_for_item(frm);\r\n            } else {\r\n                frappe.msgprint(__('Please select TDS AMB or Item Name first'));\r\n            }\r\n        }, __('Custom'));\r\n        \r\n        // Add button to add item to table\r\n        frm.add_custom_button(__('Add Item to Table'), function() {\r\n            add_item_to_table(frm);\r\n        }, __('Custom'));\r\n    }\r\n});\r\n\r\n// Main function: Fetch all TDS options for the selected item\r\nfunction fetch_tds_options_for_item(frm) {\r\n    if (!frm.doc.custom_item_name) return;\r\n    \r\n    console.log(\"=== FETCHING TDS OPTIONS FOR ITEM ===\");\r\n    \r\n    // First get item details to have the item name\r\n    frappe.call({\r\n        method: \"frappe.client.get\",\r\n        args: {\r\n            doctype: \"Item\",\r\n            name: frm.doc.custom_item_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                var item = r.message;\r\n                console.log(\"Item details:\", item);\r\n                \r\n                // Now find all TDS linked to this item\r\n                find_all_tds_for_item(frm, item);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Find all TDS Product Specifications linked to this item\r\nfunction find_all_tds_for_item(frm, item_doc) {\r\n    console.log(\"=== FINDING ALL TDS FOR ITEM ===\");\r\n    \r\n    frappe.call({\r\n        method: \"frappe.client.get_list\",\r\n        args: {\r\n            doctype: \"TDS Product Specification\",\r\n            filters: [\r\n                [\"product_item\", \"=\", item_doc.name]\r\n            ],\r\n            fields: [\"name\", \"product_item\", \"item_code\", \"item_name\"]\r\n        },\r\n        callback: function(r) {\r\n            if (r.message && r.message.length > 0) {\r\n                console.log(\"Found TDS options:\", r.message);\r\n                show_tds_selection_dialog(frm, r.message, item_doc);\r\n            } else {\r\n                find_tds_alternative_search(frm, item_doc);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Show dialog to select from multiple TDS options\r\nfunction show_tds_selection_dialog(frm, tds_options, item_doc) {\r\n    console.log(\"=== SHOWING TDS SELECTION DIALOG ===\");\r\n    \r\n    var dialog = new frappe.ui.Dialog({\r\n        title: __('Select TDS Product Specification'),\r\n        fields: [\r\n            {\r\n                fieldname: 'selected_tds',\r\n                label: __('Available TDS for Item: {0}', [item_doc.item_name]),\r\n                fieldtype: 'Select',\r\n                options: tds_options.map(function(tds) {\r\n                    return {\r\n                        label: tds.name,\r\n                        value: tds.name\r\n                    };\r\n                }),\r\n                reqd: 1\r\n            },\r\n            {\r\n                fieldname: 'add_to_table',\r\n                label: __('Add item to Sales Order table'),\r\n                fieldtype: 'Check',\r\n                default: 1\r\n            },\r\n            {\r\n                fieldname: 'quantity',\r\n                label: __('Quantity'),\r\n                fieldtype: 'Float',\r\n                default: 1,\r\n                depends_on: 'eval:doc.add_to_table'\r\n            },\r\n            {\r\n                fieldname: 'item_info',\r\n                fieldtype: 'HTML',\r\n                options: `<div style=\"padding: 10px; background: #f5f7fa; border-radius: 5px; margin: 10px 0;\">\r\n                    <strong>Item:</strong> ${item_doc.item_name}<br>\r\n                    <strong>Code:</strong> ${item_doc.name}<br>\r\n                    <strong>Found:</strong> ${tds_options.length} TDS options\r\n                </div>`\r\n            }\r\n        ],\r\n        primary_action_label: __('Select & Add'),\r\n        primary_action: function(values) {\r\n            if (values.selected_tds) {\r\n                console.log(\"User selected TDS:\", values.selected_tds);\r\n                // Fetch and update with selected TDS\r\n                fetch_tds_and_update(frm, values.selected_tds, item_doc, values.add_to_table, values.quantity);\r\n                dialog.hide();\r\n            }\r\n        }\r\n    });\r\n    \r\n    dialog.show();\r\n}\r\n\r\n// Fetch TDS details and update fields\r\nfunction fetch_tds_and_update(frm, tds_name, item_doc, add_to_table = true, quantity = 1) {\r\n    frappe.call({\r\n        method: \"frappe.client.get\",\r\n        args: {\r\n            doctype: \"TDS Product Specification\", \r\n            name: tds_name\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                var tds = r.message;\r\n                console.log(\"Selected TDS details:\", tds);\r\n                \r\n                // Update header fields\r\n                update_tds_fields(frm, tds, item_doc);\r\n                \r\n                // Add to items table if requested\r\n                if (add_to_table) {\r\n                    add_item_to_table(frm, item_doc, quantity);\r\n                }\r\n            } else {\r\n                frappe.msgprint(__('TDS Product Specification {0} not found', [tds_name]));\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Function to add item to the items table\r\nfunction add_item_to_table(frm, item_doc = null, quantity = 1) {\r\n    // If item_doc not provided, use the current selected item\r\n    if (!item_doc && frm.doc.custom_item_name) {\r\n        frappe.call({\r\n            method: \"frappe.client.get\",\r\n            args: {\r\n                doctype: \"Item\",\r\n                name: frm.doc.custom_item_name\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    add_item_row(frm, r.message, quantity);\r\n                } else {\r\n                    frappe.msgprint(__('Please select an item first'));\r\n                }\r\n            }\r\n        });\r\n        return;\r\n    }\r\n    \r\n    if (item_doc) {\r\n        add_item_row(frm, item_doc, quantity);\r\n    } else {\r\n        frappe.msgprint(__('Please select an item first'));\r\n    }\r\n}\r\n\r\n// Replace the add_item_row function with this updated version:\r\n\r\n// Add actual row to items table\r\nfunction add_item_row(frm, item_doc, quantity = 1) {\r\n    console.log(\"=== ADDING ITEM TO TABLE ===\");\r\n    console.log(\"Item:\", item_doc);\r\n    console.log(\"Quantity:\", quantity);\r\n    \r\n    // Check if item already exists in table\r\n    var existing_row = frm.doc.items.find(function(item) {\r\n        return item.item_code === item_doc.name;\r\n    });\r\n    \r\n    if (existing_row) {\r\n        frappe.msgprint(__('Item {0} already exists in the table at row {1}', \r\n            [item_doc.item_name, existing_row.idx]));\r\n        return;\r\n    }\r\n    \r\n    // Check if there's an empty row (row with no item_code) that we can reuse\r\n    var empty_row = frm.doc.items.find(function(item) {\r\n        return !item.item_code || item.item_code === '';\r\n    });\r\n    \r\n    if (empty_row) {\r\n        console.log(\"Found empty row, reusing it:\", empty_row.idx);\r\n        // Reuse the empty row instead of adding a new one\r\n        empty_row.item_code = item_doc.name;\r\n        empty_row.item_name = item_doc.item_name;\r\n        empty_row.description = item_doc.description;\r\n        empty_row.qty = quantity;\r\n        empty_row.uom = item_doc.stock_uom;\r\n        \r\n        // Set custom fields from header\r\n        if (frm.doc.custom_tds_amb) {\r\n            empty_row.custom_tds_amb = frm.doc.custom_tds_amb;\r\n        }\r\n        if (frm.doc.custom_tds_item) {\r\n            empty_row.custom_tds_item = frm.doc.custom_tds_item;\r\n        }\r\n        if (frm.doc.custom_coa_amb) {\r\n            empty_row.custom_coa_amb = frm.doc.custom_coa_amb;\r\n        }\r\n        if (frm.doc.custom_coa_item) {\r\n            empty_row.custom_coa_item = frm.doc.custom_coa_item;\r\n        }\r\n        \r\n        // Refresh the items table\r\n        frm.refresh_field(\"items\");\r\n        \r\n        // Get item price and other details for the reused row\r\n        get_item_price_and_details(frm, empty_row, item_doc);\r\n        \r\n        frappe.show_alert({\r\n            message: __('Item {0} added to existing row with quantity {1}', [item_doc.item_name, quantity]),\r\n            indicator: 'green'\r\n        });\r\n    } else {\r\n        // No empty row found, add new row\r\n        var child = frm.add_child(\"items\");\r\n        \r\n        // Set basic item details\r\n        child.item_code = item_doc.name;\r\n        child.item_name = item_doc.item_name;\r\n        child.description = item_doc.description;\r\n        child.qty = quantity;\r\n        child.uom = item_doc.stock_uom;\r\n        \r\n        // Set custom fields from header\r\n        if (frm.doc.custom_tds_amb) {\r\n            child.custom_tds_amb = frm.doc.custom_tds_amb;\r\n        }\r\n        if (frm.doc.custom_tds_item) {\r\n            child.custom_tds_item = frm.doc.custom_tds_item;\r\n        }\r\n        if (frm.doc.custom_coa_amb) {\r\n            child.custom_coa_amb = frm.doc.custom_coa_amb;\r\n        }\r\n        if (frm.doc.custom_coa_item) {\r\n            child.custom_coa_item = frm.doc.custom_coa_item;\r\n        }\r\n        \r\n        // Refresh the items table\r\n        frm.refresh_field(\"items\");\r\n        \r\n        // Get item price and other details\r\n        get_item_price_and_details(frm, child, item_doc);\r\n        \r\n        frappe.show_alert({\r\n            message: __('Item {0} added to new row with quantity {1}', [item_doc.item_name, quantity]),\r\n            indicator: 'green'\r\n        });\r\n    }\r\n}\r\n// Get item price and additional details\r\nfunction get_item_price_and_details(frm, child_row, item_doc) {\r\n    frappe.call({\r\n        method: \"erpnext.stock.get_item_details.get_item_details\",\r\n        args: {\r\n            args: {\r\n                item_code: item_doc.name,\r\n                customer: frm.doc.customer,\r\n                company: frm.doc.company,\r\n                price_list: frm.doc.selling_price_list,\r\n                currency: frm.doc.currency,\r\n                doctype: \"Sales Order\",\r\n                name: frm.doc.name,\r\n                conversion_rate: frm.doc.conversion_rate,\r\n                price_list_currency: frm.doc.price_list_currency,\r\n                plc_conversion_rate: frm.doc.plc_conversion_rate,\r\n                order_type: frm.doc.order_type,\r\n                transaction_date: frm.doc.transaction_date\r\n            }\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                var item_details = r.message;\r\n                \r\n                // Update the row with price details\r\n                frappe.model.set_value(child_row.doctype, child_row.name, 'rate', item_details.rate);\r\n                frappe.model.set_value(child_row.doctype, child_row.name, 'amount', item_details.amount);\r\n                frappe.model.set_value(child_row.doctype, child_row.name, 'income_account', item_details.income_account);\r\n                frappe.model.set_value(child_row.doctype, child_row.name, 'warehouse', item_details.warehouse);\r\n                \r\n                // Refresh the table\r\n                frm.refresh_field(\"items\");\r\n                \r\n                console.log(\"Item details applied:\", item_details);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Update all TDS-related fields (existing function)\r\nfunction update_tds_fields(frm, tds_doc, item_doc) {\r\n    console.log(\"=== UPDATING FIELDS ===\");\r\n    \r\n    var promises = [];\r\n    \r\n    // Update TDS AMB field\r\n    promises.push(frm.set_value('custom_tds_amb', tds_doc.name));\r\n    \r\n    // Update TDS Item field - use the ITEM NAME (descriptive name)\r\n    if (item_doc.item_name) {\r\n        console.log(\"Setting TDS Item to Item Name:\", item_doc.item_name);\r\n        promises.push(frm.set_value('custom_tds_item', item_doc.item_name));\r\n    }\r\n    \r\n    // Update COA fields if they exist in TDS\r\n    if (tds_doc.custom_coa_amb) {\r\n        promises.push(frm.set_value('custom_coa_amb', tds_doc.custom_coa_amb));\r\n    }\r\n    if (tds_doc.custom_coa_item) {\r\n        promises.push(frm.set_value('custom_coa_item', tds_doc.custom_coa_item));\r\n    }\r\n    \r\n    // Wait for all updates\r\n    Promise.all(promises).then(() => {\r\n        frm.refresh_fields();\r\n        \r\n        frappe.show_alert({\r\n            message: __('TDS {0} selected and fields updated', [tds_doc.name]),\r\n            indicator: 'green'\r\n        });\r\n    });\r\n}\r\n\r\n// Function to fetch TDS details from TDS AMB (existing function)\r\nfunction fetch_tds_details(frm) {\r\n    if (!frm.doc.custom_tds_amb) return;\r\n    \r\n    console.log(\"=== FETCHING TDS DETAILS ===\");\r\n    \r\n    frappe.call({\r\n        method: \"frappe.client.get\",\r\n        args: {\r\n            doctype: \"TDS Product Specification\",\r\n            name: frm.doc.custom_tds_amb\r\n        },\r\n        callback: function(r) {\r\n            if (r.message) {\r\n                var tds = r.message;\r\n                \r\n                var item_code = tds.product_item || tds.item_code;\r\n                if (item_code) {\r\n                    frappe.call({\r\n                        method: \"frappe.client.get\",\r\n                        args: {\r\n                            doctype: \"Item\",\r\n                            name: item_code\r\n                        },\r\n                        callback: function(item_r) {\r\n                            if (item_r.message) {\r\n                                update_tds_fields(frm, tds, item_r.message);\r\n                            } else {\r\n                                update_tds_fields_without_item(frm, tds);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    update_tds_fields_without_item(frm, tds);\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Update fields when no item is linked in TDS (existing function)\r\nfunction update_tds_fields_without_item(frm, tds_doc) {\r\n    var promises = [];\r\n    \r\n    promises.push(frm.set_value('custom_tds_amb', tds_doc.name));\r\n    \r\n    if (tds_doc.item_name) {\r\n        promises.push(frm.set_value('custom_tds_item', tds_doc.item_name));\r\n    }\r\n    \r\n    if (tds_doc.custom_coa_amb) {\r\n        promises.push(frm.set_value('custom_coa_amb', tds_doc.custom_coa_amb));\r\n    }\r\n    if (tds_doc.custom_coa_item) {\r\n        promises.push(frm.set_value('custom_coa_item', tds_doc.custom_coa_item));\r\n    }\r\n    \r\n    Promise.all(promises).then(() => {\r\n        frm.refresh_fields();\r\n        frappe.show_alert({\r\n            message: __('TDS details updated'),\r\n            indicator: 'green'\r\n        });\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TDS Product Specification",
  "enabled": 1,
  "modified": "2025-10-24 11:52:38.847402",
  "module": "amb_w_tds",
  "name": "TDS Product Specification auto update",
  "script": "frappe.ui.form.on('Item', {\r\n    item_name: function(frm) {\r\n        // When item name changes, update linked TDS Product Specification\r\n        if (frm.doc.custom_product_key_tds && frm.doc.item_name) {\r\n            update_linked_tds(frm);\r\n        }\r\n    },\r\n    \r\n    after_save: function(frm) {\r\n        // Also update after save to ensure sync\r\n        if (frm.doc.custom_product_key_tds && frm.doc.item_name) {\r\n            update_linked_tds(frm);\r\n        }\r\n    }\r\n});\r\n\r\nfunction update_linked_tds(frm) {\r\n    frappe.call({\r\n        method: \"frappe.client.set_value\",\r\n        args: {\r\n            doctype: \"TDS Product Specification\",\r\n            name: frm.doc.custom_product_key_tds,\r\n            fieldname: {\r\n                item_name: frm.doc.item_name,\r\n                item_code: frm.doc.name\r\n            }\r\n        },\r\n        callback: function(r) {\r\n            frappe.show_alert({\r\n                message: __('Linked TDS Product Specification updated'),\r\n                indicator: 'green'\r\n            });\r\n        },\r\n        error: function(err) {\r\n            frappe.msgprint(__('Error updating TDS: {0}', [err.message]));\r\n        }\r\n    });\r\n}",
  "view": "Form"
 }
]